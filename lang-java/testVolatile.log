OpenJDK 64-Bit Server VM warning: PrintAssembly is enabled; turning on DebugNonSafepoints to gain additional output
Loaded disassembler from hsdis-amd64.so
Decoding compiled method 0x00007fc4ad06fd50:
Code:
[Disassembling for mach='i386:x86-64']
[Entry Point]
  # {method} {0x00007fc4a954b898} 'arraycopy' '(Ljava/lang/Object;ILjava/lang/Object;II)V' in 'java/lang/System'
  # parm0:    rsi:rsi   = 'java/lang/Object'
  # parm1:    rdx       = int
  # parm2:    rcx:rcx   = 'java/lang/Object'
  # parm3:    r8        = int
  # parm4:    r9        = int
  #           [sp+0x60]  (sp of caller)
  0x00007fc4ad06fec0: mov    0x8(%rsi),%r10d
  0x00007fc4ad06fec4: shl    $0x3,%r10
  0x00007fc4ad06fec8: cmp    %r10,%rax
  0x00007fc4ad06fecb: je     0x00007fc4ad06fed8
  0x00007fc4ad06fed1: jmpq   0x00007fc4ad045ba0  ;   {runtime_call}
  0x00007fc4ad06fed6: xchg   %ax,%ax
[Verified Entry Point]
  0x00007fc4ad06fed8: mov    %eax,-0x14000(%rsp)
  0x00007fc4ad06fedf: push   %rbp
  0x00007fc4ad06fee0: mov    %rsp,%rbp
  0x00007fc4ad06fee3: sub    $0x50,%rsp
  0x00007fc4ad06fee7: mov    %r9,(%rsp)
  0x00007fc4ad06feeb: mov    %r8,%r9
  0x00007fc4ad06feee: mov    %rcx,0x18(%rsp)
  0x00007fc4ad06fef3: cmp    $0x0,%rcx
  0x00007fc4ad06fef7: lea    0x18(%rsp),%r8
  0x00007fc4ad06fefc: cmove  0x18(%rsp),%r8
  0x00007fc4ad06ff02: mov    %rdx,%rcx
  0x00007fc4ad06ff05: mov    %rsi,0x8(%rsp)
  0x00007fc4ad06ff0a: cmp    $0x0,%rsi
  0x00007fc4ad06ff0e: lea    0x8(%rsp),%rdx
  0x00007fc4ad06ff13: cmove  0x8(%rsp),%rdx
  0x00007fc4ad06ff19: movabs $0x6b4900c78,%r14  ;   {oop(a 'java/lang/Class' = 'java/lang/System')}
  0x00007fc4ad06ff23: mov    %r14,0x38(%rsp)
  0x00007fc4ad06ff28: lea    0x38(%rsp),%r14
  0x00007fc4ad06ff2d: mov    %r14,%rsi          ; OopMap{[24]=Oop [8]=Oop [56]=Oop off=112}
  0x00007fc4ad06ff30: movabs $0x7fc4ad06ff30,%r10  ;   {section_word}
  0x00007fc4ad06ff3a: mov    %r10,0x238(%r15)
  0x00007fc4ad06ff41: mov    %rsp,0x230(%r15)
  0x00007fc4ad06ff48: cmpb   $0x0,0x16e30d3d(%rip)        # 0x00007fc4c3ea0c8c
                                                ;   {external_word}
  0x00007fc4ad06ff4f: je     0x00007fc4ad06ff93
  0x00007fc4ad06ff55: push   %rsi
  0x00007fc4ad06ff56: push   %rdx
  0x00007fc4ad06ff57: push   %rcx
  0x00007fc4ad06ff58: push   %r8
  0x00007fc4ad06ff5a: push   %r9
  0x00007fc4ad06ff5c: movabs $0x7fc4a954b898,%rsi  ;   {metadata({method} {0x00007fc4a954b898} 'arraycopy' '(Ljava/lang/Object;ILjava/lang/Object;II)V' in 'java/lang/System')}
  0x00007fc4ad06ff66: mov    %r15,%rdi
  0x00007fc4ad06ff69: test   $0xf,%esp
  0x00007fc4ad06ff6f: je     0x00007fc4ad06ff87
  0x00007fc4ad06ff75: sub    $0x8,%rsp
  0x00007fc4ad06ff79: callq  0x00007fc4c3af20d0  ;   {runtime_call}
  0x00007fc4ad06ff7e: add    $0x8,%rsp
  0x00007fc4ad06ff82: jmpq   0x00007fc4ad06ff8c
  0x00007fc4ad06ff87: callq  0x00007fc4c3af20d0  ;   {runtime_call}
  0x00007fc4ad06ff8c: pop    %r9
  0x00007fc4ad06ff8e: pop    %r8
  0x00007fc4ad06ff90: pop    %rcx
  0x00007fc4ad06ff91: pop    %rdx
  0x00007fc4ad06ff92: pop    %rsi
  0x00007fc4ad06ff93: lea    0x250(%r15),%rdi
  0x00007fc4ad06ff9a: movl   $0x4,0x2c8(%r15)
  0x00007fc4ad06ffa5: callq  0x00007fc4c3811220  ;   {runtime_call}
  0x00007fc4ad06ffaa: vzeroupper 
  0x00007fc4ad06ffad: movl   $0x5,0x2c8(%r15)
  0x00007fc4ad06ffb8: mov    %r15d,%ecx
  0x00007fc4ad06ffbb: shr    $0x4,%ecx
  0x00007fc4ad06ffbe: and    $0xffc,%ecx
  0x00007fc4ad06ffc4: movabs $0x7fc4c410c000,%r10  ;   {external_word}
  0x00007fc4ad06ffce: mov    %ecx,(%r10,%rcx,1)
  0x00007fc4ad06ffd2: cmpl   $0x0,0x16e3e0b0(%rip)        # 0x00007fc4c3eae08c
                                                ;   {external_word}
  0x00007fc4ad06ffdc: jne    0x00007fc4ad06fff0
  0x00007fc4ad06ffe2: cmpl   $0x0,0x30(%r15)
  0x00007fc4ad06ffea: je     0x00007fc4ad070009
  0x00007fc4ad06fff0: mov    %r15,%rdi
  0x00007fc4ad06fff3: mov    %rsp,%r12
  0x00007fc4ad06fff6: sub    $0x0,%rsp
  0x00007fc4ad06fffa: and    $0xfffffffffffffff0,%rsp
  0x00007fc4ad06fffe: callq  0x00007fc4c3b9be60  ;   {runtime_call}
  0x00007fc4ad070003: mov    %r12,%rsp
  0x00007fc4ad070006: xor    %r12,%r12
  0x00007fc4ad070009: movl   $0x8,0x2c8(%r15)
  0x00007fc4ad070014: cmpl   $0x1,0x2f4(%r15)
  0x00007fc4ad07001f: je     0x00007fc4ad0700a7
  0x00007fc4ad070025: cmpb   $0x0,0x16e30c60(%rip)        # 0x00007fc4c3ea0c8c
                                                ;   {external_word}
  0x00007fc4ad07002c: je     0x00007fc4ad070062
  0x00007fc4ad070032: movabs $0x7fc4a954b898,%rsi  ;   {metadata({method} {0x00007fc4a954b898} 'arraycopy' '(Ljava/lang/Object;ILjava/lang/Object;II)V' in 'java/lang/System')}
  0x00007fc4ad07003c: mov    %r15,%rdi
  0x00007fc4ad07003f: test   $0xf,%esp
  0x00007fc4ad070045: je     0x00007fc4ad07005d
  0x00007fc4ad07004b: sub    $0x8,%rsp
  0x00007fc4ad07004f: callq  0x00007fc4c3af2180  ;   {runtime_call}
  0x00007fc4ad070054: add    $0x8,%rsp
  0x00007fc4ad070058: jmpq   0x00007fc4ad070062
  0x00007fc4ad07005d: callq  0x00007fc4c3af2180  ;   {runtime_call}
  0x00007fc4ad070062: movabs $0x0,%r10
  0x00007fc4ad07006c: mov    %r10,0x230(%r15)
  0x00007fc4ad070073: movabs $0x0,%r10
  0x00007fc4ad07007d: mov    %r10,0x238(%r15)
  0x00007fc4ad070084: mov    0x38(%r15),%rcx
  0x00007fc4ad070088: movl   $0x0,0x100(%rcx)
  0x00007fc4ad070092: leaveq 
  0x00007fc4ad070093: cmpq   $0x0,0x8(%r15)
  0x00007fc4ad07009b: jne    0x00007fc4ad0700a2
  0x00007fc4ad0700a1: retq   
  0x00007fc4ad0700a2: jmpq   Stub::forward exception  ;   {runtime_call}
  0x00007fc4ad0700a7: mov    %rsp,%r12
  0x00007fc4ad0700aa: sub    $0x0,%rsp
  0x00007fc4ad0700ae: and    $0xfffffffffffffff0,%rsp
  0x00007fc4ad0700b2: callq  0x00007fc4c3af2720  ;   {runtime_call}
  0x00007fc4ad0700b7: mov    %r12,%rsp
  0x00007fc4ad0700ba: xor    %r12,%r12
  0x00007fc4ad0700bd: jmpq   0x00007fc4ad070025
  0x00007fc4ad0700c2: hlt    
  0x00007fc4ad0700c3: hlt    
  0x00007fc4ad0700c4: hlt    
  0x00007fc4ad0700c5: hlt    
  0x00007fc4ad0700c6: hlt    
  0x00007fc4ad0700c7: hlt    
Decoding compiled method 0x00007fc4ad18fed0:
Code:
[Entry Point]
[Constants]
  # {method} {0x00007fc4a96fda38} 'getSnapshotTransformerList' '()[Lsun/instrument/TransformerManager$TransformerInfo;' in 'sun/instrument/TransformerManager'
  #           [sp+0x40]  (sp of caller)
  0x00007fc4ad190020: mov    0x8(%rsi),%r10d
  0x00007fc4ad190024: shl    $0x3,%r10
  0x00007fc4ad190028: cmp    %rax,%r10
  0x00007fc4ad19002b: jne    0x00007fc4ad045ba0  ;   {runtime_call}
  0x00007fc4ad190031: nopl   0x0(%rax,%rax,1)
  0x00007fc4ad190039: nopl   0x0(%rax)
[Verified Entry Point]
  0x00007fc4ad190040: mov    %eax,-0x14000(%rsp)
  0x00007fc4ad190047: push   %rbp
  0x00007fc4ad190048: sub    $0x30,%rsp         ;*aload_0
                                                ; - sun.instrument.TransformerManager::getSnapshotTransformerList@0 (line 166)

  0x00007fc4ad19004c: mov    0x10(%rsi),%eax
  0x00007fc4ad19004f: shl    $0x3,%rax          ;*getfield mTransformerList
                                                ; - sun.instrument.TransformerManager::getSnapshotTransformerList@1 (line 166)

  0x00007fc4ad190053: add    $0x30,%rsp
  0x00007fc4ad190057: pop    %rbp
  0x00007fc4ad190058: test   %eax,0x16fbd0a2(%rip)        # 0x00007fc4c414d100
                                                ;   {poll_return}
  0x00007fc4ad19005e: retq   
  0x00007fc4ad19005f: nop
  0x00007fc4ad190060: nop
  0x00007fc4ad190061: mov    0x300(%r15),%rax
  0x00007fc4ad190068: movabs $0x0,%r10
  0x00007fc4ad190072: mov    %r10,0x300(%r15)
  0x00007fc4ad190079: movabs $0x0,%r10
  0x00007fc4ad190083: mov    %r10,0x308(%r15)
  0x00007fc4ad19008a: add    $0x30,%rsp
  0x00007fc4ad19008e: pop    %rbp
  0x00007fc4ad19008f: jmpq   0x00007fc4ad070820  ;   {runtime_call}
  0x00007fc4ad190094: hlt    
  0x00007fc4ad190095: hlt    
  0x00007fc4ad190096: hlt    
  0x00007fc4ad190097: hlt    
  0x00007fc4ad190098: hlt    
  0x00007fc4ad190099: hlt    
  0x00007fc4ad19009a: hlt    
  0x00007fc4ad19009b: hlt    
  0x00007fc4ad19009c: hlt    
  0x00007fc4ad19009d: hlt    
  0x00007fc4ad19009e: hlt    
  0x00007fc4ad19009f: hlt    
[Exception Handler]
[Stub Code]
  0x00007fc4ad1900a0: callq  0x00007fc4ad070160  ;   {no_reloc}
  0x00007fc4ad1900a5: mov    %rsp,-0x28(%rsp)
  0x00007fc4ad1900aa: sub    $0x80,%rsp
  0x00007fc4ad1900b1: mov    %rax,0x78(%rsp)
  0x00007fc4ad1900b6: mov    %rcx,0x70(%rsp)
  0x00007fc4ad1900bb: mov    %rdx,0x68(%rsp)
  0x00007fc4ad1900c0: mov    %rbx,0x60(%rsp)
  0x00007fc4ad1900c5: mov    %rbp,0x50(%rsp)
  0x00007fc4ad1900ca: mov    %rsi,0x48(%rsp)
  0x00007fc4ad1900cf: mov    %rdi,0x40(%rsp)
  0x00007fc4ad1900d4: mov    %r8,0x38(%rsp)
  0x00007fc4ad1900d9: mov    %r9,0x30(%rsp)
  0x00007fc4ad1900de: mov    %r10,0x28(%rsp)
  0x00007fc4ad1900e3: mov    %r11,0x20(%rsp)
  0x00007fc4ad1900e8: mov    %r12,0x18(%rsp)
  0x00007fc4ad1900ed: mov    %r13,0x10(%rsp)
  0x00007fc4ad1900f2: mov    %r14,0x8(%rsp)
  0x00007fc4ad1900f7: mov    %r15,(%rsp)
  0x00007fc4ad1900fb: movabs $0x7fc4c3c3b49e,%rdi  ;   {external_word}
  0x00007fc4ad190105: movabs $0x7fc4ad1900a5,%rsi  ;   {internal_word}
  0x00007fc4ad19010f: mov    %rsp,%rdx
  0x00007fc4ad190112: and    $0xfffffffffffffff0,%rsp
  0x00007fc4ad190116: callq  0x00007fc4c3961460  ;   {runtime_call}
  0x00007fc4ad19011b: hlt    
[Deopt Handler Code]
  0x00007fc4ad19011c: movabs $0x7fc4ad19011c,%r10  ;   {section_word}
  0x00007fc4ad190126: push   %r10
  0x00007fc4ad190128: jmpq   0x00007fc4ad046e40  ;   {runtime_call}
  0x00007fc4ad19012d: hlt    
  0x00007fc4ad19012e: hlt    
  0x00007fc4ad19012f: hlt    
Decoding compiled method 0x00007fc4ad220690:
Code:
[Entry Point]
[Constants]
  # {method} {0x00007fc4a955ada0} 'get' '()Ljava/lang/Object;' in 'java/lang/ref/SoftReference'
  #           [sp+0x50]  (sp of caller)
  0x00007fc4ad220800: mov    0x8(%rsi),%r10d
  0x00007fc4ad220804: shl    $0x3,%r10
  0x00007fc4ad220808: cmp    %rax,%r10
  0x00007fc4ad22080b: jne    0x00007fc4ad045ba0  ;   {runtime_call}
  0x00007fc4ad220811: nopl   0x0(%rax,%rax,1)
  0x00007fc4ad220819: nopl   0x0(%rax)
[Verified Entry Point]
  0x00007fc4ad220820: mov    %eax,-0x14000(%rsp)
  0x00007fc4ad220827: push   %rbp
  0x00007fc4ad220828: sub    $0x40,%rsp
  0x00007fc4ad22082c: movabs $0x7fc4a97bff50,%rdi  ;   {metadata(method data for {method} {0x00007fc4a955ada0} 'get' '()Ljava/lang/Object;' in 'java/lang/ref/SoftReference')}
  0x00007fc4ad220836: mov    0xdc(%rdi),%ebx
  0x00007fc4ad22083c: add    $0x8,%ebx
  0x00007fc4ad22083f: mov    %ebx,0xdc(%rdi)
  0x00007fc4ad220845: movabs $0x7fc4a955ada0,%rdi  ;   {metadata({method} {0x00007fc4a955ada0} 'get' '()Ljava/lang/Object;' in 'java/lang/ref/SoftReference')}
  0x00007fc4ad22084f: and    $0x1ff8,%ebx
  0x00007fc4ad220855: cmp    $0x0,%ebx
  0x00007fc4ad220858: je     0x00007fc4ad22091e  ;*aload_0
                                                ; - java.lang.ref.SoftReference::get@0 (line 112)

  0x00007fc4ad22085e: mov    %rsi,%rdi
  0x00007fc4ad220861: movabs $0x7fc4a97bff50,%rbx  ;   {metadata(method data for {method} {0x00007fc4a955ada0} 'get' '()Ljava/lang/Object;' in 'java/lang/ref/SoftReference')}
  0x00007fc4ad22086b: addq   $0x1,0x108(%rbx)
  0x00007fc4ad220873: mov    %rsi,%rdi
  0x00007fc4ad220876: mov    %rdi,%rsi          ;*invokespecial get
                                                ; - java.lang.ref.SoftReference::get@1 (line 112)

  0x00007fc4ad220879: mov    %rdi,0x28(%rsp)
  0x00007fc4ad22087e: nop
  0x00007fc4ad22087f: callq  0x00007fc4ad045de0  ; OopMap{[40]=Oop off=132}
                                                ;*invokespecial get
                                                ; - java.lang.ref.SoftReference::get@1 (line 112)
                                                ;   {optimized virtual_call}
  0x00007fc4ad220884: cmp    $0x0,%rax
  0x00007fc4ad220888: movabs $0x7fc4a97bff50,%rsi  ;   {metadata(method data for {method} {0x00007fc4a955ada0} 'get' '()Ljava/lang/Object;' in 'java/lang/ref/SoftReference')}
  0x00007fc4ad220892: movabs $0x118,%rdi
  0x00007fc4ad22089c: je     0x00007fc4ad2208ac
  0x00007fc4ad2208a2: movabs $0x128,%rdi
  0x00007fc4ad2208ac: mov    (%rsi,%rdi,1),%rbx
  0x00007fc4ad2208b0: lea    0x1(%rbx),%rbx
  0x00007fc4ad2208b4: mov    %rbx,(%rsi,%rdi,1)
  0x00007fc4ad2208b8: je     0x00007fc4ad220912  ;*ifnull
                                                ; - java.lang.ref.SoftReference::get@6 (line 113)

  0x00007fc4ad2208be: mov    0x28(%rsp),%rsi
  0x00007fc4ad2208c3: mov    0x20(%rsi),%rdi    ;*getfield timestamp
                                                ; - java.lang.ref.SoftReference::get@10 (line 113)

  0x00007fc4ad2208c7: movabs $0x6b49018a0,%rbx  ;   {oop(a 'java/lang/Class' = 'java/lang/ref/SoftReference')}
  0x00007fc4ad2208d1: mov    0x68(%rbx),%rdx    ;*getstatic clock
                                                ; - java.lang.ref.SoftReference::get@13 (line 113)

  0x00007fc4ad2208d5: cmp    %rdx,%rdi
  0x00007fc4ad2208d8: movabs $0x7fc4a97bff50,%rdi  ;   {metadata(method data for {method} {0x00007fc4a955ada0} 'get' '()Ljava/lang/Object;' in 'java/lang/ref/SoftReference')}
  0x00007fc4ad2208e2: movabs $0x148,%rbx
  0x00007fc4ad2208ec: jne    0x00007fc4ad2208fc
  0x00007fc4ad2208f2: movabs $0x138,%rbx
  0x00007fc4ad2208fc: mov    (%rdi,%rbx,1),%rcx
  0x00007fc4ad220900: lea    0x1(%rcx),%rcx
  0x00007fc4ad220904: mov    %rcx,(%rdi,%rbx,1)
  0x00007fc4ad220908: je     0x00007fc4ad220912  ;*lcmp
                                                ; - java.lang.ref.SoftReference::get@16 (line 113)

  0x00007fc4ad22090e: mov    %rdx,0x20(%rsi)    ;*putfield timestamp
                                                ; - java.lang.ref.SoftReference::get@24 (line 114)

  0x00007fc4ad220912: add    $0x40,%rsp
  0x00007fc4ad220916: pop    %rbp
  0x00007fc4ad220917: test   %eax,0x16f2c7e3(%rip)        # 0x00007fc4c414d100
                                                ;   {poll_return}
  0x00007fc4ad22091d: retq   
  0x00007fc4ad22091e: mov    %rdi,0x8(%rsp)
  0x00007fc4ad220923: movq   $0xffffffffffffffff,(%rsp)
  0x00007fc4ad22092b: callq  0x00007fc4ad18f560  ; OopMap{rsi=Oop off=304}
                                                ;*synchronization entry
                                                ; - java.lang.ref.SoftReference::get@-1 (line 112)
                                                ;   {runtime_call}
  0x00007fc4ad220930: jmpq   0x00007fc4ad22085e
  0x00007fc4ad220935: nop
  0x00007fc4ad220936: nop
  0x00007fc4ad220937: mov    0x300(%r15),%rax
  0x00007fc4ad22093e: movabs $0x0,%r10
  0x00007fc4ad220948: mov    %r10,0x300(%r15)
  0x00007fc4ad22094f: movabs $0x0,%r10
  0x00007fc4ad220959: mov    %r10,0x308(%r15)
  0x00007fc4ad220960: add    $0x40,%rsp
  0x00007fc4ad220964: pop    %rbp
  0x00007fc4ad220965: jmpq   0x00007fc4ad070820  ;   {runtime_call}
  0x00007fc4ad22096a: hlt    
  0x00007fc4ad22096b: hlt    
  0x00007fc4ad22096c: hlt    
  0x00007fc4ad22096d: hlt    
  0x00007fc4ad22096e: hlt    
  0x00007fc4ad22096f: hlt    
  0x00007fc4ad220970: hlt    
  0x00007fc4ad220971: hlt    
  0x00007fc4ad220972: hlt    
  0x00007fc4ad220973: hlt    
  0x00007fc4ad220974: hlt    
  0x00007fc4ad220975: hlt    
  0x00007fc4ad220976: hlt    
  0x00007fc4ad220977: hlt    
  0x00007fc4ad220978: hlt    
  0x00007fc4ad220979: hlt    
  0x00007fc4ad22097a: hlt    
  0x00007fc4ad22097b: hlt    
  0x00007fc4ad22097c: hlt    
  0x00007fc4ad22097d: hlt    
  0x00007fc4ad22097e: hlt    
  0x00007fc4ad22097f: hlt    
[Stub Code]
  0x00007fc4ad220980: nop                       ;   {no_reloc}
  0x00007fc4ad220981: nop
  0x00007fc4ad220982: nop
  0x00007fc4ad220983: nop
  0x00007fc4ad220984: nop
  0x00007fc4ad220985: movabs $0x0,%rbx          ;   {static_stub}
  0x00007fc4ad22098f: jmpq   0x00007fc4ad22098f  ;   {runtime_call}
[Exception Handler]
  0x00007fc4ad220994: callq  0x00007fc4ad070160  ;   {runtime_call}
  0x00007fc4ad220999: mov    %rsp,-0x28(%rsp)
  0x00007fc4ad22099e: sub    $0x80,%rsp
  0x00007fc4ad2209a5: mov    %rax,0x78(%rsp)
  0x00007fc4ad2209aa: mov    %rcx,0x70(%rsp)
  0x00007fc4ad2209af: mov    %rdx,0x68(%rsp)
  0x00007fc4ad2209b4: mov    %rbx,0x60(%rsp)
  0x00007fc4ad2209b9: mov    %rbp,0x50(%rsp)
  0x00007fc4ad2209be: mov    %rsi,0x48(%rsp)
  0x00007fc4ad2209c3: mov    %rdi,0x40(%rsp)
  0x00007fc4ad2209c8: mov    %r8,0x38(%rsp)
  0x00007fc4ad2209cd: mov    %r9,0x30(%rsp)
  0x00007fc4ad2209d2: mov    %r10,0x28(%rsp)
  0x00007fc4ad2209d7: mov    %r11,0x20(%rsp)
  0x00007fc4ad2209dc: mov    %r12,0x18(%rsp)
  0x00007fc4ad2209e1: mov    %r13,0x10(%rsp)
  0x00007fc4ad2209e6: mov    %r14,0x8(%rsp)
  0x00007fc4ad2209eb: mov    %r15,(%rsp)
  0x00007fc4ad2209ef: movabs $0x7fc4c3c3b49e,%rdi  ;   {external_word}
  0x00007fc4ad2209f9: movabs $0x7fc4ad220999,%rsi  ;   {internal_word}
  0x00007fc4ad220a03: mov    %rsp,%rdx
  0x00007fc4ad220a06: and    $0xfffffffffffffff0,%rsp
  0x00007fc4ad220a0a: callq  0x00007fc4c3961460  ;   {runtime_call}
  0x00007fc4ad220a0f: hlt    
[Deopt Handler Code]
  0x00007fc4ad220a10: movabs $0x7fc4ad220a10,%r10  ;   {section_word}
  0x00007fc4ad220a1a: push   %r10
  0x00007fc4ad220a1c: jmpq   0x00007fc4ad046e40  ;   {runtime_call}
  0x00007fc4ad220a21: hlt    
  0x00007fc4ad220a22: hlt    
  0x00007fc4ad220a23: hlt    
  0x00007fc4ad220a24: hlt    
  0x00007fc4ad220a25: hlt    
  0x00007fc4ad220a26: hlt    
  0x00007fc4ad220a27: hlt    
Decoding compiled method 0x00007fc4ad21ff10:
Code:
[Entry Point]
[Constants]
  # {method} {0x00007fc4a9537180} 'indexOf' '(II)I' in 'java/lang/String'
  # this:     rsi:rsi   = 'java/lang/String'
  # parm0:    rdx       = int
  # parm1:    rcx       = int
  #           [sp+0x40]  (sp of caller)
  0x00007fc4ad2200a0: mov    0x8(%rsi),%r10d
  0x00007fc4ad2200a4: shl    $0x3,%r10
  0x00007fc4ad2200a8: cmp    %rax,%r10
  0x00007fc4ad2200ab: jne    0x00007fc4ad045ba0  ;   {runtime_call}
  0x00007fc4ad2200b1: nopl   0x0(%rax,%rax,1)
  0x00007fc4ad2200b9: nopl   0x0(%rax)
[Verified Entry Point]
  0x00007fc4ad2200c0: mov    %eax,-0x14000(%rsp)
  0x00007fc4ad2200c7: push   %rbp
  0x00007fc4ad2200c8: sub    $0x30,%rsp
  0x00007fc4ad2200cc: movabs $0x7fc4a96f9b98,%rax  ;   {metadata(method data for {method} {0x00007fc4a9537180} 'indexOf' '(II)I' in 'java/lang/String')}
  0x00007fc4ad2200d6: mov    0xdc(%rax),%edi
  0x00007fc4ad2200dc: add    $0x8,%edi
  0x00007fc4ad2200df: mov    %edi,0xdc(%rax)
  0x00007fc4ad2200e5: movabs $0x7fc4a9537180,%rax  ;   {metadata({method} {0x00007fc4a9537180} 'indexOf' '(II)I' in 'java/lang/String')}
  0x00007fc4ad2200ef: and    $0x1ff8,%edi
  0x00007fc4ad2200f5: cmp    $0x0,%edi
  0x00007fc4ad2200f8: je     0x00007fc4ad220301  ;*aload_0
                                                ; - java.lang.String::indexOf@0 (line 1546)

  0x00007fc4ad2200fe: mov    0xc(%rsi),%eax
  0x00007fc4ad220101: shl    $0x3,%rax          ;*getfield value
                                                ; - java.lang.String::indexOf@1 (line 1546)

  0x00007fc4ad220105: mov    0xc(%rax),%edi     ;*arraylength
                                                ; - java.lang.String::indexOf@4 (line 1546)
                                                ; implicit exception: dispatches to 0x00007fc4ad220318
  0x00007fc4ad220108: cmp    $0x0,%ecx
  0x00007fc4ad22010b: movabs $0x7fc4a96f9b98,%rbx  ;   {metadata(method data for {method} {0x00007fc4a9537180} 'indexOf' '(II)I' in 'java/lang/String')}
  0x00007fc4ad220115: movabs $0x108,%r8
  0x00007fc4ad22011f: jge    0x00007fc4ad22012f
  0x00007fc4ad220125: movabs $0x118,%r8
  0x00007fc4ad22012f: mov    (%rbx,%r8,1),%r9
  0x00007fc4ad220133: lea    0x1(%r9),%r9
  0x00007fc4ad220137: mov    %r9,(%rbx,%r8,1)
  0x00007fc4ad22013b: jge    0x00007fc4ad22015b  ;*ifge
                                                ; - java.lang.String::indexOf@7 (line 1547)

  0x00007fc4ad220141: movabs $0x7fc4a96f9b98,%rcx  ;   {metadata(method data for {method} {0x00007fc4a9537180} 'indexOf' '(II)I' in 'java/lang/String')}
  0x00007fc4ad22014b: incl   0x128(%rcx)
  0x00007fc4ad220151: mov    $0x0,%ecx
  0x00007fc4ad220156: jmpq   0x00007fc4ad220193  ;*goto
                                                ; - java.lang.String::indexOf@12 (line 1548)

  0x00007fc4ad22015b: cmp    %edi,%ecx
  0x00007fc4ad22015d: movabs $0x7fc4a96f9b98,%rbx  ;   {metadata(method data for {method} {0x00007fc4a9537180} 'indexOf' '(II)I' in 'java/lang/String')}
  0x00007fc4ad220167: movabs $0x140,%r8
  0x00007fc4ad220171: jl     0x00007fc4ad220181
  0x00007fc4ad220177: movabs $0x150,%r8
  0x00007fc4ad220181: mov    (%rbx,%r8,1),%r9
  0x00007fc4ad220185: lea    0x1(%r9),%r9
  0x00007fc4ad220189: mov    %r9,(%rbx,%r8,1)
  0x00007fc4ad22018d: jge    0x00007fc4ad2202f0  ;*if_icmplt
                                                ; - java.lang.String::indexOf@17 (line 1549)

  0x00007fc4ad220193: cmp    $0x10000,%edx
  0x00007fc4ad220199: movabs $0x7fc4a96f9b98,%rbx  ;   {metadata(method data for {method} {0x00007fc4a9537180} 'indexOf' '(II)I' in 'java/lang/String')}
  0x00007fc4ad2201a3: movabs $0x160,%r8
  0x00007fc4ad2201ad: jge    0x00007fc4ad2201bd
  0x00007fc4ad2201b3: movabs $0x170,%r8
  0x00007fc4ad2201bd: mov    (%rbx,%r8,1),%r9
  0x00007fc4ad2201c1: lea    0x1(%r9),%r9
  0x00007fc4ad2201c5: mov    %r9,(%rbx,%r8,1)
  0x00007fc4ad2201c9: jge    0x00007fc4ad2202c8
  0x00007fc4ad2201cf: jmpq   0x00007fc4ad22026b  ;*if_icmpge
                                                ; - java.lang.String::indexOf@25 (line 1554)

  0x00007fc4ad2201d4: nopl   0x0(%rax)
  0x00007fc4ad2201d8: movslq %ecx,%rsi
  0x00007fc4ad2201db: cmp    0xc(%rax),%ecx
  0x00007fc4ad2201de: jae    0x00007fc4ad22031d
  0x00007fc4ad2201e4: movzwl 0x10(%rax,%rsi,2),%esi  ;*caload
                                                ; - java.lang.String::indexOf@47 (line 1559)

  0x00007fc4ad2201e9: cmp    %edx,%esi
  0x00007fc4ad2201eb: movabs $0x7fc4a96f9b98,%rsi  ;   {metadata(method data for {method} {0x00007fc4a9537180} 'indexOf' '(II)I' in 'java/lang/String')}
  0x00007fc4ad2201f5: movabs $0x1a0,%rbx
  0x00007fc4ad2201ff: jne    0x00007fc4ad22020f
  0x00007fc4ad220205: movabs $0x1b0,%rbx
  0x00007fc4ad22020f: mov    (%rsi,%rbx,1),%r8
  0x00007fc4ad220213: lea    0x1(%r8),%r8
  0x00007fc4ad220217: mov    %r8,(%rsi,%rbx,1)
  0x00007fc4ad22021b: je     0x00007fc4ad2202a8  ;*if_icmpne
                                                ; - java.lang.String::indexOf@49 (line 1559)

  0x00007fc4ad220221: inc    %ecx
  0x00007fc4ad220223: movabs $0x7fc4a96f9b98,%rsi  ;   {metadata(method data for {method} {0x00007fc4a9537180} 'indexOf' '(II)I' in 'java/lang/String')}
  0x00007fc4ad22022d: mov    0xe0(%rsi),%ebx
  0x00007fc4ad220233: add    $0x8,%ebx
  0x00007fc4ad220236: mov    %ebx,0xe0(%rsi)
  0x00007fc4ad22023c: movabs $0x7fc4a9537180,%rsi  ;   {metadata({method} {0x00007fc4a9537180} 'indexOf' '(II)I' in 'java/lang/String')}
  0x00007fc4ad220246: and    $0xfff8,%ebx
  0x00007fc4ad22024c: cmp    $0x0,%ebx
  0x00007fc4ad22024f: je     0x00007fc4ad220326  ; OopMap{rax=Oop off=437}
                                                ;*goto
                                                ; - java.lang.String::indexOf@58 (line 1558)

  0x00007fc4ad220255: test   %eax,0x16f2cea5(%rip)        # 0x00007fc4c414d100
                                                ;   {poll}
  0x00007fc4ad22025b: movabs $0x7fc4a96f9b98,%rsi  ;   {metadata(method data for {method} {0x00007fc4a9537180} 'indexOf' '(II)I' in 'java/lang/String')}
  0x00007fc4ad220265: incl   0x1c0(%rsi)        ;*goto
                                                ; - java.lang.String::indexOf@58 (line 1558)

  0x00007fc4ad22026b: cmp    %edi,%ecx
  0x00007fc4ad22026d: movabs $0x7fc4a96f9b98,%rsi  ;   {metadata(method data for {method} {0x00007fc4a9537180} 'indexOf' '(II)I' in 'java/lang/String')}
  0x00007fc4ad220277: movabs $0x180,%rbx
  0x00007fc4ad220281: jge    0x00007fc4ad220291
  0x00007fc4ad220287: movabs $0x190,%rbx
  0x00007fc4ad220291: mov    (%rsi,%rbx,1),%r8
  0x00007fc4ad220295: lea    0x1(%r8),%r8
  0x00007fc4ad220299: mov    %r8,(%rsi,%rbx,1)
  0x00007fc4ad22029d: jge    0x00007fc4ad2202b7
  0x00007fc4ad2202a3: jmpq   0x00007fc4ad2201d8  ;*if_icmpge
                                                ; - java.lang.String::indexOf@40 (line 1558)

  0x00007fc4ad2202a8: mov    %rcx,%rax
  0x00007fc4ad2202ab: add    $0x30,%rsp
  0x00007fc4ad2202af: pop    %rbp
  0x00007fc4ad2202b0: test   %eax,0x16f2ce4a(%rip)        # 0x00007fc4c414d100
                                                ;   {poll_return}
  0x00007fc4ad2202b6: retq                      ;*ireturn
                                                ; - java.lang.String::indexOf@54 (line 1560)

  0x00007fc4ad2202b7: mov    $0xffffffff,%eax
  0x00007fc4ad2202bc: add    $0x30,%rsp
  0x00007fc4ad2202c0: pop    %rbp
  0x00007fc4ad2202c1: test   %eax,0x16f2ce39(%rip)        # 0x00007fc4c414d100
                                                ;   {poll_return}
  0x00007fc4ad2202c7: retq                      ;*ireturn
                                                ; - java.lang.String::indexOf@62 (line 1563)

  0x00007fc4ad2202c8: mov    %rsi,%rdi
  0x00007fc4ad2202cb: movabs $0x7fc4a96f9b98,%rbx  ;   {metadata(method data for {method} {0x00007fc4a9537180} 'indexOf' '(II)I' in 'java/lang/String')}
  0x00007fc4ad2202d5: addq   $0x1,0x1d8(%rbx)
  0x00007fc4ad2202dd: nop
  0x00007fc4ad2202de: nop
  0x00007fc4ad2202df: callq  0x00007fc4ad045de0  ; OopMap{off=580}
                                                ;*invokespecial indexOfSupplementary
                                                ; - java.lang.String::indexOf@66 (line 1565)
                                                ;   {optimized virtual_call}
  0x00007fc4ad2202e4: add    $0x30,%rsp
  0x00007fc4ad2202e8: pop    %rbp
  0x00007fc4ad2202e9: test   %eax,0x16f2ce11(%rip)        # 0x00007fc4c414d100
                                                ;   {poll_return}
  0x00007fc4ad2202ef: retq                      ;*ireturn
                                                ; - java.lang.String::indexOf@69 (line 1565)

  0x00007fc4ad2202f0: mov    $0xffffffff,%eax
  0x00007fc4ad2202f5: add    $0x30,%rsp
  0x00007fc4ad2202f9: pop    %rbp
  0x00007fc4ad2202fa: test   %eax,0x16f2ce00(%rip)        # 0x00007fc4c414d100
                                                ;   {poll_return}
  0x00007fc4ad220300: retq   
  0x00007fc4ad220301: mov    %rax,0x8(%rsp)
  0x00007fc4ad220306: movq   $0xffffffffffffffff,(%rsp)
  0x00007fc4ad22030e: callq  0x00007fc4ad18f560  ; OopMap{rsi=Oop off=627}
                                                ;*synchronization entry
                                                ; - java.lang.String::indexOf@-1 (line 1546)
                                                ;   {runtime_call}
  0x00007fc4ad220313: jmpq   0x00007fc4ad2200fe
  0x00007fc4ad220318: callq  0x00007fc4ad0fddc0  ; OopMap{rsi=Oop rax=Oop off=637}
                                                ;*arraylength
                                                ; - java.lang.String::indexOf@4 (line 1546)
                                                ;   {runtime_call}
  0x00007fc4ad22031d: mov    %rcx,(%rsp)
  0x00007fc4ad220321: callq  0x00007fc4ad070380  ; OopMap{rax=Oop off=646}
                                                ;*caload
                                                ; - java.lang.String::indexOf@47 (line 1559)
                                                ;   {runtime_call}
  0x00007fc4ad220326: mov    %rsi,0x8(%rsp)
  0x00007fc4ad22032b: movq   $0x3a,(%rsp)
  0x00007fc4ad220333: callq  0x00007fc4ad18f560  ; OopMap{rax=Oop off=664}
                                                ;*goto
                                                ; - java.lang.String::indexOf@58 (line 1558)
                                                ;   {runtime_call}
  0x00007fc4ad220338: jmpq   0x00007fc4ad220255
  0x00007fc4ad22033d: nop
  0x00007fc4ad22033e: nop
  0x00007fc4ad22033f: mov    0x300(%r15),%rax
  0x00007fc4ad220346: movabs $0x0,%r10
  0x00007fc4ad220350: mov    %r10,0x300(%r15)
  0x00007fc4ad220357: movabs $0x0,%r10
  0x00007fc4ad220361: mov    %r10,0x308(%r15)
  0x00007fc4ad220368: add    $0x30,%rsp
  0x00007fc4ad22036c: pop    %rbp
  0x00007fc4ad22036d: jmpq   0x00007fc4ad070820  ;   {runtime_call}
  0x00007fc4ad220372: hlt    
  0x00007fc4ad220373: hlt    
  0x00007fc4ad220374: hlt    
  0x00007fc4ad220375: hlt    
  0x00007fc4ad220376: hlt    
  0x00007fc4ad220377: hlt    
  0x00007fc4ad220378: hlt    
  0x00007fc4ad220379: hlt    
  0x00007fc4ad22037a: hlt    
  0x00007fc4ad22037b: hlt    
  0x00007fc4ad22037c: hlt    
  0x00007fc4ad22037d: hlt    
  0x00007fc4ad22037e: hlt    
  0x00007fc4ad22037f: hlt    
[Stub Code]
  0x00007fc4ad220380: nop                       ;   {no_reloc}
  0x00007fc4ad220381: nop
  0x00007fc4ad220382: nop
  0x00007fc4ad220383: nop
  0x00007fc4ad220384: nop
  0x00007fc4ad220385: movabs $0x0,%rbx          ;   {static_stub}
  0x00007fc4ad22038f: jmpq   0x00007fc4ad22038f  ;   {runtime_call}
[Exception Handler]
  0x00007fc4ad220394: callq  0x00007fc4ad070160  ;   {runtime_call}
  0x00007fc4ad220399: mov    %rsp,-0x28(%rsp)
  0x00007fc4ad22039e: sub    $0x80,%rsp
  0x00007fc4ad2203a5: mov    %rax,0x78(%rsp)
  0x00007fc4ad2203aa: mov    %rcx,0x70(%rsp)
  0x00007fc4ad2203af: mov    %rdx,0x68(%rsp)
  0x00007fc4ad2203b4: mov    %rbx,0x60(%rsp)
  0x00007fc4ad2203b9: mov    %rbp,0x50(%rsp)
  0x00007fc4ad2203be: mov    %rsi,0x48(%rsp)
  0x00007fc4ad2203c3: mov    %rdi,0x40(%rsp)
  0x00007fc4ad2203c8: mov    %r8,0x38(%rsp)
  0x00007fc4ad2203cd: mov    %r9,0x30(%rsp)
  0x00007fc4ad2203d2: mov    %r10,0x28(%rsp)
  0x00007fc4ad2203d7: mov    %r11,0x20(%rsp)
  0x00007fc4ad2203dc: mov    %r12,0x18(%rsp)
  0x00007fc4ad2203e1: mov    %r13,0x10(%rsp)
  0x00007fc4ad2203e6: mov    %r14,0x8(%rsp)
  0x00007fc4ad2203eb: mov    %r15,(%rsp)
  0x00007fc4ad2203ef: movabs $0x7fc4c3c3b49e,%rdi  ;   {external_word}
  0x00007fc4ad2203f9: movabs $0x7fc4ad220399,%rsi  ;   {internal_word}
  0x00007fc4ad220403: mov    %rsp,%rdx
  0x00007fc4ad220406: and    $0xfffffffffffffff0,%rsp
  0x00007fc4ad22040a: callq  0x00007fc4c3961460  ;   {runtime_call}
  0x00007fc4ad22040f: hlt    
[Deopt Handler Code]
  0x00007fc4ad220410: movabs $0x7fc4ad220410,%r10  ;   {section_word}
  0x00007fc4ad22041a: push   %r10
  0x00007fc4ad22041c: jmpq   0x00007fc4ad046e40  ;   {runtime_call}
  0x00007fc4ad220421: hlt    
  0x00007fc4ad220422: hlt    
  0x00007fc4ad220423: hlt    
  0x00007fc4ad220424: hlt    
  0x00007fc4ad220425: hlt    
  0x00007fc4ad220426: hlt    
  0x00007fc4ad220427: hlt    
Decoding compiled method 0x00007fc4ad1920d0:
Code:
[Entry Point]
[Verified Entry Point]
[Constants]
  # {method} {0x00007fc4a96290a8} 'min' '(II)I' in 'java/lang/Math'
  # parm0:    rsi       = int
  # parm1:    rdx       = int
  #           [sp+0x40]  (sp of caller)
  0x00007fc4ad192240: mov    %eax,-0x14000(%rsp)
  0x00007fc4ad192247: push   %rbp
  0x00007fc4ad192248: sub    $0x30,%rsp
  0x00007fc4ad19224c: movabs $0x7fc4a96f8ca8,%rax  ;   {metadata(method data for {method} {0x00007fc4a96290a8} 'min' '(II)I' in 'java/lang/Math')}
  0x00007fc4ad192256: mov    0xdc(%rax),%edi
  0x00007fc4ad19225c: add    $0x8,%edi
  0x00007fc4ad19225f: mov    %edi,0xdc(%rax)
  0x00007fc4ad192265: movabs $0x7fc4a96290a8,%rax  ;   {metadata({method} {0x00007fc4a96290a8} 'min' '(II)I' in 'java/lang/Math')}
  0x00007fc4ad19226f: and    $0x1ff8,%edi
  0x00007fc4ad192275: cmp    $0x0,%edi
  0x00007fc4ad192278: je     0x00007fc4ad1922dd  ;*iload_0
                                                ; - java.lang.Math::min@0 (line 1336)

  0x00007fc4ad19227e: cmp    %edx,%esi
  0x00007fc4ad192280: movabs $0x7fc4a96f8ca8,%rax  ;   {metadata(method data for {method} {0x00007fc4a96290a8} 'min' '(II)I' in 'java/lang/Math')}
  0x00007fc4ad19228a: movabs $0x108,%rdi
  0x00007fc4ad192294: jg     0x00007fc4ad1922a4
  0x00007fc4ad19229a: movabs $0x118,%rdi
  0x00007fc4ad1922a4: mov    (%rax,%rdi,1),%rbx
  0x00007fc4ad1922a8: lea    0x1(%rbx),%rbx
  0x00007fc4ad1922ac: mov    %rbx,(%rax,%rdi,1)
  0x00007fc4ad1922b0: jg     0x00007fc4ad1922cb  ;*if_icmpgt
                                                ; - java.lang.Math::min@2 (line 1336)

  0x00007fc4ad1922b6: movabs $0x7fc4a96f8ca8,%rax  ;   {metadata(method data for {method} {0x00007fc4a96290a8} 'min' '(II)I' in 'java/lang/Math')}
  0x00007fc4ad1922c0: incl   0x128(%rax)
  0x00007fc4ad1922c6: jmpq   0x00007fc4ad1922ce  ;*goto
                                                ; - java.lang.Math::min@6 (line 1336)

  0x00007fc4ad1922cb: mov    %rdx,%rsi          ;*ireturn
                                                ; - java.lang.Math::min@10 (line 1336)

  0x00007fc4ad1922ce: mov    %rsi,%rax
  0x00007fc4ad1922d1: add    $0x30,%rsp
  0x00007fc4ad1922d5: pop    %rbp
  0x00007fc4ad1922d6: test   %eax,0x16fbae24(%rip)        # 0x00007fc4c414d100
                                                ;   {poll_return}
  0x00007fc4ad1922dc: retq   
  0x00007fc4ad1922dd: mov    %rax,0x8(%rsp)
  0x00007fc4ad1922e2: movq   $0xffffffffffffffff,(%rsp)
  0x00007fc4ad1922ea: callq  0x00007fc4ad18f560  ; OopMap{off=175}
                                                ;*synchronization entry
                                                ; - java.lang.Math::min@-1 (line 1336)
                                                ;   {runtime_call}
  0x00007fc4ad1922ef: jmp    0x00007fc4ad19227e
  0x00007fc4ad1922f1: nop
  0x00007fc4ad1922f2: nop
  0x00007fc4ad1922f3: mov    0x300(%r15),%rax
  0x00007fc4ad1922fa: movabs $0x0,%r10
  0x00007fc4ad192304: mov    %r10,0x300(%r15)
  0x00007fc4ad19230b: movabs $0x0,%r10
  0x00007fc4ad192315: mov    %r10,0x308(%r15)
  0x00007fc4ad19231c: add    $0x30,%rsp
  0x00007fc4ad192320: pop    %rbp
  0x00007fc4ad192321: jmpq   0x00007fc4ad070820  ;   {runtime_call}
  0x00007fc4ad192326: hlt    
  0x00007fc4ad192327: hlt    
  0x00007fc4ad192328: hlt    
  0x00007fc4ad192329: hlt    
  0x00007fc4ad19232a: hlt    
  0x00007fc4ad19232b: hlt    
  0x00007fc4ad19232c: hlt    
  0x00007fc4ad19232d: hlt    
  0x00007fc4ad19232e: hlt    
  0x00007fc4ad19232f: hlt    
  0x00007fc4ad192330: hlt    
  0x00007fc4ad192331: hlt    
  0x00007fc4ad192332: hlt    
  0x00007fc4ad192333: hlt    
  0x00007fc4ad192334: hlt    
  0x00007fc4ad192335: hlt    
  0x00007fc4ad192336: hlt    
  0x00007fc4ad192337: hlt    
  0x00007fc4ad192338: hlt    
  0x00007fc4ad192339: hlt    
  0x00007fc4ad19233a: hlt    
  0x00007fc4ad19233b: hlt    
  0x00007fc4ad19233c: hlt    
  0x00007fc4ad19233d: hlt    
  0x00007fc4ad19233e: hlt    
  0x00007fc4ad19233f: hlt    
[Exception Handler]
[Stub Code]
  0x00007fc4ad192340: callq  0x00007fc4ad070160  ;   {no_reloc}
  0x00007fc4ad192345: mov    %rsp,-0x28(%rsp)
  0x00007fc4ad19234a: sub    $0x80,%rsp
  0x00007fc4ad192351: mov    %rax,0x78(%rsp)
  0x00007fc4ad192356: mov    %rcx,0x70(%rsp)
  0x00007fc4ad19235b: mov    %rdx,0x68(%rsp)
  0x00007fc4ad192360: mov    %rbx,0x60(%rsp)
  0x00007fc4ad192365: mov    %rbp,0x50(%rsp)
  0x00007fc4ad19236a: mov    %rsi,0x48(%rsp)
  0x00007fc4ad19236f: mov    %rdi,0x40(%rsp)
  0x00007fc4ad192374: mov    %r8,0x38(%rsp)
  0x00007fc4ad192379: mov    %r9,0x30(%rsp)
  0x00007fc4ad19237e: mov    %r10,0x28(%rsp)
  0x00007fc4ad192383: mov    %r11,0x20(%rsp)
  0x00007fc4ad192388: mov    %r12,0x18(%rsp)
  0x00007fc4ad19238d: mov    %r13,0x10(%rsp)
  0x00007fc4ad192392: mov    %r14,0x8(%rsp)
  0x00007fc4ad192397: mov    %r15,(%rsp)
  0x00007fc4ad19239b: movabs $0x7fc4c3c3b49e,%rdi  ;   {external_word}
  0x00007fc4ad1923a5: movabs $0x7fc4ad192345,%rsi  ;   {internal_word}
  0x00007fc4ad1923af: mov    %rsp,%rdx
  0x00007fc4ad1923b2: and    $0xfffffffffffffff0,%rsp
  0x00007fc4ad1923b6: callq  0x00007fc4c3961460  ;   {runtime_call}
  0x00007fc4ad1923bb: hlt    
[Deopt Handler Code]
  0x00007fc4ad1923bc: movabs $0x7fc4ad1923bc,%r10  ;   {section_word}
  0x00007fc4ad1923c6: push   %r10
  0x00007fc4ad1923c8: jmpq   0x00007fc4ad046e40  ;   {runtime_call}
  0x00007fc4ad1923cd: hlt    
  0x00007fc4ad1923ce: hlt    
  0x00007fc4ad1923cf: hlt    
Decoding compiled method 0x00007fc4ad191c10:
Code:
[Entry Point]
[Constants]
  # {method} {0x00007fc4a9535c60} 'length' '()I' in 'java/lang/String'
  #           [sp+0x40]  (sp of caller)
  0x00007fc4ad191d80: mov    0x8(%rsi),%r10d
  0x00007fc4ad191d84: shl    $0x3,%r10
  0x00007fc4ad191d88: cmp    %rax,%r10
  0x00007fc4ad191d8b: jne    0x00007fc4ad045ba0  ;   {runtime_call}
  0x00007fc4ad191d91: nopl   0x0(%rax,%rax,1)
  0x00007fc4ad191d99: nopl   0x0(%rax)
[Verified Entry Point]
  0x00007fc4ad191da0: mov    %eax,-0x14000(%rsp)
  0x00007fc4ad191da7: push   %rbp
  0x00007fc4ad191da8: sub    $0x30,%rsp
  0x00007fc4ad191dac: movabs $0x7fc4a96fd0c8,%rax  ;   {metadata(method data for {method} {0x00007fc4a9535c60} 'length' '()I' in 'java/lang/String')}
  0x00007fc4ad191db6: mov    0xdc(%rax),%edi
  0x00007fc4ad191dbc: add    $0x8,%edi
  0x00007fc4ad191dbf: mov    %edi,0xdc(%rax)
  0x00007fc4ad191dc5: movabs $0x7fc4a9535c60,%rax  ;   {metadata({method} {0x00007fc4a9535c60} 'length' '()I' in 'java/lang/String')}
  0x00007fc4ad191dcf: and    $0x1ff8,%edi
  0x00007fc4ad191dd5: cmp    $0x0,%edi
  0x00007fc4ad191dd8: je     0x00007fc4ad191df4  ;*aload_0
                                                ; - java.lang.String::length@0 (line 623)

  0x00007fc4ad191dde: mov    0xc(%rsi),%eax
  0x00007fc4ad191de1: shl    $0x3,%rax          ;*getfield value
                                                ; - java.lang.String::length@1 (line 623)

  0x00007fc4ad191de5: mov    0xc(%rax),%eax     ;*arraylength
                                                ; - java.lang.String::length@4 (line 623)
                                                ; implicit exception: dispatches to 0x00007fc4ad191e08
  0x00007fc4ad191de8: add    $0x30,%rsp
  0x00007fc4ad191dec: pop    %rbp
  0x00007fc4ad191ded: test   %eax,0x16fbb30d(%rip)        # 0x00007fc4c414d100
                                                ;   {poll_return}
  0x00007fc4ad191df3: retq   
  0x00007fc4ad191df4: mov    %rax,0x8(%rsp)
  0x00007fc4ad191df9: movq   $0xffffffffffffffff,(%rsp)
  0x00007fc4ad191e01: callq  0x00007fc4ad18f560  ; OopMap{rsi=Oop off=134}
                                                ;*synchronization entry
                                                ; - java.lang.String::length@-1 (line 623)
                                                ;   {runtime_call}
  0x00007fc4ad191e06: jmp    0x00007fc4ad191dde
  0x00007fc4ad191e08: callq  0x00007fc4ad0fddc0  ; OopMap{off=141}
                                                ;*arraylength
                                                ; - java.lang.String::length@4 (line 623)
                                                ;   {runtime_call}
  0x00007fc4ad191e0d: nop
  0x00007fc4ad191e0e: nop
  0x00007fc4ad191e0f: mov    0x300(%r15),%rax
  0x00007fc4ad191e16: movabs $0x0,%r10
  0x00007fc4ad191e20: mov    %r10,0x300(%r15)
  0x00007fc4ad191e27: movabs $0x0,%r10
  0x00007fc4ad191e31: mov    %r10,0x308(%r15)
  0x00007fc4ad191e38: add    $0x30,%rsp
  0x00007fc4ad191e3c: pop    %rbp
  0x00007fc4ad191e3d: jmpq   0x00007fc4ad070820  ;   {runtime_call}
  0x00007fc4ad191e42: hlt    
  0x00007fc4ad191e43: hlt    
  0x00007fc4ad191e44: hlt    
  0x00007fc4ad191e45: hlt    
  0x00007fc4ad191e46: hlt    
  0x00007fc4ad191e47: hlt    
  0x00007fc4ad191e48: hlt    
  0x00007fc4ad191e49: hlt    
  0x00007fc4ad191e4a: hlt    
  0x00007fc4ad191e4b: hlt    
  0x00007fc4ad191e4c: hlt    
  0x00007fc4ad191e4d: hlt    
  0x00007fc4ad191e4e: hlt    
  0x00007fc4ad191e4f: hlt    
  0x00007fc4ad191e50: hlt    
  0x00007fc4ad191e51: hlt    
  0x00007fc4ad191e52: hlt    
  0x00007fc4ad191e53: hlt    
  0x00007fc4ad191e54: hlt    
  0x00007fc4ad191e55: hlt    
  0x00007fc4ad191e56: hlt    
  0x00007fc4ad191e57: hlt    
  0x00007fc4ad191e58: hlt    
  0x00007fc4ad191e59: hlt    
  0x00007fc4ad191e5a: hlt    
  0x00007fc4ad191e5b: hlt    
  0x00007fc4ad191e5c: hlt    
  0x00007fc4ad191e5d: hlt    
  0x00007fc4ad191e5e: hlt    
  0x00007fc4ad191e5f: hlt    
[Exception Handler]
[Stub Code]
  0x00007fc4ad191e60: callq  0x00007fc4ad070160  ;   {no_reloc}
  0x00007fc4ad191e65: mov    %rsp,-0x28(%rsp)
  0x00007fc4ad191e6a: sub    $0x80,%rsp
  0x00007fc4ad191e71: mov    %rax,0x78(%rsp)
  0x00007fc4ad191e76: mov    %rcx,0x70(%rsp)
  0x00007fc4ad191e7b: mov    %rdx,0x68(%rsp)
  0x00007fc4ad191e80: mov    %rbx,0x60(%rsp)
  0x00007fc4ad191e85: mov    %rbp,0x50(%rsp)
  0x00007fc4ad191e8a: mov    %rsi,0x48(%rsp)
  0x00007fc4ad191e8f: mov    %rdi,0x40(%rsp)
  0x00007fc4ad191e94: mov    %r8,0x38(%rsp)
  0x00007fc4ad191e99: mov    %r9,0x30(%rsp)
  0x00007fc4ad191e9e: mov    %r10,0x28(%rsp)
  0x00007fc4ad191ea3: mov    %r11,0x20(%rsp)
  0x00007fc4ad191ea8: mov    %r12,0x18(%rsp)
  0x00007fc4ad191ead: mov    %r13,0x10(%rsp)
  0x00007fc4ad191eb2: mov    %r14,0x8(%rsp)
  0x00007fc4ad191eb7: mov    %r15,(%rsp)
  0x00007fc4ad191ebb: movabs $0x7fc4c3c3b49e,%rdi  ;   {external_word}
  0x00007fc4ad191ec5: movabs $0x7fc4ad191e65,%rsi  ;   {internal_word}
  0x00007fc4ad191ecf: mov    %rsp,%rdx
  0x00007fc4ad191ed2: and    $0xfffffffffffffff0,%rsp
  0x00007fc4ad191ed6: callq  0x00007fc4c3961460  ;   {runtime_call}
  0x00007fc4ad191edb: hlt    
[Deopt Handler Code]
  0x00007fc4ad191edc: movabs $0x7fc4ad191edc,%r10  ;   {section_word}
  0x00007fc4ad191ee6: push   %r10
  0x00007fc4ad191ee8: jmpq   0x00007fc4ad046e40  ;   {runtime_call}
  0x00007fc4ad191eed: hlt    
  0x00007fc4ad191eee: hlt    
  0x00007fc4ad191eef: hlt    
Decoding compiled method 0x00007fc4ad1914d0:
Code:
[Entry Point]
[Constants]
  # {method} {0x00007fc4a9537000} 'hashCode' '()I' in 'java/lang/String'
  #           [sp+0x40]  (sp of caller)
  0x00007fc4ad191640: mov    0x8(%rsi),%r10d
  0x00007fc4ad191644: shl    $0x3,%r10
  0x00007fc4ad191648: cmp    %rax,%r10
  0x00007fc4ad19164b: jne    0x00007fc4ad045ba0  ;   {runtime_call}
  0x00007fc4ad191651: nopl   0x0(%rax,%rax,1)
  0x00007fc4ad191659: nopl   0x0(%rax)
[Verified Entry Point]
  0x00007fc4ad191660: mov    %eax,-0x14000(%rsp)
  0x00007fc4ad191667: push   %rbp
  0x00007fc4ad191668: sub    $0x30,%rsp
  0x00007fc4ad19166c: movabs $0x7fc4a96f69c0,%rax  ;   {metadata(method data for {method} {0x00007fc4a9537000} 'hashCode' '()I' in 'java/lang/String')}
  0x00007fc4ad191676: mov    0xdc(%rax),%edi
  0x00007fc4ad19167c: add    $0x8,%edi
  0x00007fc4ad19167f: mov    %edi,0xdc(%rax)
  0x00007fc4ad191685: movabs $0x7fc4a9537000,%rax  ;   {metadata({method} {0x00007fc4a9537000} 'hashCode' '()I' in 'java/lang/String')}
  0x00007fc4ad19168f: and    $0x1ff8,%edi
  0x00007fc4ad191695: cmp    $0x0,%edi
  0x00007fc4ad191698: je     0x00007fc4ad1917d1  ;*aload_0
                                                ; - java.lang.String::hashCode@0 (line 1466)

  0x00007fc4ad19169e: mov    0x10(%rsi),%eax    ;*getfield hash
                                                ; - java.lang.String::hashCode@1 (line 1466)

  0x00007fc4ad1916a1: cmp    $0x0,%eax
  0x00007fc4ad1916a4: movabs $0x7fc4a96f69c0,%rdi  ;   {metadata(method data for {method} {0x00007fc4a9537000} 'hashCode' '()I' in 'java/lang/String')}
  0x00007fc4ad1916ae: movabs $0x108,%rbx
  0x00007fc4ad1916b8: jne    0x00007fc4ad1916c8
  0x00007fc4ad1916be: movabs $0x118,%rbx
  0x00007fc4ad1916c8: mov    (%rdi,%rbx,1),%rdx
  0x00007fc4ad1916cc: lea    0x1(%rdx),%rdx
  0x00007fc4ad1916d0: mov    %rdx,(%rdi,%rbx,1)
  0x00007fc4ad1916d4: jne    0x00007fc4ad1917c5  ;*ifne
                                                ; - java.lang.String::hashCode@6 (line 1467)

  0x00007fc4ad1916da: mov    0xc(%rsi),%edi
  0x00007fc4ad1916dd: shl    $0x3,%rdi          ;*getfield value
                                                ; - java.lang.String::hashCode@10 (line 1467)

  0x00007fc4ad1916e1: mov    0xc(%rdi),%ebx     ;*arraylength
                                                ; - java.lang.String::hashCode@13 (line 1467)
                                                ; implicit exception: dispatches to 0x00007fc4ad1917e8
  0x00007fc4ad1916e4: cmp    $0x0,%ebx
  0x00007fc4ad1916e7: movabs $0x7fc4a96f69c0,%rdx  ;   {metadata(method data for {method} {0x00007fc4a9537000} 'hashCode' '()I' in 'java/lang/String')}
  0x00007fc4ad1916f1: movabs $0x128,%rcx
  0x00007fc4ad1916fb: jle    0x00007fc4ad19170b
  0x00007fc4ad191701: movabs $0x138,%rcx
  0x00007fc4ad19170b: mov    (%rdx,%rcx,1),%r8
  0x00007fc4ad19170f: lea    0x1(%r8),%r8
  0x00007fc4ad191713: mov    %r8,(%rdx,%rcx,1)
  0x00007fc4ad191717: jle    0x00007fc4ad1917c5  ;*ifle
                                                ; - java.lang.String::hashCode@14 (line 1467)

  0x00007fc4ad19171d: mov    $0x0,%edx
  0x00007fc4ad191722: jmpq   0x00007fc4ad19178a  ;*iload_3
                                                ; - java.lang.String::hashCode@24 (line 1470)

  0x00007fc4ad191727: nop
  0x00007fc4ad191728: movslq %edx,%rcx
  0x00007fc4ad19172b: movzwl 0x10(%rdi,%rcx,2),%ecx  ;*caload
                                                ; - java.lang.String::hashCode@39 (line 1471)

  0x00007fc4ad191730: mov    %rax,%r8
  0x00007fc4ad191733: shl    $0x5,%eax
  0x00007fc4ad191736: sub    %r8d,%eax
  0x00007fc4ad191739: add    %ecx,%eax
  0x00007fc4ad19173b: inc    %edx
  0x00007fc4ad19173d: movabs $0x7fc4a96f69c0,%rcx  ;   {metadata(method data for {method} {0x00007fc4a9537000} 'hashCode' '()I' in 'java/lang/String')}
  0x00007fc4ad191747: mov    0xe0(%rcx),%r8d
  0x00007fc4ad19174e: add    $0x8,%r8d
  0x00007fc4ad191752: mov    %r8d,0xe0(%rcx)
  0x00007fc4ad191759: movabs $0x7fc4a9537000,%rcx  ;   {metadata({method} {0x00007fc4a9537000} 'hashCode' '()I' in 'java/lang/String')}
  0x00007fc4ad191763: and    $0xfff8,%r8d
  0x00007fc4ad19176a: cmp    $0x0,%r8d
  0x00007fc4ad19176e: je     0x00007fc4ad1917ed  ; OopMap{rdi=Oop rsi=Oop off=308}
                                                ;*goto
                                                ; - java.lang.String::hashCode@45 (line 1470)

  0x00007fc4ad191774: test   %eax,0x16fbb986(%rip)        # 0x00007fc4c414d100
                                                ;   {poll}
  0x00007fc4ad19177a: movabs $0x7fc4a96f69c0,%rcx  ;   {metadata(method data for {method} {0x00007fc4a9537000} 'hashCode' '()I' in 'java/lang/String')}
  0x00007fc4ad191784: incl   0x168(%rcx)        ;*goto
                                                ; - java.lang.String::hashCode@45 (line 1470)

  0x00007fc4ad19178a: cmp    %ebx,%edx
  0x00007fc4ad19178c: movabs $0x7fc4a96f69c0,%rcx  ;   {metadata(method data for {method} {0x00007fc4a9537000} 'hashCode' '()I' in 'java/lang/String')}
  0x00007fc4ad191796: movabs $0x148,%r8
  0x00007fc4ad1917a0: jge    0x00007fc4ad1917b0
  0x00007fc4ad1917a6: movabs $0x158,%r8
  0x00007fc4ad1917b0: mov    (%rcx,%r8,1),%r9
  0x00007fc4ad1917b4: lea    0x1(%r9),%r9
  0x00007fc4ad1917b8: mov    %r9,(%rcx,%r8,1)
  0x00007fc4ad1917bc: jl     0x00007fc4ad191728  ;*if_icmpge
                                                ; - java.lang.String::hashCode@30 (line 1470)

  0x00007fc4ad1917c2: mov    %eax,0x10(%rsi)    ;*putfield hash
                                                ; - java.lang.String::hashCode@50 (line 1473)

  0x00007fc4ad1917c5: add    $0x30,%rsp
  0x00007fc4ad1917c9: pop    %rbp
  0x00007fc4ad1917ca: test   %eax,0x16fbb930(%rip)        # 0x00007fc4c414d100
                                                ;   {poll_return}
  0x00007fc4ad1917d0: retq   
  0x00007fc4ad1917d1: mov    %rax,0x8(%rsp)
  0x00007fc4ad1917d6: movq   $0xffffffffffffffff,(%rsp)
  0x00007fc4ad1917de: callq  0x00007fc4ad18f560  ; OopMap{rsi=Oop off=419}
                                                ;*synchronization entry
                                                ; - java.lang.String::hashCode@-1 (line 1466)
                                                ;   {runtime_call}
  0x00007fc4ad1917e3: jmpq   0x00007fc4ad19169e
  0x00007fc4ad1917e8: callq  0x00007fc4ad0fddc0  ; OopMap{rsi=Oop rdi=Oop off=429}
                                                ;*arraylength
                                                ; - java.lang.String::hashCode@13 (line 1467)
                                                ;   {runtime_call}
  0x00007fc4ad1917ed: mov    %rcx,0x8(%rsp)
  0x00007fc4ad1917f2: movq   $0x2d,(%rsp)
  0x00007fc4ad1917fa: callq  0x00007fc4ad18f560  ; OopMap{rdi=Oop rsi=Oop off=447}
                                                ;*goto
                                                ; - java.lang.String::hashCode@45 (line 1470)
                                                ;   {runtime_call}
  0x00007fc4ad1917ff: jmpq   0x00007fc4ad191774
  0x00007fc4ad191804: nop
  0x00007fc4ad191805: nop
  0x00007fc4ad191806: mov    0x300(%r15),%rax
  0x00007fc4ad19180d: movabs $0x0,%r10
  0x00007fc4ad191817: mov    %r10,0x300(%r15)
  0x00007fc4ad19181e: movabs $0x0,%r10
  0x00007fc4ad191828: mov    %r10,0x308(%r15)
  0x00007fc4ad19182f: add    $0x30,%rsp
  0x00007fc4ad191833: pop    %rbp
  0x00007fc4ad191834: jmpq   0x00007fc4ad070820  ;   {runtime_call}
  0x00007fc4ad191839: hlt    
  0x00007fc4ad19183a: hlt    
  0x00007fc4ad19183b: hlt    
  0x00007fc4ad19183c: hlt    
  0x00007fc4ad19183d: hlt    
  0x00007fc4ad19183e: hlt    
  0x00007fc4ad19183f: hlt    
[Exception Handler]
[Stub Code]
  0x00007fc4ad191840: callq  0x00007fc4ad070160  ;   {no_reloc}
  0x00007fc4ad191845: mov    %rsp,-0x28(%rsp)
  0x00007fc4ad19184a: sub    $0x80,%rsp
  0x00007fc4ad191851: mov    %rax,0x78(%rsp)
  0x00007fc4ad191856: mov    %rcx,0x70(%rsp)
  0x00007fc4ad19185b: mov    %rdx,0x68(%rsp)
  0x00007fc4ad191860: mov    %rbx,0x60(%rsp)
  0x00007fc4ad191865: mov    %rbp,0x50(%rsp)
  0x00007fc4ad19186a: mov    %rsi,0x48(%rsp)
  0x00007fc4ad19186f: mov    %rdi,0x40(%rsp)
  0x00007fc4ad191874: mov    %r8,0x38(%rsp)
  0x00007fc4ad191879: mov    %r9,0x30(%rsp)
  0x00007fc4ad19187e: mov    %r10,0x28(%rsp)
  0x00007fc4ad191883: mov    %r11,0x20(%rsp)
  0x00007fc4ad191888: mov    %r12,0x18(%rsp)
  0x00007fc4ad19188d: mov    %r13,0x10(%rsp)
  0x00007fc4ad191892: mov    %r14,0x8(%rsp)
  0x00007fc4ad191897: mov    %r15,(%rsp)
  0x00007fc4ad19189b: movabs $0x7fc4c3c3b49e,%rdi  ;   {external_word}
  0x00007fc4ad1918a5: movabs $0x7fc4ad191845,%rsi  ;   {internal_word}
  0x00007fc4ad1918af: mov    %rsp,%rdx
  0x00007fc4ad1918b2: and    $0xfffffffffffffff0,%rsp
  0x00007fc4ad1918b6: callq  0x00007fc4c3961460  ;   {runtime_call}
  0x00007fc4ad1918bb: hlt    
[Deopt Handler Code]
  0x00007fc4ad1918bc: movabs $0x7fc4ad1918bc,%r10  ;   {section_word}
  0x00007fc4ad1918c6: push   %r10
  0x00007fc4ad1918c8: jmpq   0x00007fc4ad046e40  ;   {runtime_call}
  0x00007fc4ad1918cd: hlt    
  0x00007fc4ad1918ce: hlt    
  0x00007fc4ad1918cf: hlt    
Decoding compiled method 0x00007fc4ad33ccd0:
Code:
[Entry Point]
[Constants]
  # {method} {0x00007fc4a9536618} 'equals' '(Ljava/lang/Object;)Z' in 'java/lang/String'
  # this:     rsi:rsi   = 'java/lang/String'
  # parm0:    rdx:rdx   = 'java/lang/Object'
  #           [sp+0x40]  (sp of caller)
  0x00007fc4ad33ce60: mov    0x8(%rsi),%r10d
  0x00007fc4ad33ce64: shl    $0x3,%r10
  0x00007fc4ad33ce68: cmp    %rax,%r10
  0x00007fc4ad33ce6b: jne    0x00007fc4ad045ba0  ;   {runtime_call}
  0x00007fc4ad33ce71: nopl   0x0(%rax,%rax,1)
  0x00007fc4ad33ce79: nopl   0x0(%rax)
[Verified Entry Point]
  0x00007fc4ad33ce80: mov    %eax,-0x14000(%rsp)
  0x00007fc4ad33ce87: push   %rbp
  0x00007fc4ad33ce88: sub    $0x30,%rsp
  0x00007fc4ad33ce8c: movabs $0x7fc4a9738a40,%rax  ;   {metadata(method data for {method} {0x00007fc4a9536618} 'equals' '(Ljava/lang/Object;)Z' in 'java/lang/String')}
  0x00007fc4ad33ce96: mov    0xdc(%rax),%edi
  0x00007fc4ad33ce9c: add    $0x8,%edi
  0x00007fc4ad33ce9f: mov    %edi,0xdc(%rax)
  0x00007fc4ad33cea5: movabs $0x7fc4a9536618,%rax  ;   {metadata({method} {0x00007fc4a9536618} 'equals' '(Ljava/lang/Object;)Z' in 'java/lang/String')}
  0x00007fc4ad33ceaf: and    $0x1ff8,%edi
  0x00007fc4ad33ceb5: cmp    $0x0,%edi
  0x00007fc4ad33ceb8: je     0x00007fc4ad33d286  ;*aload_0
                                                ; - java.lang.String::equals@0 (line 977)

  0x00007fc4ad33cebe: cmp    %rdx,%rsi
  0x00007fc4ad33cec1: movabs $0x7fc4a9738a40,%rax  ;   {metadata(method data for {method} {0x00007fc4a9536618} 'equals' '(Ljava/lang/Object;)Z' in 'java/lang/String')}
  0x00007fc4ad33cecb: movabs $0x108,%rdi
  0x00007fc4ad33ced5: jne    0x00007fc4ad33cee5
  0x00007fc4ad33cedb: movabs $0x118,%rdi
  0x00007fc4ad33cee5: mov    (%rax,%rdi,1),%rbx
  0x00007fc4ad33cee9: lea    0x1(%rbx),%rbx
  0x00007fc4ad33ceed: mov    %rbx,(%rax,%rdi,1)
  0x00007fc4ad33cef1: je     0x00007fc4ad33d275  ;*if_acmpne
                                                ; - java.lang.String::equals@2 (line 977)

  0x00007fc4ad33cef7: cmp    $0x0,%rdx
  0x00007fc4ad33cefb: jne    0x00007fc4ad33cf16
  0x00007fc4ad33cefd: movabs $0x7fc4a9738a40,%rbx  ;   {metadata(method data for {method} {0x00007fc4a9536618} 'equals' '(Ljava/lang/Object;)Z' in 'java/lang/String')}
  0x00007fc4ad33cf07: orl    $0x100,0x120(%rbx)
  0x00007fc4ad33cf11: jmpq   0x00007fc4ad33cfd6
  0x00007fc4ad33cf16: movabs $0x7c00016d0,%rcx  ;   {metadata('java/lang/String')}
  0x00007fc4ad33cf20: mov    0x8(%rdx),%edi
  0x00007fc4ad33cf23: shl    $0x3,%rdi
  0x00007fc4ad33cf27: cmp    %rdi,%rcx
  0x00007fc4ad33cf2a: jne    0x00007fc4ad33cfba
  0x00007fc4ad33cf30: movabs $0x7fc4a9738a40,%rbx  ;   {metadata(method data for {method} {0x00007fc4a9536618} 'equals' '(Ljava/lang/Object;)Z' in 'java/lang/String')}
  0x00007fc4ad33cf3a: mov    0x8(%rdx),%ecx
  0x00007fc4ad33cf3d: shl    $0x3,%rcx
  0x00007fc4ad33cf41: cmp    0x130(%rbx),%rcx
  0x00007fc4ad33cf48: jne    0x00007fc4ad33cf57
  0x00007fc4ad33cf4a: addq   $0x1,0x138(%rbx)
  0x00007fc4ad33cf52: jmpq   0x00007fc4ad33cfdb
  0x00007fc4ad33cf57: cmp    0x140(%rbx),%rcx
  0x00007fc4ad33cf5e: jne    0x00007fc4ad33cf6d
  0x00007fc4ad33cf60: addq   $0x1,0x148(%rbx)
  0x00007fc4ad33cf68: jmpq   0x00007fc4ad33cfdb
  0x00007fc4ad33cf6d: cmpq   $0x0,0x130(%rbx)
  0x00007fc4ad33cf78: jne    0x00007fc4ad33cf91
  0x00007fc4ad33cf7a: mov    %rcx,0x130(%rbx)
  0x00007fc4ad33cf81: movq   $0x1,0x138(%rbx)
  0x00007fc4ad33cf8c: jmpq   0x00007fc4ad33cfdb
  0x00007fc4ad33cf91: cmpq   $0x0,0x140(%rbx)
  0x00007fc4ad33cf9c: jne    0x00007fc4ad33cfb5
  0x00007fc4ad33cf9e: mov    %rcx,0x140(%rbx)
  0x00007fc4ad33cfa5: movq   $0x1,0x148(%rbx)
  0x00007fc4ad33cfb0: jmpq   0x00007fc4ad33cfdb
  0x00007fc4ad33cfb5: jmpq   0x00007fc4ad33cfdb
  0x00007fc4ad33cfba: movabs $0x7fc4a9738a40,%rbx  ;   {metadata(method data for {method} {0x00007fc4a9536618} 'equals' '(Ljava/lang/Object;)Z' in 'java/lang/String')}
  0x00007fc4ad33cfc4: subq   $0x1,0x128(%rbx)
  0x00007fc4ad33cfcc: jmpq   0x00007fc4ad33cfd6
  0x00007fc4ad33cfd1: jmpq   0x00007fc4ad33cfdb
  0x00007fc4ad33cfd6: xor    %rax,%rax
  0x00007fc4ad33cfd9: jmp    0x00007fc4ad33cfe5
  0x00007fc4ad33cfdb: movabs $0x1,%rax          ;*instanceof
                                                ; - java.lang.String::equals@8 (line 980)

  0x00007fc4ad33cfe5: cmp    $0x0,%eax
  0x00007fc4ad33cfe8: movabs $0x7fc4a9738a40,%rax  ;   {metadata(method data for {method} {0x00007fc4a9536618} 'equals' '(Ljava/lang/Object;)Z' in 'java/lang/String')}
  0x00007fc4ad33cff2: movabs $0x158,%rdi
  0x00007fc4ad33cffc: je     0x00007fc4ad33d00c
  0x00007fc4ad33d002: movabs $0x168,%rdi
  0x00007fc4ad33d00c: mov    (%rax,%rdi,1),%rbx
  0x00007fc4ad33d010: lea    0x1(%rbx),%rbx
  0x00007fc4ad33d014: mov    %rbx,(%rax,%rdi,1)
  0x00007fc4ad33d018: je     0x00007fc4ad33d264  ;*ifeq
                                                ; - java.lang.String::equals@11 (line 980)

  0x00007fc4ad33d01e: cmp    $0x0,%rdx
  0x00007fc4ad33d022: jne    0x00007fc4ad33d03d
  0x00007fc4ad33d024: movabs $0x7fc4a9738a40,%rbx  ;   {metadata(method data for {method} {0x00007fc4a9536618} 'equals' '(Ljava/lang/Object;)Z' in 'java/lang/String')}
  0x00007fc4ad33d02e: orl    $0x100,0x170(%rbx)
  0x00007fc4ad33d038: jmpq   0x00007fc4ad33d0fd
  0x00007fc4ad33d03d: movabs $0x7c00016d0,%rax  ;   {metadata('java/lang/String')}
  0x00007fc4ad33d047: mov    0x8(%rdx),%edi
  0x00007fc4ad33d04a: shl    $0x3,%rdi
  0x00007fc4ad33d04e: cmp    %rdi,%rax
  0x00007fc4ad33d051: jne    0x00007fc4ad33d0e1
  0x00007fc4ad33d057: movabs $0x7fc4a9738a40,%rbx  ;   {metadata(method data for {method} {0x00007fc4a9536618} 'equals' '(Ljava/lang/Object;)Z' in 'java/lang/String')}
  0x00007fc4ad33d061: mov    0x8(%rdx),%eax
  0x00007fc4ad33d064: shl    $0x3,%rax
  0x00007fc4ad33d068: cmp    0x180(%rbx),%rax
  0x00007fc4ad33d06f: jne    0x00007fc4ad33d07e
  0x00007fc4ad33d071: addq   $0x1,0x188(%rbx)
  0x00007fc4ad33d079: jmpq   0x00007fc4ad33d0fd
  0x00007fc4ad33d07e: cmp    0x190(%rbx),%rax
  0x00007fc4ad33d085: jne    0x00007fc4ad33d094
  0x00007fc4ad33d087: addq   $0x1,0x198(%rbx)
  0x00007fc4ad33d08f: jmpq   0x00007fc4ad33d0fd
  0x00007fc4ad33d094: cmpq   $0x0,0x180(%rbx)
  0x00007fc4ad33d09f: jne    0x00007fc4ad33d0b8
  0x00007fc4ad33d0a1: mov    %rax,0x180(%rbx)
  0x00007fc4ad33d0a8: movq   $0x1,0x188(%rbx)
  0x00007fc4ad33d0b3: jmpq   0x00007fc4ad33d0fd
  0x00007fc4ad33d0b8: cmpq   $0x0,0x190(%rbx)
  0x00007fc4ad33d0c3: jne    0x00007fc4ad33d0dc
  0x00007fc4ad33d0c5: mov    %rax,0x190(%rbx)
  0x00007fc4ad33d0cc: movq   $0x1,0x198(%rbx)
  0x00007fc4ad33d0d7: jmpq   0x00007fc4ad33d0fd
  0x00007fc4ad33d0dc: jmpq   0x00007fc4ad33d0fd
  0x00007fc4ad33d0e1: movabs $0x7fc4a9738a40,%rbx  ;   {metadata(method data for {method} {0x00007fc4a9536618} 'equals' '(Ljava/lang/Object;)Z' in 'java/lang/String')}
  0x00007fc4ad33d0eb: subq   $0x1,0x178(%rbx)
  0x00007fc4ad33d0f3: jmpq   0x00007fc4ad33d29d
  0x00007fc4ad33d0f8: jmpq   0x00007fc4ad33d0fd
  0x00007fc4ad33d0fd: mov    %rdx,%rax          ;*checkcast
                                                ; - java.lang.String::equals@15 (line 981)

  0x00007fc4ad33d100: mov    0xc(%rsi),%esi
  0x00007fc4ad33d103: shl    $0x3,%rsi          ;*getfield value
                                                ; - java.lang.String::equals@20 (line 982)

  0x00007fc4ad33d107: mov    0xc(%rsi),%edi     ;*arraylength
                                                ; - java.lang.String::equals@23 (line 982)
                                                ; implicit exception: dispatches to 0x00007fc4ad33d2a6
  0x00007fc4ad33d10a: mov    0xc(%rax),%eax     ; implicit exception: dispatches to 0x00007fc4ad33d2ab
  0x00007fc4ad33d10d: shl    $0x3,%rax          ;*getfield value
                                                ; - java.lang.String::equals@27 (line 983)

  0x00007fc4ad33d111: mov    0xc(%rax),%ebx     ;*arraylength
                                                ; - java.lang.String::equals@30 (line 983)
                                                ; implicit exception: dispatches to 0x00007fc4ad33d2b0
  0x00007fc4ad33d114: cmp    %ebx,%edi
  0x00007fc4ad33d116: movabs $0x7fc4a9738a40,%rbx  ;   {metadata(method data for {method} {0x00007fc4a9536618} 'equals' '(Ljava/lang/Object;)Z' in 'java/lang/String')}
  0x00007fc4ad33d120: movabs $0x1a8,%rdx
  0x00007fc4ad33d12a: jne    0x00007fc4ad33d13a
  0x00007fc4ad33d130: movabs $0x1b8,%rdx
  0x00007fc4ad33d13a: mov    (%rbx,%rdx,1),%rcx
  0x00007fc4ad33d13e: lea    0x1(%rcx),%rcx
  0x00007fc4ad33d142: mov    %rcx,(%rbx,%rdx,1)
  0x00007fc4ad33d146: jne    0x00007fc4ad33d264  ;*if_icmpne
                                                ; - java.lang.String::equals@31 (line 983)

  0x00007fc4ad33d14c: mov    $0x0,%ebx
  0x00007fc4ad33d151: jmpq   0x00007fc4ad33d1ff  ;*iload_3
                                                ; - java.lang.String::equals@49 (line 987)

  0x00007fc4ad33d156: xchg   %ax,%ax
  0x00007fc4ad33d158: movslq %ebx,%rdi
  0x00007fc4ad33d15b: cmp    0xc(%rsi),%ebx
  0x00007fc4ad33d15e: jae    0x00007fc4ad33d2b5
  0x00007fc4ad33d164: movzwl 0x10(%rsi,%rdi,2),%edi  ;*caload
                                                ; - java.lang.String::equals@60 (line 988)

  0x00007fc4ad33d169: movslq %ebx,%rcx
  0x00007fc4ad33d16c: cmp    0xc(%rax),%ebx
  0x00007fc4ad33d16f: jae    0x00007fc4ad33d2be
  0x00007fc4ad33d175: movzwl 0x10(%rax,%rcx,2),%ecx  ;*caload
                                                ; - java.lang.String::equals@65 (line 988)

  0x00007fc4ad33d17a: cmp    %ecx,%edi
  0x00007fc4ad33d17c: movabs $0x7fc4a9738a40,%rdi  ;   {metadata(method data for {method} {0x00007fc4a9536618} 'equals' '(Ljava/lang/Object;)Z' in 'java/lang/String')}
  0x00007fc4ad33d186: movabs $0x1e8,%rcx
  0x00007fc4ad33d190: je     0x00007fc4ad33d1a0
  0x00007fc4ad33d196: movabs $0x1f8,%rcx
  0x00007fc4ad33d1a0: mov    (%rdi,%rcx,1),%r8
  0x00007fc4ad33d1a4: lea    0x1(%r8),%r8
  0x00007fc4ad33d1a8: mov    %r8,(%rdi,%rcx,1)
  0x00007fc4ad33d1ac: jne    0x00007fc4ad33d242  ;*if_icmpeq
                                                ; - java.lang.String::equals@66 (line 988)

  0x00007fc4ad33d1b2: inc    %ebx
  0x00007fc4ad33d1b4: movabs $0x7fc4a9738a40,%rdi  ;   {metadata(method data for {method} {0x00007fc4a9536618} 'equals' '(Ljava/lang/Object;)Z' in 'java/lang/String')}
  0x00007fc4ad33d1be: mov    0xe0(%rdi),%ecx
  0x00007fc4ad33d1c4: add    $0x8,%ecx
  0x00007fc4ad33d1c7: mov    %ecx,0xe0(%rdi)
  0x00007fc4ad33d1cd: movabs $0x7fc4a9536618,%rdi  ;   {metadata({method} {0x00007fc4a9536618} 'equals' '(Ljava/lang/Object;)Z' in 'java/lang/String')}
  0x00007fc4ad33d1d7: and    $0xfff8,%ecx
  0x00007fc4ad33d1dd: cmp    $0x0,%ecx
  0x00007fc4ad33d1e0: je     0x00007fc4ad33d2c7  ; OopMap{rax=Oop rsi=Oop off=902}
                                                ;*goto
                                                ; - java.lang.String::equals@74 (line 990)

  0x00007fc4ad33d1e6: test   %eax,0x16e0ff14(%rip)        # 0x00007fc4c414d100
                                                ;   {poll}
  0x00007fc4ad33d1ec: movabs $0x7fc4a9738a40,%rdi  ;   {metadata(method data for {method} {0x00007fc4a9536618} 'equals' '(Ljava/lang/Object;)Z' in 'java/lang/String')}
  0x00007fc4ad33d1f6: incl   0x208(%rdi)
  0x00007fc4ad33d1fc: mov    %rdx,%rdi          ;*goto
                                                ; - java.lang.String::equals@74 (line 990)

  0x00007fc4ad33d1ff: mov    %rdi,%rdx
  0x00007fc4ad33d202: dec    %edx
  0x00007fc4ad33d204: cmp    $0x0,%edi
  0x00007fc4ad33d207: movabs $0x7fc4a9738a40,%rdi  ;   {metadata(method data for {method} {0x00007fc4a9536618} 'equals' '(Ljava/lang/Object;)Z' in 'java/lang/String')}
  0x00007fc4ad33d211: movabs $0x1c8,%rcx
  0x00007fc4ad33d21b: je     0x00007fc4ad33d22b
  0x00007fc4ad33d221: movabs $0x1d8,%rcx
  0x00007fc4ad33d22b: mov    (%rdi,%rcx,1),%r8
  0x00007fc4ad33d22f: lea    0x1(%r8),%r8
  0x00007fc4ad33d233: mov    %r8,(%rdi,%rcx,1)
  0x00007fc4ad33d237: je     0x00007fc4ad33d253
  0x00007fc4ad33d23d: jmpq   0x00007fc4ad33d158  ;*ifeq
                                                ; - java.lang.String::equals@53 (line 987)

  0x00007fc4ad33d242: mov    $0x0,%eax
  0x00007fc4ad33d247: add    $0x30,%rsp
  0x00007fc4ad33d24b: pop    %rbp
  0x00007fc4ad33d24c: test   %eax,0x16e0feae(%rip)        # 0x00007fc4c414d100
                                                ;   {poll_return}
  0x00007fc4ad33d252: retq                      ;*ireturn
                                                ; - java.lang.String::equals@70 (line 989)

  0x00007fc4ad33d253: mov    $0x1,%eax
  0x00007fc4ad33d258: add    $0x30,%rsp
  0x00007fc4ad33d25c: pop    %rbp
  0x00007fc4ad33d25d: test   %eax,0x16e0fe9d(%rip)        # 0x00007fc4c414d100
                                                ;   {poll_return}
  0x00007fc4ad33d263: retq                      ;*ireturn
                                                ; - java.lang.String::equals@78 (line 992)

  0x00007fc4ad33d264: mov    $0x0,%eax
  0x00007fc4ad33d269: add    $0x30,%rsp
  0x00007fc4ad33d26d: pop    %rbp
  0x00007fc4ad33d26e: test   %eax,0x16e0fe8c(%rip)        # 0x00007fc4c414d100
                                                ;   {poll_return}
  0x00007fc4ad33d274: retq                      ;*ireturn
                                                ; - java.lang.String::equals@80 (line 995)

  0x00007fc4ad33d275: mov    $0x1,%eax
  0x00007fc4ad33d27a: add    $0x30,%rsp
  0x00007fc4ad33d27e: pop    %rbp
  0x00007fc4ad33d27f: test   %eax,0x16e0fe7b(%rip)        # 0x00007fc4c414d100
                                                ;   {poll_return}
  0x00007fc4ad33d285: retq   
  0x00007fc4ad33d286: mov    %rax,0x8(%rsp)
  0x00007fc4ad33d28b: movq   $0xffffffffffffffff,(%rsp)
  0x00007fc4ad33d293: callq  0x00007fc4ad18f560  ; OopMap{rsi=Oop rdx=Oop off=1080}
                                                ;*synchronization entry
                                                ; - java.lang.String::equals@-1 (line 977)
                                                ;   {runtime_call}
  0x00007fc4ad33d298: jmpq   0x00007fc4ad33cebe
  0x00007fc4ad33d29d: mov    %rdx,(%rsp)
  0x00007fc4ad33d2a1: callq  0x00007fc4ad1000c0  ; OopMap{rsi=Oop off=1094}
                                                ;*checkcast
                                                ; - java.lang.String::equals@15 (line 981)
                                                ;   {runtime_call}
  0x00007fc4ad33d2a6: callq  0x00007fc4ad0fddc0  ; OopMap{rax=Oop rsi=Oop off=1099}
                                                ;*arraylength
                                                ; - java.lang.String::equals@23 (line 982)
                                                ;   {runtime_call}
  0x00007fc4ad33d2ab: callq  0x00007fc4ad0fddc0  ; OopMap{rsi=Oop off=1104}
                                                ;*getfield value
                                                ; - java.lang.String::equals@27 (line 983)
                                                ;   {runtime_call}
  0x00007fc4ad33d2b0: callq  0x00007fc4ad0fddc0  ; OopMap{rsi=Oop rax=Oop off=1109}
                                                ;*arraylength
                                                ; - java.lang.String::equals@30 (line 983)
                                                ;   {runtime_call}
  0x00007fc4ad33d2b5: mov    %rbx,(%rsp)
  0x00007fc4ad33d2b9: callq  0x00007fc4ad070380  ; OopMap{rax=Oop rsi=Oop off=1118}
                                                ;*caload
                                                ; - java.lang.String::equals@60 (line 988)
                                                ;   {runtime_call}
  0x00007fc4ad33d2be: mov    %rbx,(%rsp)
  0x00007fc4ad33d2c2: callq  0x00007fc4ad070380  ; OopMap{rax=Oop rsi=Oop off=1127}
                                                ;*caload
                                                ; - java.lang.String::equals@65 (line 988)
                                                ;   {runtime_call}
  0x00007fc4ad33d2c7: mov    %rdi,0x8(%rsp)
  0x00007fc4ad33d2cc: movq   $0x4a,(%rsp)
  0x00007fc4ad33d2d4: callq  0x00007fc4ad18f560  ; OopMap{rax=Oop rsi=Oop off=1145}
                                                ;*goto
                                                ; - java.lang.String::equals@74 (line 990)
                                                ;   {runtime_call}
  0x00007fc4ad33d2d9: jmpq   0x00007fc4ad33d1e6
  0x00007fc4ad33d2de: nop
  0x00007fc4ad33d2df: nop
  0x00007fc4ad33d2e0: mov    0x300(%r15),%rax
  0x00007fc4ad33d2e7: movabs $0x0,%r10
  0x00007fc4ad33d2f1: mov    %r10,0x300(%r15)
  0x00007fc4ad33d2f8: movabs $0x0,%r10
  0x00007fc4ad33d302: mov    %r10,0x308(%r15)
  0x00007fc4ad33d309: add    $0x30,%rsp
  0x00007fc4ad33d30d: pop    %rbp
  0x00007fc4ad33d30e: jmpq   0x00007fc4ad070820  ;   {runtime_call}
  0x00007fc4ad33d313: hlt    
  0x00007fc4ad33d314: hlt    
  0x00007fc4ad33d315: hlt    
  0x00007fc4ad33d316: hlt    
  0x00007fc4ad33d317: hlt    
  0x00007fc4ad33d318: hlt    
  0x00007fc4ad33d319: hlt    
  0x00007fc4ad33d31a: hlt    
  0x00007fc4ad33d31b: hlt    
  0x00007fc4ad33d31c: hlt    
  0x00007fc4ad33d31d: hlt    
  0x00007fc4ad33d31e: hlt    
  0x00007fc4ad33d31f: hlt    
[Exception Handler]
[Stub Code]
  0x00007fc4ad33d320: callq  0x00007fc4ad070160  ;   {no_reloc}
  0x00007fc4ad33d325: mov    %rsp,-0x28(%rsp)
  0x00007fc4ad33d32a: sub    $0x80,%rsp
  0x00007fc4ad33d331: mov    %rax,0x78(%rsp)
  0x00007fc4ad33d336: mov    %rcx,0x70(%rsp)
  0x00007fc4ad33d33b: mov    %rdx,0x68(%rsp)
  0x00007fc4ad33d340: mov    %rbx,0x60(%rsp)
  0x00007fc4ad33d345: mov    %rbp,0x50(%rsp)
  0x00007fc4ad33d34a: mov    %rsi,0x48(%rsp)
  0x00007fc4ad33d34f: mov    %rdi,0x40(%rsp)
  0x00007fc4ad33d354: mov    %r8,0x38(%rsp)
  0x00007fc4ad33d359: mov    %r9,0x30(%rsp)
  0x00007fc4ad33d35e: mov    %r10,0x28(%rsp)
  0x00007fc4ad33d363: mov    %r11,0x20(%rsp)
  0x00007fc4ad33d368: mov    %r12,0x18(%rsp)
  0x00007fc4ad33d36d: mov    %r13,0x10(%rsp)
  0x00007fc4ad33d372: mov    %r14,0x8(%rsp)
  0x00007fc4ad33d377: mov    %r15,(%rsp)
  0x00007fc4ad33d37b: movabs $0x7fc4c3c3b49e,%rdi  ;   {external_word}
  0x00007fc4ad33d385: movabs $0x7fc4ad33d325,%rsi  ;   {internal_word}
  0x00007fc4ad33d38f: mov    %rsp,%rdx
  0x00007fc4ad33d392: and    $0xfffffffffffffff0,%rsp
  0x00007fc4ad33d396: callq  0x00007fc4c3961460  ;   {runtime_call}
  0x00007fc4ad33d39b: hlt    
[Deopt Handler Code]
  0x00007fc4ad33d39c: movabs $0x7fc4ad33d39c,%r10  ;   {section_word}
  0x00007fc4ad33d3a6: push   %r10
  0x00007fc4ad33d3a8: jmpq   0x00007fc4ad046e40  ;   {runtime_call}
  0x00007fc4ad33d3ad: hlt    
  0x00007fc4ad33d3ae: hlt    
  0x00007fc4ad33d3af: hlt    
Decoding compiled method 0x00007fc4ad33b410:
Code:
[Entry Point]
[Constants]
  # {method} {0x00007fc4a9535db0} 'charAt' '(I)C' in 'java/lang/String'
  # this:     rsi:rsi   = 'java/lang/String'
  # parm0:    rdx       = int
  #           [sp+0x30]  (sp of caller)
  0x00007fc4ad33b560: mov    0x8(%rsi),%r10d
  0x00007fc4ad33b564: shl    $0x3,%r10
  0x00007fc4ad33b568: cmp    %r10,%rax
  0x00007fc4ad33b56b: jne    0x00007fc4ad045ba0  ;   {runtime_call}
  0x00007fc4ad33b571: data16 xchg %ax,%ax
  0x00007fc4ad33b574: nopw   0x0(%rax,%rax,1)
  0x00007fc4ad33b57a: nopw   0x0(%rax,%rax,1)
[Verified Entry Point]
  0x00007fc4ad33b580: mov    %eax,-0x14000(%rsp)
  0x00007fc4ad33b587: push   %rbp
  0x00007fc4ad33b588: sub    $0x20,%rsp         ;*synchronization entry
                                                ; - java.lang.String::charAt@-1 (line 657)

  0x00007fc4ad33b58c: test   %edx,%edx
  0x00007fc4ad33b58e: jl     0x00007fc4ad33b5cd  ;*iflt
                                                ; - java.lang.String::charAt@1 (line 657)

  0x00007fc4ad33b590: mov    0xc(%rsi),%r10d    ;*getfield value
                                                ; - java.lang.String::charAt@6 (line 657)

  0x00007fc4ad33b594: mov    0xc(%r12,%r10,8),%ebp  ;*arraylength
                                                ; - java.lang.String::charAt@9 (line 657)
                                                ; implicit exception: dispatches to 0x00007fc4ad33b5fd
  0x00007fc4ad33b599: cmp    %ebp,%edx
  0x00007fc4ad33b59b: jge    0x00007fc4ad33b5e5  ;*if_icmplt
                                                ; - java.lang.String::charAt@10 (line 657)

  0x00007fc4ad33b59d: cmp    %ebp,%edx
  0x00007fc4ad33b59f: jae    0x00007fc4ad33b5b7
  0x00007fc4ad33b5a1: shl    $0x3,%r10
  0x00007fc4ad33b5a5: movzwl 0x10(%r10,%rdx,2),%eax
  0x00007fc4ad33b5ab: add    $0x20,%rsp
  0x00007fc4ad33b5af: pop    %rbp
  0x00007fc4ad33b5b0: test   %eax,0x16e11a4a(%rip)        # 0x00007fc4c414d000
                                                ;   {poll_return}
  0x00007fc4ad33b5b6: retq   
  0x00007fc4ad33b5b7: mov    $0xffffffe4,%esi
  0x00007fc4ad33b5bc: mov    %edx,%ebp
  0x00007fc4ad33b5be: mov    %r10d,(%rsp)
  0x00007fc4ad33b5c2: nop
  0x00007fc4ad33b5c3: callq  0x00007fc4ad0453e0  ; OopMap{[0]=NarrowOop off=104}
                                                ;*caload
                                                ; - java.lang.String::charAt@27 (line 660)
                                                ;   {runtime_call}
  0x00007fc4ad33b5c8: callq  0x00007fc4c3a462e0  ;*caload
                                                ; - java.lang.String::charAt@27 (line 660)
                                                ;   {runtime_call}
  0x00007fc4ad33b5cd: mov    %rsi,%rbp
  0x00007fc4ad33b5d0: mov    %edx,0x4(%rsp)
  0x00007fc4ad33b5d4: mov    $0xffffff65,%esi
  0x00007fc4ad33b5d9: xchg   %ax,%ax
  0x00007fc4ad33b5db: callq  0x00007fc4ad0453e0  ; OopMap{rbp=Oop off=128}
                                                ;*iflt
                                                ; - java.lang.String::charAt@1 (line 657)
                                                ;   {runtime_call}
  0x00007fc4ad33b5e0: callq  0x00007fc4c3a462e0  ;*iflt
                                                ; - java.lang.String::charAt@1 (line 657)
                                                ;   {runtime_call}
  0x00007fc4ad33b5e5: mov    %rsi,(%rsp)
  0x00007fc4ad33b5e9: mov    %edx,0xc(%rsp)
  0x00007fc4ad33b5ed: mov    $0xffffff65,%esi
  0x00007fc4ad33b5f2: nop
  0x00007fc4ad33b5f3: callq  0x00007fc4ad0453e0  ; OopMap{[0]=Oop off=152}
                                                ;*if_icmplt
                                                ; - java.lang.String::charAt@10 (line 657)
                                                ;   {runtime_call}
  0x00007fc4ad33b5f8: callq  0x00007fc4c3a462e0  ;*if_icmplt
                                                ; - java.lang.String::charAt@10 (line 657)
                                                ;   {runtime_call}
  0x00007fc4ad33b5fd: mov    $0xfffffff6,%esi
  0x00007fc4ad33b602: nop
  0x00007fc4ad33b603: callq  0x00007fc4ad0453e0  ; OopMap{off=168}
                                                ;*arraylength
                                                ; - java.lang.String::charAt@9 (line 657)
                                                ;   {runtime_call}
  0x00007fc4ad33b608: callq  0x00007fc4c3a462e0  ;*arraylength
                                                ; - java.lang.String::charAt@9 (line 657)
                                                ;   {runtime_call}
  0x00007fc4ad33b60d: hlt    
  0x00007fc4ad33b60e: hlt    
  0x00007fc4ad33b60f: hlt    
  0x00007fc4ad33b610: hlt    
  0x00007fc4ad33b611: hlt    
  0x00007fc4ad33b612: hlt    
  0x00007fc4ad33b613: hlt    
  0x00007fc4ad33b614: hlt    
  0x00007fc4ad33b615: hlt    
  0x00007fc4ad33b616: hlt    
  0x00007fc4ad33b617: hlt    
  0x00007fc4ad33b618: hlt    
  0x00007fc4ad33b619: hlt    
  0x00007fc4ad33b61a: hlt    
  0x00007fc4ad33b61b: hlt    
  0x00007fc4ad33b61c: hlt    
  0x00007fc4ad33b61d: hlt    
  0x00007fc4ad33b61e: hlt    
  0x00007fc4ad33b61f: hlt    
[Exception Handler]
[Stub Code]
  0x00007fc4ad33b620: jmpq   0x00007fc4ad070ae0  ;   {no_reloc}
[Deopt Handler Code]
  0x00007fc4ad33b625: callq  0x00007fc4ad33b62a
  0x00007fc4ad33b62a: subq   $0x5,(%rsp)
  0x00007fc4ad33b62f: jmpq   0x00007fc4ad046e40  ;   {runtime_call}
  0x00007fc4ad33b634: hlt    
  0x00007fc4ad33b635: hlt    
  0x00007fc4ad33b636: hlt    
  0x00007fc4ad33b637: hlt    
Decoding compiled method 0x00007fc4ad33af50:
Code:
[Entry Point]
[Constants]
  # {method} {0x00007fc4a95a7338} '<init>' '(I)V' in 'java/lang/AbstractStringBuilder'
  # this:     rsi:rsi   = 'java/lang/AbstractStringBuilder'
  # parm0:    rdx       = int
  #           [sp+0x50]  (sp of caller)
  0x00007fc4ad33b0c0: mov    0x8(%rsi),%r10d
  0x00007fc4ad33b0c4: shl    $0x3,%r10
  0x00007fc4ad33b0c8: cmp    %rax,%r10
  0x00007fc4ad33b0cb: jne    0x00007fc4ad045ba0  ;   {runtime_call}
  0x00007fc4ad33b0d1: nopl   0x0(%rax,%rax,1)
  0x00007fc4ad33b0d9: nopl   0x0(%rax)
[Verified Entry Point]
  0x00007fc4ad33b0e0: mov    %eax,-0x14000(%rsp)
  0x00007fc4ad33b0e7: push   %rbp
  0x00007fc4ad33b0e8: sub    $0x40,%rsp
  0x00007fc4ad33b0ec: movabs $0x7fc4a97d3ae0,%rdi  ;   {metadata(method data for {method} {0x00007fc4a95a7338} '<init>' '(I)V' in 'java/lang/AbstractStringBuilder')}
  0x00007fc4ad33b0f6: mov    0xdc(%rdi),%ebx
  0x00007fc4ad33b0fc: add    $0x8,%ebx
  0x00007fc4ad33b0ff: mov    %ebx,0xdc(%rdi)
  0x00007fc4ad33b105: movabs $0x7fc4a95a7338,%rdi  ;   {metadata({method} {0x00007fc4a95a7338} '<init>' '(I)V' in 'java/lang/AbstractStringBuilder')}
  0x00007fc4ad33b10f: and    $0x1ff8,%ebx
  0x00007fc4ad33b115: cmp    $0x0,%ebx
  0x00007fc4ad33b118: je     0x00007fc4ad33b1f5  ;*aload_0
                                                ; - java.lang.AbstractStringBuilder::<init>@0 (line 67)

  0x00007fc4ad33b11e: mov    %edx,0x20(%rsp)
  0x00007fc4ad33b122: mov    %rsi,%rdi
  0x00007fc4ad33b125: movabs $0x7fc4a97d3ae0,%rbx  ;   {metadata(method data for {method} {0x00007fc4a95a7338} '<init>' '(I)V' in 'java/lang/AbstractStringBuilder')}
  0x00007fc4ad33b12f: addq   $0x1,0x108(%rbx)
  0x00007fc4ad33b137: mov    %rsi,%rdi
  0x00007fc4ad33b13a: mov    %rdi,%rsi          ;*invokespecial <init>
                                                ; - java.lang.AbstractStringBuilder::<init>@1 (line 67)

  0x00007fc4ad33b13d: mov    %rdi,0x28(%rsp)
  0x00007fc4ad33b142: nop
  0x00007fc4ad33b143: nop
  0x00007fc4ad33b144: nop
  0x00007fc4ad33b145: nop
  0x00007fc4ad33b146: nop
  0x00007fc4ad33b147: callq  0x00007fc4ad045de0  ; OopMap{[40]=Oop off=140}
                                                ;*invokespecial <init>
                                                ; - java.lang.AbstractStringBuilder::<init>@1 (line 67)
                                                ;   {optimized virtual_call}
  0x00007fc4ad33b14c: mov    0x20(%rsp),%ebx
  0x00007fc4ad33b150: movabs $0x7c0000208,%rdx  ;   {metadata({type array char})}
  0x00007fc4ad33b15a: movslq %ebx,%rbx
  0x00007fc4ad33b15d: mov    %rbx,%rdi
  0x00007fc4ad33b160: cmp    $0xffffff,%rbx
  0x00007fc4ad33b167: ja     0x00007fc4ad33b20c
  0x00007fc4ad33b16d: movabs $0x17,%rsi
  0x00007fc4ad33b177: lea    (%rsi,%rbx,2),%rsi
  0x00007fc4ad33b17b: and    $0xfffffffffffffff8,%rsi
  0x00007fc4ad33b17f: mov    0x60(%r15),%rax
  0x00007fc4ad33b183: lea    (%rax,%rsi,1),%rsi
  0x00007fc4ad33b187: cmp    0x70(%r15),%rsi
  0x00007fc4ad33b18b: ja     0x00007fc4ad33b20c
  0x00007fc4ad33b191: mov    %rsi,0x60(%r15)
  0x00007fc4ad33b195: sub    %rax,%rsi
  0x00007fc4ad33b198: movq   $0x1,(%rax)
  0x00007fc4ad33b19f: mov    %rdx,%rcx
  0x00007fc4ad33b1a2: shr    $0x3,%rcx
  0x00007fc4ad33b1a6: mov    %ecx,0x8(%rax)
  0x00007fc4ad33b1a9: mov    %ebx,0xc(%rax)
  0x00007fc4ad33b1ac: sub    $0x10,%rsi
  0x00007fc4ad33b1b0: je     0x00007fc4ad33b1c7
  0x00007fc4ad33b1b6: xor    %rbx,%rbx
  0x00007fc4ad33b1b9: shr    $0x3,%rsi
  0x00007fc4ad33b1bd: mov    %rbx,0x8(%rax,%rsi,8)
  0x00007fc4ad33b1c2: dec    %rsi
  0x00007fc4ad33b1c5: jne    0x00007fc4ad33b1bd  ;*newarray
                                                ; - java.lang.AbstractStringBuilder::<init>@6 (line 68)

  0x00007fc4ad33b1c7: mov    0x28(%rsp),%rsi
  0x00007fc4ad33b1cc: mov    %rax,%r10
  0x00007fc4ad33b1cf: shr    $0x3,%r10
  0x00007fc4ad33b1d3: mov    %r10d,0x10(%rsi)
  0x00007fc4ad33b1d7: shr    $0x9,%rsi
  0x00007fc4ad33b1db: movabs $0x7fc4bea36000,%rdi
  0x00007fc4ad33b1e5: movb   $0x0,(%rsi,%rdi,1)  ;*putfield value
                                                ; - java.lang.AbstractStringBuilder::<init>@8 (line 68)

  0x00007fc4ad33b1e9: add    $0x40,%rsp
  0x00007fc4ad33b1ed: pop    %rbp
  0x00007fc4ad33b1ee: test   %eax,0x16e11f0c(%rip)        # 0x00007fc4c414d100
                                                ;   {poll_return}
  0x00007fc4ad33b1f4: retq   
  0x00007fc4ad33b1f5: mov    %rdi,0x8(%rsp)
  0x00007fc4ad33b1fa: movq   $0xffffffffffffffff,(%rsp)
  0x00007fc4ad33b202: callq  0x00007fc4ad18f560  ; OopMap{rsi=Oop off=327}
                                                ;*synchronization entry
                                                ; - java.lang.AbstractStringBuilder::<init>@-1 (line 67)
                                                ;   {runtime_call}
  0x00007fc4ad33b207: jmpq   0x00007fc4ad33b11e
  0x00007fc4ad33b20c: callq  0x00007fc4ad0fee20  ; OopMap{[40]=Oop off=337}
                                                ;*newarray
                                                ; - java.lang.AbstractStringBuilder::<init>@6 (line 68)
                                                ;   {runtime_call}
  0x00007fc4ad33b211: jmp    0x00007fc4ad33b1c7
  0x00007fc4ad33b213: nop
  0x00007fc4ad33b214: nop
  0x00007fc4ad33b215: mov    0x300(%r15),%rax
  0x00007fc4ad33b21c: movabs $0x0,%r10
  0x00007fc4ad33b226: mov    %r10,0x300(%r15)
  0x00007fc4ad33b22d: movabs $0x0,%r10
  0x00007fc4ad33b237: mov    %r10,0x308(%r15)
  0x00007fc4ad33b23e: add    $0x40,%rsp
  0x00007fc4ad33b242: pop    %rbp
  0x00007fc4ad33b243: jmpq   0x00007fc4ad070820  ;   {runtime_call}
  0x00007fc4ad33b248: hlt    
  0x00007fc4ad33b249: hlt    
  0x00007fc4ad33b24a: hlt    
  0x00007fc4ad33b24b: hlt    
  0x00007fc4ad33b24c: hlt    
  0x00007fc4ad33b24d: hlt    
  0x00007fc4ad33b24e: hlt    
  0x00007fc4ad33b24f: hlt    
  0x00007fc4ad33b250: hlt    
  0x00007fc4ad33b251: hlt    
  0x00007fc4ad33b252: hlt    
  0x00007fc4ad33b253: hlt    
  0x00007fc4ad33b254: hlt    
  0x00007fc4ad33b255: hlt    
  0x00007fc4ad33b256: hlt    
  0x00007fc4ad33b257: hlt    
  0x00007fc4ad33b258: hlt    
  0x00007fc4ad33b259: hlt    
  0x00007fc4ad33b25a: hlt    
  0x00007fc4ad33b25b: hlt    
  0x00007fc4ad33b25c: hlt    
  0x00007fc4ad33b25d: hlt    
  0x00007fc4ad33b25e: hlt    
  0x00007fc4ad33b25f: hlt    
[Stub Code]
  0x00007fc4ad33b260: nop                       ;   {no_reloc}
  0x00007fc4ad33b261: nop
  0x00007fc4ad33b262: nop
  0x00007fc4ad33b263: nop
  0x00007fc4ad33b264: nop
  0x00007fc4ad33b265: movabs $0x0,%rbx          ;   {static_stub}
  0x00007fc4ad33b26f: jmpq   0x00007fc4ad33b26f  ;   {runtime_call}
[Exception Handler]
  0x00007fc4ad33b274: callq  0x00007fc4ad070160  ;   {runtime_call}
  0x00007fc4ad33b279: mov    %rsp,-0x28(%rsp)
  0x00007fc4ad33b27e: sub    $0x80,%rsp
  0x00007fc4ad33b285: mov    %rax,0x78(%rsp)
  0x00007fc4ad33b28a: mov    %rcx,0x70(%rsp)
  0x00007fc4ad33b28f: mov    %rdx,0x68(%rsp)
  0x00007fc4ad33b294: mov    %rbx,0x60(%rsp)
  0x00007fc4ad33b299: mov    %rbp,0x50(%rsp)
  0x00007fc4ad33b29e: mov    %rsi,0x48(%rsp)
  0x00007fc4ad33b2a3: mov    %rdi,0x40(%rsp)
  0x00007fc4ad33b2a8: mov    %r8,0x38(%rsp)
  0x00007fc4ad33b2ad: mov    %r9,0x30(%rsp)
  0x00007fc4ad33b2b2: mov    %r10,0x28(%rsp)
  0x00007fc4ad33b2b7: mov    %r11,0x20(%rsp)
  0x00007fc4ad33b2bc: mov    %r12,0x18(%rsp)
  0x00007fc4ad33b2c1: mov    %r13,0x10(%rsp)
  0x00007fc4ad33b2c6: mov    %r14,0x8(%rsp)
  0x00007fc4ad33b2cb: mov    %r15,(%rsp)
  0x00007fc4ad33b2cf: movabs $0x7fc4c3c3b49e,%rdi  ;   {external_word}
  0x00007fc4ad33b2d9: movabs $0x7fc4ad33b279,%rsi  ;   {internal_word}
  0x00007fc4ad33b2e3: mov    %rsp,%rdx
  0x00007fc4ad33b2e6: and    $0xfffffffffffffff0,%rsp
  0x00007fc4ad33b2ea: callq  0x00007fc4c3961460  ;   {runtime_call}
  0x00007fc4ad33b2ef: hlt    
[Deopt Handler Code]
  0x00007fc4ad33b2f0: movabs $0x7fc4ad33b2f0,%r10  ;   {section_word}
  0x00007fc4ad33b2fa: push   %r10
  0x00007fc4ad33b2fc: jmpq   0x00007fc4ad046e40  ;   {runtime_call}
  0x00007fc4ad33b301: hlt    
  0x00007fc4ad33b302: hlt    
  0x00007fc4ad33b303: hlt    
  0x00007fc4ad33b304: hlt    
  0x00007fc4ad33b305: hlt    
  0x00007fc4ad33b306: hlt    
  0x00007fc4ad33b307: hlt    
Decoding compiled method 0x00007fc4ad33c790:
Code:
[Entry Point]
[Verified Entry Point]
[Constants]
  # {method} {0x00007fc4a964d550} 'copyOf' '([BI)[B' in 'java/util/Arrays'
  # parm0:    rsi:rsi   = '[B'
  # parm1:    rdx       = int
  #           [sp+0x60]  (sp of caller)
  0x00007fc4ad33c900: mov    %eax,-0x14000(%rsp)
  0x00007fc4ad33c907: push   %rbp
  0x00007fc4ad33c908: sub    $0x50,%rsp
  0x00007fc4ad33c90c: mov    %rdx,%r8
  0x00007fc4ad33c90f: movabs $0x7fc4a97d49e0,%rbx  ;   {metadata(method data for {method} {0x00007fc4a964d550} 'copyOf' '([BI)[B' in 'java/util/Arrays')}
  0x00007fc4ad33c919: mov    0xdc(%rbx),%edx
  0x00007fc4ad33c91f: add    $0x8,%edx
  0x00007fc4ad33c922: mov    %edx,0xdc(%rbx)
  0x00007fc4ad33c928: movabs $0x7fc4a964d550,%rbx  ;   {metadata({method} {0x00007fc4a964d550} 'copyOf' '([BI)[B' in 'java/util/Arrays')}
  0x00007fc4ad33c932: and    $0x1ff8,%edx
  0x00007fc4ad33c938: cmp    $0x0,%edx
  0x00007fc4ad33c93b: je     0x00007fc4ad33ca2d  ;*iload_1
                                                ; - java.util.Arrays::copyOf@0 (line 3236)

  0x00007fc4ad33c941: mov    %r8,%rbx
  0x00007fc4ad33c944: movabs $0x7c00007a8,%rdx  ;   {metadata({type array byte})}
  0x00007fc4ad33c94e: mov    %rsi,%r9
  0x00007fc4ad33c951: movslq %ebx,%rbx
  0x00007fc4ad33c954: mov    %rbx,%rdi
  0x00007fc4ad33c957: cmp    $0xffffff,%rbx
  0x00007fc4ad33c95e: ja     0x00007fc4ad33ca44
  0x00007fc4ad33c964: movabs $0x17,%rsi
  0x00007fc4ad33c96e: lea    (%rsi,%rbx,1),%rsi
  0x00007fc4ad33c972: and    $0xfffffffffffffff8,%rsi
  0x00007fc4ad33c976: mov    0x60(%r15),%rax
  0x00007fc4ad33c97a: lea    (%rax,%rsi,1),%rsi
  0x00007fc4ad33c97e: cmp    0x70(%r15),%rsi
  0x00007fc4ad33c982: ja     0x00007fc4ad33ca44
  0x00007fc4ad33c988: mov    %rsi,0x60(%r15)
  0x00007fc4ad33c98c: sub    %rax,%rsi
  0x00007fc4ad33c98f: movq   $0x1,(%rax)
  0x00007fc4ad33c996: mov    %rdx,%rcx
  0x00007fc4ad33c999: shr    $0x3,%rcx
  0x00007fc4ad33c99d: mov    %ecx,0x8(%rax)
  0x00007fc4ad33c9a0: mov    %ebx,0xc(%rax)
  0x00007fc4ad33c9a3: sub    $0x10,%rsi
  0x00007fc4ad33c9a7: je     0x00007fc4ad33c9be
  0x00007fc4ad33c9ad: xor    %rbx,%rbx
  0x00007fc4ad33c9b0: shr    $0x3,%rsi
  0x00007fc4ad33c9b4: mov    %rbx,0x8(%rax,%rsi,8)
  0x00007fc4ad33c9b9: dec    %rsi
  0x00007fc4ad33c9bc: jne    0x00007fc4ad33c9b4  ;*newarray
                                                ; - java.util.Arrays::copyOf@1 (line 3236)

  0x00007fc4ad33c9be: mov    0xc(%r9),%esi      ;*arraylength
                                                ; - java.util.Arrays::copyOf@9 (line 3237)
                                                ; implicit exception: dispatches to 0x00007fc4ad33ca4e
  0x00007fc4ad33c9c2: movabs $0x7fc4a97d49e0,%rdx  ;   {metadata(method data for {method} {0x00007fc4a964d550} 'copyOf' '([BI)[B' in 'java/util/Arrays')}
  0x00007fc4ad33c9cc: addq   $0x1,0x108(%rdx)
  0x00007fc4ad33c9d4: mov    %r8,%rdx           ;*invokestatic min
                                                ; - java.util.Arrays::copyOf@11 (line 3238)

  0x00007fc4ad33c9d7: mov    %rax,0x40(%rsp)
  0x00007fc4ad33c9dc: mov    %r9,0x38(%rsp)
  0x00007fc4ad33c9e1: nop
  0x00007fc4ad33c9e2: nop
  0x00007fc4ad33c9e3: nop
  0x00007fc4ad33c9e4: nop
  0x00007fc4ad33c9e5: nop
  0x00007fc4ad33c9e6: nop
  0x00007fc4ad33c9e7: callq  0x00007fc4ad046260  ; OopMap{[64]=Oop [56]=Oop off=236}
                                                ;*invokestatic min
                                                ; - java.util.Arrays::copyOf@11 (line 3238)
                                                ;   {static_call}
  0x00007fc4ad33c9ec: movabs $0x7fc4a97d49e0,%rsi  ;   {metadata(method data for {method} {0x00007fc4a964d550} 'copyOf' '([BI)[B' in 'java/util/Arrays')}
  0x00007fc4ad33c9f6: addq   $0x1,0x118(%rsi)
  0x00007fc4ad33c9fe: mov    0x38(%rsp),%rsi
  0x00007fc4ad33ca03: mov    $0x0,%edx
  0x00007fc4ad33ca08: mov    0x40(%rsp),%rcx
  0x00007fc4ad33ca0d: mov    $0x0,%r8d
  0x00007fc4ad33ca13: mov    %rax,%r9           ;*invokestatic arraycopy
                                                ; - java.util.Arrays::copyOf@14 (line 3237)

  0x00007fc4ad33ca16: nop
  0x00007fc4ad33ca17: callq  0x00007fc4ad046260  ; OopMap{[64]=Oop off=284}
                                                ;*invokestatic arraycopy
                                                ; - java.util.Arrays::copyOf@14 (line 3237)
                                                ;   {static_call}
  0x00007fc4ad33ca1c: mov    0x40(%rsp),%rax
  0x00007fc4ad33ca21: add    $0x50,%rsp
  0x00007fc4ad33ca25: pop    %rbp
  0x00007fc4ad33ca26: test   %eax,0x16e106d4(%rip)        # 0x00007fc4c414d100
                                                ;   {poll_return}
  0x00007fc4ad33ca2c: retq   
  0x00007fc4ad33ca2d: mov    %rbx,0x8(%rsp)
  0x00007fc4ad33ca32: movq   $0xffffffffffffffff,(%rsp)
  0x00007fc4ad33ca3a: callq  0x00007fc4ad18f560  ; OopMap{rsi=Oop off=319}
                                                ;*synchronization entry
                                                ; - java.util.Arrays::copyOf@-1 (line 3236)
                                                ;   {runtime_call}
  0x00007fc4ad33ca3f: jmpq   0x00007fc4ad33c941
  0x00007fc4ad33ca44: callq  0x00007fc4ad0fee20  ; OopMap{r9=Oop off=329}
                                                ;*newarray
                                                ; - java.util.Arrays::copyOf@1 (line 3236)
                                                ;   {runtime_call}
  0x00007fc4ad33ca49: jmpq   0x00007fc4ad33c9be
  0x00007fc4ad33ca4e: callq  0x00007fc4ad0fddc0  ; OopMap{r9=Oop rax=Oop off=339}
                                                ;*arraylength
                                                ; - java.util.Arrays::copyOf@9 (line 3237)
                                                ;   {runtime_call}
  0x00007fc4ad33ca53: nop
  0x00007fc4ad33ca54: nop
  0x00007fc4ad33ca55: mov    0x300(%r15),%rax
  0x00007fc4ad33ca5c: movabs $0x0,%r10
  0x00007fc4ad33ca66: mov    %r10,0x300(%r15)
  0x00007fc4ad33ca6d: movabs $0x0,%r10
  0x00007fc4ad33ca77: mov    %r10,0x308(%r15)
  0x00007fc4ad33ca7e: add    $0x50,%rsp
  0x00007fc4ad33ca82: pop    %rbp
  0x00007fc4ad33ca83: jmpq   0x00007fc4ad070820  ;   {runtime_call}
  0x00007fc4ad33ca88: hlt    
  0x00007fc4ad33ca89: hlt    
  0x00007fc4ad33ca8a: hlt    
  0x00007fc4ad33ca8b: hlt    
  0x00007fc4ad33ca8c: hlt    
  0x00007fc4ad33ca8d: hlt    
  0x00007fc4ad33ca8e: hlt    
  0x00007fc4ad33ca8f: hlt    
  0x00007fc4ad33ca90: hlt    
  0x00007fc4ad33ca91: hlt    
  0x00007fc4ad33ca92: hlt    
  0x00007fc4ad33ca93: hlt    
  0x00007fc4ad33ca94: hlt    
  0x00007fc4ad33ca95: hlt    
  0x00007fc4ad33ca96: hlt    
  0x00007fc4ad33ca97: hlt    
  0x00007fc4ad33ca98: hlt    
  0x00007fc4ad33ca99: hlt    
  0x00007fc4ad33ca9a: hlt    
  0x00007fc4ad33ca9b: hlt    
  0x00007fc4ad33ca9c: hlt    
  0x00007fc4ad33ca9d: hlt    
  0x00007fc4ad33ca9e: hlt    
  0x00007fc4ad33ca9f: hlt    
[Stub Code]
  0x00007fc4ad33caa0: nop                       ;   {no_reloc}
  0x00007fc4ad33caa1: nop
  0x00007fc4ad33caa2: nop
  0x00007fc4ad33caa3: nop
  0x00007fc4ad33caa4: nop
  0x00007fc4ad33caa5: movabs $0x0,%rbx          ;   {static_stub}
  0x00007fc4ad33caaf: jmpq   0x00007fc4ad33caaf  ;   {runtime_call}
  0x00007fc4ad33cab4: nop
  0x00007fc4ad33cab5: movabs $0x0,%rbx          ;   {static_stub}
  0x00007fc4ad33cabf: jmpq   0x00007fc4ad33cabf  ;   {runtime_call}
[Exception Handler]
  0x00007fc4ad33cac4: callq  0x00007fc4ad070160  ;   {runtime_call}
  0x00007fc4ad33cac9: mov    %rsp,-0x28(%rsp)
  0x00007fc4ad33cace: sub    $0x80,%rsp
  0x00007fc4ad33cad5: mov    %rax,0x78(%rsp)
  0x00007fc4ad33cada: mov    %rcx,0x70(%rsp)
  0x00007fc4ad33cadf: mov    %rdx,0x68(%rsp)
  0x00007fc4ad33cae4: mov    %rbx,0x60(%rsp)
  0x00007fc4ad33cae9: mov    %rbp,0x50(%rsp)
  0x00007fc4ad33caee: mov    %rsi,0x48(%rsp)
  0x00007fc4ad33caf3: mov    %rdi,0x40(%rsp)
  0x00007fc4ad33caf8: mov    %r8,0x38(%rsp)
  0x00007fc4ad33cafd: mov    %r9,0x30(%rsp)
  0x00007fc4ad33cb02: mov    %r10,0x28(%rsp)
  0x00007fc4ad33cb07: mov    %r11,0x20(%rsp)
  0x00007fc4ad33cb0c: mov    %r12,0x18(%rsp)
  0x00007fc4ad33cb11: mov    %r13,0x10(%rsp)
  0x00007fc4ad33cb16: mov    %r14,0x8(%rsp)
  0x00007fc4ad33cb1b: mov    %r15,(%rsp)
  0x00007fc4ad33cb1f: movabs $0x7fc4c3c3b49e,%rdi  ;   {external_word}
  0x00007fc4ad33cb29: movabs $0x7fc4ad33cac9,%rsi  ;   {internal_word}
  0x00007fc4ad33cb33: mov    %rsp,%rdx
  0x00007fc4ad33cb36: and    $0xfffffffffffffff0,%rsp
  0x00007fc4ad33cb3a: callq  0x00007fc4c3961460  ;   {runtime_call}
  0x00007fc4ad33cb3f: hlt    
[Deopt Handler Code]
  0x00007fc4ad33cb40: movabs $0x7fc4ad33cb40,%r10  ;   {section_word}
  0x00007fc4ad33cb4a: push   %r10
  0x00007fc4ad33cb4c: jmpq   0x00007fc4ad046e40  ;   {runtime_call}
  0x00007fc4ad33cb51: hlt    
  0x00007fc4ad33cb52: hlt    
  0x00007fc4ad33cb53: hlt    
  0x00007fc4ad33cb54: hlt    
  0x00007fc4ad33cb55: hlt    
  0x00007fc4ad33cb56: hlt    
  0x00007fc4ad33cb57: hlt    
Decoding compiled method 0x00007fc4ad33abd0:
Code:
[Entry Point]
[Constants]
  # {method} {0x00007fc4a9532480} '<init>' '()V' in 'java/lang/Object'
  #           [sp+0x40]  (sp of caller)
  0x00007fc4ad33ad40: mov    0x8(%rsi),%r10d
  0x00007fc4ad33ad44: shl    $0x3,%r10
  0x00007fc4ad33ad48: cmp    %rax,%r10
  0x00007fc4ad33ad4b: jne    0x00007fc4ad045ba0  ;   {runtime_call}
  0x00007fc4ad33ad51: nopl   0x0(%rax,%rax,1)
  0x00007fc4ad33ad59: nopl   0x0(%rax)
[Verified Entry Point]
  0x00007fc4ad33ad60: mov    %eax,-0x14000(%rsp)
  0x00007fc4ad33ad67: push   %rbp
  0x00007fc4ad33ad68: sub    $0x30,%rsp
  0x00007fc4ad33ad6c: movabs $0x7fc4a96aaad8,%rdi  ;   {metadata(method data for {method} {0x00007fc4a9532480} '<init>' '()V' in 'java/lang/Object')}
  0x00007fc4ad33ad76: mov    0xdc(%rdi),%ebx
  0x00007fc4ad33ad7c: add    $0x8,%ebx
  0x00007fc4ad33ad7f: mov    %ebx,0xdc(%rdi)
  0x00007fc4ad33ad85: movabs $0x7fc4a9532480,%rdi  ;   {metadata({method} {0x00007fc4a9532480} '<init>' '()V' in 'java/lang/Object')}
  0x00007fc4ad33ad8f: and    $0x1ff8,%ebx
  0x00007fc4ad33ad95: cmp    $0x0,%ebx
  0x00007fc4ad33ad98: je     0x00007fc4ad33adb7
  0x00007fc4ad33ad9e: mov    %rsi,%rdi          ;*return
                                                ; - java.lang.Object::<init>@0 (line 37)

  0x00007fc4ad33ada1: mov    %rsi,0x20(%rsp)
  0x00007fc4ad33ada6: callq  0x00007fc4ad0fdfe0  ; OopMap{[32]=Oop off=107}
                                                ;*return
                                                ; - java.lang.Object::<init>@0 (line 37)
                                                ;   {runtime_call}
  0x00007fc4ad33adab: add    $0x30,%rsp
  0x00007fc4ad33adaf: pop    %rbp
  0x00007fc4ad33adb0: test   %eax,0x16e1234a(%rip)        # 0x00007fc4c414d100
                                                ;   {poll_return}
  0x00007fc4ad33adb6: retq   
  0x00007fc4ad33adb7: mov    %rdi,0x8(%rsp)
  0x00007fc4ad33adbc: movq   $0xffffffffffffffff,(%rsp)
  0x00007fc4ad33adc4: callq  0x00007fc4ad18f560  ; OopMap{rsi=Oop off=137}
                                                ;*synchronization entry
                                                ; - java.lang.Object::<init>@-1 (line 37)
                                                ;   {runtime_call}
  0x00007fc4ad33adc9: jmp    0x00007fc4ad33ad9e
  0x00007fc4ad33adcb: nop
  0x00007fc4ad33adcc: nop
  0x00007fc4ad33adcd: mov    0x300(%r15),%rax
  0x00007fc4ad33add4: movabs $0x0,%r10
  0x00007fc4ad33adde: mov    %r10,0x300(%r15)
  0x00007fc4ad33ade5: movabs $0x0,%r10
  0x00007fc4ad33adef: mov    %r10,0x308(%r15)
  0x00007fc4ad33adf6: add    $0x30,%rsp
  0x00007fc4ad33adfa: pop    %rbp
  0x00007fc4ad33adfb: jmpq   0x00007fc4ad070820  ;   {runtime_call}
[Exception Handler]
[Stub Code]
  0x00007fc4ad33ae00: callq  0x00007fc4ad070160  ;   {no_reloc}
  0x00007fc4ad33ae05: mov    %rsp,-0x28(%rsp)
  0x00007fc4ad33ae0a: sub    $0x80,%rsp
  0x00007fc4ad33ae11: mov    %rax,0x78(%rsp)
  0x00007fc4ad33ae16: mov    %rcx,0x70(%rsp)
  0x00007fc4ad33ae1b: mov    %rdx,0x68(%rsp)
  0x00007fc4ad33ae20: mov    %rbx,0x60(%rsp)
  0x00007fc4ad33ae25: mov    %rbp,0x50(%rsp)
  0x00007fc4ad33ae2a: mov    %rsi,0x48(%rsp)
  0x00007fc4ad33ae2f: mov    %rdi,0x40(%rsp)
  0x00007fc4ad33ae34: mov    %r8,0x38(%rsp)
  0x00007fc4ad33ae39: mov    %r9,0x30(%rsp)
  0x00007fc4ad33ae3e: mov    %r10,0x28(%rsp)
  0x00007fc4ad33ae43: mov    %r11,0x20(%rsp)
  0x00007fc4ad33ae48: mov    %r12,0x18(%rsp)
  0x00007fc4ad33ae4d: mov    %r13,0x10(%rsp)
  0x00007fc4ad33ae52: mov    %r14,0x8(%rsp)
  0x00007fc4ad33ae57: mov    %r15,(%rsp)
  0x00007fc4ad33ae5b: movabs $0x7fc4c3c3b49e,%rdi  ;   {external_word}
  0x00007fc4ad33ae65: movabs $0x7fc4ad33ae05,%rsi  ;   {internal_word}
  0x00007fc4ad33ae6f: mov    %rsp,%rdx
  0x00007fc4ad33ae72: and    $0xfffffffffffffff0,%rsp
  0x00007fc4ad33ae76: callq  0x00007fc4c3961460  ;   {runtime_call}
  0x00007fc4ad33ae7b: hlt    
[Deopt Handler Code]
  0x00007fc4ad33ae7c: movabs $0x7fc4ad33ae7c,%r10  ;   {section_word}
  0x00007fc4ad33ae86: push   %r10
  0x00007fc4ad33ae88: jmpq   0x00007fc4ad046e40  ;   {runtime_call}
  0x00007fc4ad33ae8d: hlt    
  0x00007fc4ad33ae8e: hlt    
  0x00007fc4ad33ae8f: hlt    
Decoding compiled method 0x00007fc4ad345810:
Code:
[Entry Point]
[Constants]
  # {method} {0x00007fc4a9682bd8} 'encode' '([CII[B)I' in 'sun/nio/cs/UTF_8$Encoder'
  # this:     rsi:rsi   = 'sun/nio/cs/UTF_8$Encoder'
  # parm0:    rdx:rdx   = '[C'
  # parm1:    rcx       = int
  # parm2:    r8        = int
  # parm3:    r9:r9     = '[B'
  #           [sp+0x80]  (sp of caller)
  0x00007fc4ad345a20: mov    0x8(%rsi),%r10d
  0x00007fc4ad345a24: shl    $0x3,%r10
  0x00007fc4ad345a28: cmp    %rax,%r10
  0x00007fc4ad345a2b: jne    0x00007fc4ad045ba0  ;   {runtime_call}
  0x00007fc4ad345a31: nopl   0x0(%rax,%rax,1)
  0x00007fc4ad345a39: nopl   0x0(%rax)
[Verified Entry Point]
  0x00007fc4ad345a40: mov    %eax,-0x14000(%rsp)
  0x00007fc4ad345a47: push   %rbp
  0x00007fc4ad345a48: sub    $0x70,%rsp
  0x00007fc4ad345a4c: mov    %rsi,0x48(%rsp)
  0x00007fc4ad345a51: mov    %rdx,0x38(%rsp)
  0x00007fc4ad345a56: mov    %r9,0x40(%rsp)
  0x00007fc4ad345a5b: movabs $0x7fc4a9738fb8,%rdi  ;   {metadata(method data for {method} {0x00007fc4a9682bd8} 'encode' '([CII[B)I' in 'sun/nio/cs/UTF_8$Encoder')}
  0x00007fc4ad345a65: mov    0xdc(%rdi),%ebx
  0x00007fc4ad345a6b: add    $0x8,%ebx
  0x00007fc4ad345a6e: mov    %ebx,0xdc(%rdi)
  0x00007fc4ad345a74: movabs $0x7fc4a9682bd8,%rdi  ;   {metadata({method} {0x00007fc4a9682bd8} 'encode' '([CII[B)I' in 'sun/nio/cs/UTF_8$Encoder')}
  0x00007fc4ad345a7e: and    $0x1ff8,%ebx
  0x00007fc4ad345a84: cmp    $0x0,%ebx
  0x00007fc4ad345a87: je     0x00007fc4ad3461fd  ;*iload_2
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@0 (line 704)

  0x00007fc4ad345a8d: mov    %rcx,%rdi
  0x00007fc4ad345a90: add    %r8d,%edi
  0x00007fc4ad345a93: mov    %edi,0x34(%rsp)
  0x00007fc4ad345a97: mov    0xc(%r9),%ebx      ;*arraylength
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@13 (line 706)
                                                ; implicit exception: dispatches to 0x00007fc4ad346214
  0x00007fc4ad345a9b: movabs $0x7fc4a9738fb8,%rax  ;   {metadata(method data for {method} {0x00007fc4a9682bd8} 'encode' '([CII[B)I' in 'sun/nio/cs/UTF_8$Encoder')}
  0x00007fc4ad345aa5: addq   $0x1,0x108(%rax)
  0x00007fc4ad345aad: mov    %r8,%rsi
  0x00007fc4ad345ab0: mov    %rbx,%rdx          ;*invokestatic min
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@14 (line 706)

  0x00007fc4ad345ab3: mov    %ecx,0x30(%rsp)
  0x00007fc4ad345ab7: callq  0x00007fc4ad046260  ; OopMap{[56]=Oop [72]=Oop [64]=Oop off=156}
                                                ;*invokestatic min
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@14 (line 706)
                                                ;   {static_call}
  0x00007fc4ad345abc: mov    0x30(%rsp),%ecx
  0x00007fc4ad345ac0: mov    $0x0,%esi
  0x00007fc4ad345ac5: mov    0x40(%rsp),%r9
  0x00007fc4ad345aca: mov    0x38(%rsp),%rdx
  0x00007fc4ad345acf: jmpq   0x00007fc4ad345b89  ;*iload
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@20 (line 709)

  0x00007fc4ad345ad4: nopl   0x0(%rax)
  0x00007fc4ad345ad8: movslq %ecx,%rdi
  0x00007fc4ad345adb: cmp    0xc(%rdx),%ecx     ; implicit exception: dispatches to 0x00007fc4ad346219
  0x00007fc4ad345ade: jae    0x00007fc4ad346223
  0x00007fc4ad345ae4: movzwl 0x10(%rdx,%rdi,2),%edi  ;*caload
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@29 (line 709)

  0x00007fc4ad345ae9: cmp    $0x80,%edi
  0x00007fc4ad345aef: movabs $0x7fc4a9738fb8,%rbx  ;   {metadata(method data for {method} {0x00007fc4a9682bd8} 'encode' '([CII[B)I' in 'sun/nio/cs/UTF_8$Encoder')}
  0x00007fc4ad345af9: movabs $0x138,%r8
  0x00007fc4ad345b03: jge    0x00007fc4ad345b13
  0x00007fc4ad345b09: movabs $0x148,%r8
  0x00007fc4ad345b13: mov    (%rbx,%r8,1),%r11
  0x00007fc4ad345b17: lea    0x1(%r11),%r11
  0x00007fc4ad345b1b: mov    %r11,(%rbx,%r8,1)
  0x00007fc4ad345b1f: jge    0x00007fc4ad345bc8  ;*if_icmpge
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@33 (line 709)

  0x00007fc4ad345b25: mov    %rsi,%rbx
  0x00007fc4ad345b28: inc    %ebx
  0x00007fc4ad345b2a: inc    %ecx
  0x00007fc4ad345b2c: movslq %esi,%r8
  0x00007fc4ad345b2f: cmp    0xc(%r9),%esi
  0x00007fc4ad345b33: jae    0x00007fc4ad34622c
  0x00007fc4ad345b39: mov    %dil,0x10(%r9,%r8,1)  ;*bastore
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@50 (line 710)

  0x00007fc4ad345b3e: movabs $0x7fc4a9738fb8,%rsi  ;   {metadata(method data for {method} {0x00007fc4a9682bd8} 'encode' '([CII[B)I' in 'sun/nio/cs/UTF_8$Encoder')}
  0x00007fc4ad345b48: mov    0xe0(%rsi),%edi
  0x00007fc4ad345b4e: add    $0x8,%edi
  0x00007fc4ad345b51: mov    %edi,0xe0(%rsi)
  0x00007fc4ad345b57: movabs $0x7fc4a9682bd8,%rsi  ;   {metadata({method} {0x00007fc4a9682bd8} 'encode' '([CII[B)I' in 'sun/nio/cs/UTF_8$Encoder')}
  0x00007fc4ad345b61: and    $0xfff8,%edi
  0x00007fc4ad345b67: cmp    $0x0,%edi
  0x00007fc4ad345b6a: je     0x00007fc4ad346235  ; OopMap{[72]=Oop r9=Oop [64]=Oop rdx=Oop [56]=Oop off=336}
                                                ;*goto
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@51 (line 710)

  0x00007fc4ad345b70: test   %eax,0x16e0758a(%rip)        # 0x00007fc4c414d100
                                                ;   {poll}
  0x00007fc4ad345b76: movabs $0x7fc4a9738fb8,%rsi  ;   {metadata(method data for {method} {0x00007fc4a9682bd8} 'encode' '([CII[B)I' in 'sun/nio/cs/UTF_8$Encoder')}
  0x00007fc4ad345b80: incl   0x158(%rsi)
  0x00007fc4ad345b86: mov    %rbx,%rsi          ;*goto
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@51 (line 710)

  0x00007fc4ad345b89: cmp    %eax,%esi
  0x00007fc4ad345b8b: movabs $0x7fc4a9738fb8,%rdi  ;   {metadata(method data for {method} {0x00007fc4a9682bd8} 'encode' '([CII[B)I' in 'sun/nio/cs/UTF_8$Encoder')}
  0x00007fc4ad345b95: movabs $0x118,%rbx
  0x00007fc4ad345b9f: jge    0x00007fc4ad345baf
  0x00007fc4ad345ba5: movabs $0x128,%rbx
  0x00007fc4ad345baf: mov    (%rdi,%rbx,1),%r8
  0x00007fc4ad345bb3: lea    0x1(%r8),%r8
  0x00007fc4ad345bb7: mov    %r8,(%rdi,%rbx,1)
  0x00007fc4ad345bbb: jl     0x00007fc4ad345ad8  ;*if_icmpge
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@24 (line 709)

  0x00007fc4ad345bc1: nopl   0x0(%rax)
  0x00007fc4ad345bc8: mov    0x34(%rsp),%edi
  0x00007fc4ad345bcc: cmp    %edi,%ecx
  0x00007fc4ad345bce: movabs $0x7fc4a9738fb8,%rax  ;   {metadata(method data for {method} {0x00007fc4a9682bd8} 'encode' '([CII[B)I' in 'sun/nio/cs/UTF_8$Encoder')}
  0x00007fc4ad345bd8: movabs $0x170,%r8
  0x00007fc4ad345be2: jge    0x00007fc4ad345bf2
  0x00007fc4ad345be8: movabs $0x180,%r8
  0x00007fc4ad345bf2: mov    (%rax,%r8,1),%r11
  0x00007fc4ad345bf6: lea    0x1(%r11),%r11
  0x00007fc4ad345bfa: mov    %r11,(%rax,%r8,1)
  0x00007fc4ad345bfe: jge    0x00007fc4ad3461ee  ;*if_icmpge
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@57 (line 712)

  0x00007fc4ad345c04: mov    %rcx,%rax
  0x00007fc4ad345c07: inc    %eax
  0x00007fc4ad345c09: movslq %ecx,%r8
  0x00007fc4ad345c0c: cmp    0xc(%rdx),%ecx     ; implicit exception: dispatches to 0x00007fc4ad34624c
  0x00007fc4ad345c0f: jae    0x00007fc4ad346256
  0x00007fc4ad345c15: movzwl 0x10(%rdx,%r8,2),%ecx  ;*caload
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@65 (line 713)

  0x00007fc4ad345c1b: cmp    $0x80,%ecx
  0x00007fc4ad345c21: movabs $0x7fc4a9738fb8,%r8  ;   {metadata(method data for {method} {0x00007fc4a9682bd8} 'encode' '([CII[B)I' in 'sun/nio/cs/UTF_8$Encoder')}
  0x00007fc4ad345c2b: movabs $0x190,%r11
  0x00007fc4ad345c35: jge    0x00007fc4ad345c45
  0x00007fc4ad345c3b: movabs $0x1a0,%r11
  0x00007fc4ad345c45: mov    (%r8,%r11,1),%r13
  0x00007fc4ad345c49: lea    0x1(%r13),%r13
  0x00007fc4ad345c4d: mov    %r13,(%r8,%r11,1)
  0x00007fc4ad345c51: jge    0x00007fc4ad345c89  ;*if_icmpge
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@73 (line 714)

  0x00007fc4ad345c57: mov    %rsi,%r8
  0x00007fc4ad345c5a: inc    %r8d
  0x00007fc4ad345c5d: movslq %esi,%r11
  0x00007fc4ad345c60: cmp    0xc(%r9),%esi
  0x00007fc4ad345c64: jae    0x00007fc4ad34625f
  0x00007fc4ad345c6a: mov    %cl,0x10(%r9,%r11,1)  ;*bastore
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@86 (line 716)

  0x00007fc4ad345c6f: movabs $0x7fc4a9738fb8,%rsi  ;   {metadata(method data for {method} {0x00007fc4a9682bd8} 'encode' '([CII[B)I' in 'sun/nio/cs/UTF_8$Encoder')}
  0x00007fc4ad345c79: incl   0x1b0(%rsi)
  0x00007fc4ad345c7f: mov    0x48(%rsp),%rdi
  0x00007fc4ad345c84: jmpq   0x00007fc4ad346185  ;*goto
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@87 (line 716)

  0x00007fc4ad345c89: cmp    $0x800,%ecx
  0x00007fc4ad345c8f: movabs $0x7fc4a9738fb8,%r8  ;   {metadata(method data for {method} {0x00007fc4a9682bd8} 'encode' '([CII[B)I' in 'sun/nio/cs/UTF_8$Encoder')}
  0x00007fc4ad345c99: movabs $0x1c8,%r11
  0x00007fc4ad345ca3: jge    0x00007fc4ad345cb3
  0x00007fc4ad345ca9: movabs $0x1d8,%r11
  0x00007fc4ad345cb3: mov    (%r8,%r11,1),%r13
  0x00007fc4ad345cb7: lea    0x1(%r13),%r13
  0x00007fc4ad345cbb: mov    %r13,(%r8,%r11,1)
  0x00007fc4ad345cbf: jge    0x00007fc4ad345d22  ;*if_icmpge
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@95 (line 717)

  0x00007fc4ad345cc5: mov    %rcx,%r8
  0x00007fc4ad345cc8: sar    $0x6,%r8d
  0x00007fc4ad345ccc: or     $0xc0,%r8d
  0x00007fc4ad345cd3: movslq %esi,%r11
  0x00007fc4ad345cd6: cmp    0xc(%r9),%esi
  0x00007fc4ad345cda: jae    0x00007fc4ad346268
  0x00007fc4ad345ce0: mov    %r8b,0x10(%r9,%r11,1)  ;*bastore
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@115 (line 719)

  0x00007fc4ad345ce5: inc    %esi
  0x00007fc4ad345ce7: mov    %rsi,%r8
  0x00007fc4ad345cea: inc    %r8d
  0x00007fc4ad345ced: and    $0x3f,%ecx
  0x00007fc4ad345cf0: or     $0x80,%ecx
  0x00007fc4ad345cf6: movslq %esi,%r11
  0x00007fc4ad345cf9: cmp    0xc(%r9),%esi
  0x00007fc4ad345cfd: jae    0x00007fc4ad346271
  0x00007fc4ad345d03: mov    %cl,0x10(%r9,%r11,1)  ;*bastore
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@133 (line 720)

  0x00007fc4ad345d08: movabs $0x7fc4a9738fb8,%rsi  ;   {metadata(method data for {method} {0x00007fc4a9682bd8} 'encode' '([CII[B)I' in 'sun/nio/cs/UTF_8$Encoder')}
  0x00007fc4ad345d12: incl   0x1e8(%rsi)
  0x00007fc4ad345d18: mov    0x48(%rsp),%rdi
  0x00007fc4ad345d1d: jmpq   0x00007fc4ad346185  ;*goto
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@134 (line 720)

  0x00007fc4ad345d22: mov    %eax,0x50(%rsp)
  0x00007fc4ad345d26: mov    %esi,0x58(%rsp)
  0x00007fc4ad345d2a: movabs $0x7fc4a9738fb8,%r8  ;   {metadata(method data for {method} {0x00007fc4a9682bd8} 'encode' '([CII[B)I' in 'sun/nio/cs/UTF_8$Encoder')}
  0x00007fc4ad345d34: addq   $0x1,0x200(%r8)
  0x00007fc4ad345d3c: mov    %rcx,%rsi          ;*invokestatic isSurrogate
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@139 (line 721)

  0x00007fc4ad345d3f: mov    %ecx,0x54(%rsp)
  0x00007fc4ad345d43: nop
  0x00007fc4ad345d44: nop
  0x00007fc4ad345d45: nop
  0x00007fc4ad345d46: nop
  0x00007fc4ad345d47: callq  0x00007fc4ad046260  ; OopMap{[72]=Oop [64]=Oop [56]=Oop off=812}
                                                ;*invokestatic isSurrogate
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@139 (line 721)
                                                ;   {static_call}
  0x00007fc4ad345d4c: cmp    $0x0,%eax
  0x00007fc4ad345d4f: movabs $0x7fc4a9738fb8,%rdx  ;   {metadata(method data for {method} {0x00007fc4a9682bd8} 'encode' '([CII[B)I' in 'sun/nio/cs/UTF_8$Encoder')}
  0x00007fc4ad345d59: movabs $0x210,%rax
  0x00007fc4ad345d63: je     0x00007fc4ad345d73
  0x00007fc4ad345d69: movabs $0x220,%rax
  0x00007fc4ad345d73: mov    (%rdx,%rax,1),%rsi
  0x00007fc4ad345d77: lea    0x1(%rsi),%rsi
  0x00007fc4ad345d7b: mov    %rsi,(%rdx,%rax,1)
  0x00007fc4ad345d7f: je     0x00007fc4ad346109  ;*ifeq
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@142 (line 721)

  0x00007fc4ad345d85: mov    0x48(%rsp),%rsi
  0x00007fc4ad345d8a: mov    0x30(%rsi),%edx
  0x00007fc4ad345d8d: shl    $0x3,%rdx          ;*getfield sgp
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@146 (line 722)

  0x00007fc4ad345d91: cmp    $0x0,%rdx
  0x00007fc4ad345d95: movabs $0x7fc4a9738fb8,%rdx  ;   {metadata(method data for {method} {0x00007fc4a9682bd8} 'encode' '([CII[B)I' in 'sun/nio/cs/UTF_8$Encoder')}
  0x00007fc4ad345d9f: movabs $0x230,%rax
  0x00007fc4ad345da9: jne    0x00007fc4ad345db9
  0x00007fc4ad345daf: movabs $0x240,%rax
  0x00007fc4ad345db9: mov    (%rdx,%rax,1),%rdi
  0x00007fc4ad345dbd: lea    0x1(%rdi),%rdi
  0x00007fc4ad345dc1: mov    %rdi,(%rdx,%rax,1)
  0x00007fc4ad345dc5: jne    0x00007fc4ad345e2e  ;*ifnonnull
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@149 (line 722)

  0x00007fc4ad345dcb: nopl   0x0(%rax,%rax,1)
  0x00007fc4ad345dd0: jmpq   0x00007fc4ad346289  ;   {no_reloc}
  0x00007fc4ad345dd5: add    %al,(%rax)
  0x00007fc4ad345dd7: add    %al,(%rax)
  0x00007fc4ad345dd9: add    %ch,%cl
  0x00007fc4ad345ddb: mov    $0x4,%ah
  0x00007fc4ad345ddd: add    %al,(%rax)         ;*new  ; - sun.nio.cs.UTF_8$Encoder::encode@153 (line 723)

  0x00007fc4ad345ddf: mov    %rax,%rdi
  0x00007fc4ad345de2: movabs $0x7fc4a9738fb8,%rbx  ;   {metadata(method data for {method} {0x00007fc4a9682bd8} 'encode' '([CII[B)I' in 'sun/nio/cs/UTF_8$Encoder')}
  0x00007fc4ad345dec: addq   $0x1,0x250(%rbx)
  0x00007fc4ad345df4: mov    %rax,%rsi          ;*invokespecial <init>
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@157 (line 723)

  0x00007fc4ad345df7: mov    %rax,0x60(%rsp)
  0x00007fc4ad345dfc: nop
  0x00007fc4ad345dfd: nop
  0x00007fc4ad345dfe: nop
  0x00007fc4ad345dff: callq  0x00007fc4ad045de0  ; OopMap{[64]=Oop [56]=Oop [72]=Oop [96]=Oop off=996}
                                                ;*invokespecial <init>
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@157 (line 723)
                                                ;   {optimized virtual_call}
  0x00007fc4ad345e04: mov    0x48(%rsp),%rsi
  0x00007fc4ad345e09: mov    0x60(%rsp),%rax
  0x00007fc4ad345e0e: mov    %rax,%r10
  0x00007fc4ad345e11: shr    $0x3,%r10
  0x00007fc4ad345e15: mov    %r10d,0x30(%rsi)
  0x00007fc4ad345e19: mov    %rsi,%rdx
  0x00007fc4ad345e1c: shr    $0x9,%rdx
  0x00007fc4ad345e20: movabs $0x7fc4bea36000,%rcx
  0x00007fc4ad345e2a: movb   $0x0,(%rdx,%rcx,1)  ;*putfield sgp
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@160 (line 723)

  0x00007fc4ad345e2e: mov    0x30(%rsi),%edi
  0x00007fc4ad345e31: shl    $0x3,%rdi          ;*getfield sgp
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@164 (line 724)

  0x00007fc4ad345e35: cmp    (%rdi),%rax        ; implicit exception: dispatches to 0x00007fc4ad3462a0
  0x00007fc4ad345e38: mov    %rdi,%rdx
  0x00007fc4ad345e3b: movabs $0x7fc4a9738fb8,%rcx  ;   {metadata(method data for {method} {0x00007fc4a9682bd8} 'encode' '([CII[B)I' in 'sun/nio/cs/UTF_8$Encoder')}
  0x00007fc4ad345e45: mov    0x8(%rdx),%edx
  0x00007fc4ad345e48: shl    $0x3,%rdx
  0x00007fc4ad345e4c: cmp    0x268(%rcx),%rdx
  0x00007fc4ad345e53: jne    0x00007fc4ad345e62
  0x00007fc4ad345e55: addq   $0x1,0x270(%rcx)
  0x00007fc4ad345e5d: jmpq   0x00007fc4ad345ec8
  0x00007fc4ad345e62: cmp    0x278(%rcx),%rdx
  0x00007fc4ad345e69: jne    0x00007fc4ad345e78
  0x00007fc4ad345e6b: addq   $0x1,0x280(%rcx)
  0x00007fc4ad345e73: jmpq   0x00007fc4ad345ec8
  0x00007fc4ad345e78: cmpq   $0x0,0x268(%rcx)
  0x00007fc4ad345e83: jne    0x00007fc4ad345e9c
  0x00007fc4ad345e85: mov    %rdx,0x268(%rcx)
  0x00007fc4ad345e8c: movq   $0x1,0x270(%rcx)
  0x00007fc4ad345e97: jmpq   0x00007fc4ad345ec8
  0x00007fc4ad345e9c: cmpq   $0x0,0x278(%rcx)
  0x00007fc4ad345ea7: jne    0x00007fc4ad345ec0
  0x00007fc4ad345ea9: mov    %rdx,0x278(%rcx)
  0x00007fc4ad345eb0: movq   $0x1,0x280(%rcx)
  0x00007fc4ad345ebb: jmpq   0x00007fc4ad345ec8
  0x00007fc4ad345ec0: addq   $0x1,0x260(%rcx)
  0x00007fc4ad345ec8: mov    0x50(%rsp),%eax
  0x00007fc4ad345ecc: dec    %eax
  0x00007fc4ad345ece: mov    0x54(%rsp),%edx
  0x00007fc4ad345ed2: mov    0x38(%rsp),%rcx
  0x00007fc4ad345ed7: mov    %rax,%r8
  0x00007fc4ad345eda: mov    0x34(%rsp),%r9d
  0x00007fc4ad345edf: mov    %rdi,%rsi          ;*invokevirtual parse
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@175 (line 724)

  0x00007fc4ad345ee2: nop
  0x00007fc4ad345ee3: nop
  0x00007fc4ad345ee4: nop
  0x00007fc4ad345ee5: movabs $0xffffffffffffffff,%rax
  0x00007fc4ad345eef: callq  0x00007fc4ad046020  ; OopMap{[64]=Oop [56]=Oop [72]=Oop off=1236}
                                                ;*invokevirtual parse
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@175 (line 724)
                                                ;   {virtual_call}
  0x00007fc4ad345ef4: cmp    $0x0,%eax
  0x00007fc4ad345ef7: movabs $0x7fc4a9738fb8,%rsi  ;   {metadata(method data for {method} {0x00007fc4a9682bd8} 'encode' '([CII[B)I' in 'sun/nio/cs/UTF_8$Encoder')}
  0x00007fc4ad345f01: movabs $0x290,%rdi
  0x00007fc4ad345f0b: jge    0x00007fc4ad345f1b
  0x00007fc4ad345f11: movabs $0x2a0,%rdi
  0x00007fc4ad345f1b: mov    (%rsi,%rdi,1),%rbx
  0x00007fc4ad345f1f: lea    0x1(%rbx),%rbx
  0x00007fc4ad345f23: mov    %rbx,(%rsi,%rdi,1)
  0x00007fc4ad345f27: jge    0x00007fc4ad346051  ;*ifge
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@182 (line 725)

  0x00007fc4ad345f2d: mov    0x48(%rsp),%rsi
  0x00007fc4ad345f32: movabs $0x7fc4a9738fb8,%rdi  ;   {metadata(method data for {method} {0x00007fc4a9682bd8} 'encode' '([CII[B)I' in 'sun/nio/cs/UTF_8$Encoder')}
  0x00007fc4ad345f3c: mov    0x8(%rsi),%esi
  0x00007fc4ad345f3f: shl    $0x3,%rsi
  0x00007fc4ad345f43: cmp    0x2b8(%rdi),%rsi
  0x00007fc4ad345f4a: jne    0x00007fc4ad345f59
  0x00007fc4ad345f4c: addq   $0x1,0x2c0(%rdi)
  0x00007fc4ad345f54: jmpq   0x00007fc4ad345fbf
  0x00007fc4ad345f59: cmp    0x2c8(%rdi),%rsi
  0x00007fc4ad345f60: jne    0x00007fc4ad345f6f
  0x00007fc4ad345f62: addq   $0x1,0x2d0(%rdi)
  0x00007fc4ad345f6a: jmpq   0x00007fc4ad345fbf
  0x00007fc4ad345f6f: cmpq   $0x0,0x2b8(%rdi)
  0x00007fc4ad345f7a: jne    0x00007fc4ad345f93
  0x00007fc4ad345f7c: mov    %rsi,0x2b8(%rdi)
  0x00007fc4ad345f83: movq   $0x1,0x2c0(%rdi)
  0x00007fc4ad345f8e: jmpq   0x00007fc4ad345fbf
  0x00007fc4ad345f93: cmpq   $0x0,0x2c8(%rdi)
  0x00007fc4ad345f9e: jne    0x00007fc4ad345fb7
  0x00007fc4ad345fa0: mov    %rsi,0x2c8(%rdi)
  0x00007fc4ad345fa7: movq   $0x1,0x2d0(%rdi)
  0x00007fc4ad345fb2: jmpq   0x00007fc4ad345fbf
  0x00007fc4ad345fb7: addq   $0x1,0x2b0(%rdi)
  0x00007fc4ad345fbf: mov    0x48(%rsp),%rsi    ;*invokevirtual malformedInputAction
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@186 (line 726)

  0x00007fc4ad345fc4: nop
  0x00007fc4ad345fc5: nop
  0x00007fc4ad345fc6: nop
  0x00007fc4ad345fc7: callq  0x00007fc4ad045de0  ; OopMap{[64]=Oop [56]=Oop [72]=Oop off=1452}
                                                ;*invokevirtual malformedInputAction
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@186 (line 726)
                                                ;   {optimized virtual_call}
  0x00007fc4ad345fcc: movabs $0x6b4916858,%r10  ;   {oop(a 'java/nio/charset/CodingErrorAction')}
  0x00007fc4ad345fd6: cmp    %r10,%rax
  0x00007fc4ad345fd9: movabs $0x7fc4a9738fb8,%rax  ;   {metadata(method data for {method} {0x00007fc4a9682bd8} 'encode' '([CII[B)I' in 'sun/nio/cs/UTF_8$Encoder')}
  0x00007fc4ad345fe3: movabs $0x2e0,%rsi
  0x00007fc4ad345fed: je     0x00007fc4ad345ffd
  0x00007fc4ad345ff3: movabs $0x2f0,%rsi
  0x00007fc4ad345ffd: mov    (%rax,%rsi,1),%rdi
  0x00007fc4ad346001: lea    0x1(%rdi),%rdi
  0x00007fc4ad346005: mov    %rdi,(%rax,%rsi,1)
  0x00007fc4ad346009: jne    0x00007fc4ad3461dd  ;*if_acmpeq
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@192 (line 726)

  0x00007fc4ad34600f: mov    0x58(%rsp),%esi
  0x00007fc4ad346013: mov    0x40(%rsp),%r9
  0x00007fc4ad346018: mov    0x48(%rsp),%rdi
  0x00007fc4ad34601d: mov    %rsi,%rax
  0x00007fc4ad346020: inc    %eax
  0x00007fc4ad346022: movsbl 0x2c(%rdi),%ebx    ;*getfield repl
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@205 (line 728)

  0x00007fc4ad346026: movslq %esi,%rdx
  0x00007fc4ad346029: cmp    0xc(%r9),%esi
  0x00007fc4ad34602d: jae    0x00007fc4ad3462a5
  0x00007fc4ad346033: mov    %bl,0x10(%r9,%rdx,1)  ;*bastore
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@208 (line 728)

  0x00007fc4ad346038: movabs $0x7fc4a9738fb8,%rsi  ;   {metadata(method data for {method} {0x00007fc4a9682bd8} 'encode' '([CII[B)I' in 'sun/nio/cs/UTF_8$Encoder')}
  0x00007fc4ad346042: incl   0x300(%rsi)
  0x00007fc4ad346048: mov    0x50(%rsp),%esi
  0x00007fc4ad34604c: jmpq   0x00007fc4ad3460ee  ;*goto
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@209 (line 728)

  0x00007fc4ad346051: mov    0x58(%rsp),%esi
  0x00007fc4ad346055: mov    0x40(%rsp),%r9
  0x00007fc4ad34605a: mov    0x48(%rsp),%rdi
  0x00007fc4ad34605f: mov    %rax,%rbx
  0x00007fc4ad346062: sar    $0x12,%ebx
  0x00007fc4ad346065: or     $0xf0,%ebx
  0x00007fc4ad34606b: movslq %esi,%rdx
  0x00007fc4ad34606e: cmp    0xc(%r9),%esi
  0x00007fc4ad346072: jae    0x00007fc4ad3462ae
  0x00007fc4ad346078: mov    %bl,0x10(%r9,%rdx,1)  ;*bastore
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@229 (line 730)

  0x00007fc4ad34607d: inc    %esi
  0x00007fc4ad34607f: mov    %rax,%rbx
  0x00007fc4ad346082: sar    $0xc,%ebx
  0x00007fc4ad346085: and    $0x3f,%ebx
  0x00007fc4ad346088: or     $0x80,%ebx
  0x00007fc4ad34608e: movslq %esi,%rdx
  0x00007fc4ad346091: cmp    0xc(%r9),%esi
  0x00007fc4ad346095: jae    0x00007fc4ad3462b7
  0x00007fc4ad34609b: mov    %bl,0x10(%r9,%rdx,1)  ;*bastore
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@250 (line 731)

  0x00007fc4ad3460a0: inc    %esi
  0x00007fc4ad3460a2: mov    %rax,%rbx
  0x00007fc4ad3460a5: sar    $0x6,%ebx
  0x00007fc4ad3460a8: and    $0x3f,%ebx
  0x00007fc4ad3460ab: or     $0x80,%ebx
  0x00007fc4ad3460b1: movslq %esi,%rdx
  0x00007fc4ad3460b4: cmp    0xc(%r9),%esi
  0x00007fc4ad3460b8: jae    0x00007fc4ad3462c0
  0x00007fc4ad3460be: mov    %bl,0x10(%r9,%rdx,1)  ;*bastore
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@271 (line 732)

  0x00007fc4ad3460c3: inc    %esi
  0x00007fc4ad3460c5: mov    %rsi,%rbx
  0x00007fc4ad3460c8: inc    %ebx
  0x00007fc4ad3460ca: and    $0x3f,%eax
  0x00007fc4ad3460cd: or     $0x80,%eax
  0x00007fc4ad3460d3: movslq %esi,%rdx
  0x00007fc4ad3460d6: cmp    0xc(%r9),%esi
  0x00007fc4ad3460da: jae    0x00007fc4ad3462c9
  0x00007fc4ad3460e0: mov    %al,0x10(%r9,%rdx,1)  ;*bastore
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@289 (line 733)

  0x00007fc4ad3460e5: mov    0x50(%rsp),%esi
  0x00007fc4ad3460e9: inc    %esi
  0x00007fc4ad3460eb: mov    %rbx,%rax
  0x00007fc4ad3460ee: movabs $0x7fc4a9738fb8,%rbx  ;   {metadata(method data for {method} {0x00007fc4a9682bd8} 'encode' '([CII[B)I' in 'sun/nio/cs/UTF_8$Encoder')}
  0x00007fc4ad3460f8: incl   0x318(%rbx)
  0x00007fc4ad3460fe: mov    %rax,%r8
  0x00007fc4ad346101: mov    %rsi,%rax
  0x00007fc4ad346104: jmpq   0x00007fc4ad346185  ;*goto
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@293 (line 736)

  0x00007fc4ad346109: mov    0x54(%rsp),%ecx
  0x00007fc4ad34610d: mov    0x50(%rsp),%eax
  0x00007fc4ad346111: mov    0x58(%rsp),%esi
  0x00007fc4ad346115: mov    0x40(%rsp),%r9
  0x00007fc4ad34611a: mov    0x48(%rsp),%rdi
  0x00007fc4ad34611f: mov    %rcx,%rbx
  0x00007fc4ad346122: sar    $0xc,%ebx
  0x00007fc4ad346125: or     $0xe0,%ebx
  0x00007fc4ad34612b: movslq %esi,%rdx
  0x00007fc4ad34612e: cmp    0xc(%r9),%esi
  0x00007fc4ad346132: jae    0x00007fc4ad3462d2
  0x00007fc4ad346138: mov    %bl,0x10(%r9,%rdx,1)  ;*bastore
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@313 (line 738)

  0x00007fc4ad34613d: inc    %esi
  0x00007fc4ad34613f: mov    %rcx,%rbx
  0x00007fc4ad346142: sar    $0x6,%ebx
  0x00007fc4ad346145: and    $0x3f,%ebx
  0x00007fc4ad346148: or     $0x80,%ebx
  0x00007fc4ad34614e: movslq %esi,%rdx
  0x00007fc4ad346151: cmp    0xc(%r9),%esi
  0x00007fc4ad346155: jae    0x00007fc4ad3462db
  0x00007fc4ad34615b: mov    %bl,0x10(%r9,%rdx,1)  ;*bastore
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@334 (line 739)

  0x00007fc4ad346160: inc    %esi
  0x00007fc4ad346162: mov    %rsi,%rbx
  0x00007fc4ad346165: inc    %ebx
  0x00007fc4ad346167: and    $0x3f,%ecx
  0x00007fc4ad34616a: or     $0x80,%ecx
  0x00007fc4ad346170: movslq %esi,%rdx
  0x00007fc4ad346173: cmp    0xc(%r9),%esi
  0x00007fc4ad346177: jae    0x00007fc4ad3462e4
  0x00007fc4ad34617d: mov    %cl,0x10(%r9,%rdx,1)  ;*bastore
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@352 (line 740)

  0x00007fc4ad346182: mov    %rbx,%r8           ;*goto
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@353 (line 742)

  0x00007fc4ad346185: movabs $0x7fc4a9738fb8,%rsi  ;   {metadata(method data for {method} {0x00007fc4a9682bd8} 'encode' '([CII[B)I' in 'sun/nio/cs/UTF_8$Encoder')}
  0x00007fc4ad34618f: mov    0xe0(%rsi),%ebx
  0x00007fc4ad346195: add    $0x8,%ebx
  0x00007fc4ad346198: mov    %ebx,0xe0(%rsi)
  0x00007fc4ad34619e: movabs $0x7fc4a9682bd8,%rsi  ;   {metadata({method} {0x00007fc4a9682bd8} 'encode' '([CII[B)I' in 'sun/nio/cs/UTF_8$Encoder')}
  0x00007fc4ad3461a8: and    $0xfff8,%ebx
  0x00007fc4ad3461ae: cmp    $0x0,%ebx
  0x00007fc4ad3461b1: je     0x00007fc4ad3462ed  ; OopMap{[56]=Oop rdi=Oop [72]=Oop r9=Oop [64]=Oop off=1943}
                                                ;*goto
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@353 (line 742)

  0x00007fc4ad3461b7: test   %eax,0x16e06f43(%rip)        # 0x00007fc4c414d100
                                                ;   {poll}
  0x00007fc4ad3461bd: movabs $0x7fc4a9738fb8,%rsi  ;   {metadata(method data for {method} {0x00007fc4a9682bd8} 'encode' '([CII[B)I' in 'sun/nio/cs/UTF_8$Encoder')}
  0x00007fc4ad3461c7: incl   0x330(%rsi)
  0x00007fc4ad3461cd: mov    %r8,%rsi
  0x00007fc4ad3461d0: mov    %rax,%rcx
  0x00007fc4ad3461d3: mov    0x38(%rsp),%rdx
  0x00007fc4ad3461d8: jmpq   0x00007fc4ad345bc8  ;*goto
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@353 (line 742)

  0x00007fc4ad3461dd: mov    $0xffffffff,%eax
  0x00007fc4ad3461e2: add    $0x70,%rsp
  0x00007fc4ad3461e6: pop    %rbp
  0x00007fc4ad3461e7: test   %eax,0x16e06f13(%rip)        # 0x00007fc4c414d100
                                                ;   {poll_return}
  0x00007fc4ad3461ed: retq                      ;*ireturn
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@196 (line 727)

  0x00007fc4ad3461ee: mov    %rsi,%rax
  0x00007fc4ad3461f1: add    $0x70,%rsp
  0x00007fc4ad3461f5: pop    %rbp
  0x00007fc4ad3461f6: test   %eax,0x16e06f04(%rip)        # 0x00007fc4c414d100
                                                ;   {poll_return}
  0x00007fc4ad3461fc: retq   
  0x00007fc4ad3461fd: mov    %rdi,0x8(%rsp)
  0x00007fc4ad346202: movq   $0xffffffffffffffff,(%rsp)
  0x00007fc4ad34620a: callq  0x00007fc4ad18f560  ; OopMap{rsi=Oop [72]=Oop rdx=Oop [56]=Oop r9=Oop [64]=Oop off=2031}
                                                ;*synchronization entry
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@-1 (line 704)
                                                ;   {runtime_call}
  0x00007fc4ad34620f: jmpq   0x00007fc4ad345a8d
  0x00007fc4ad346214: callq  0x00007fc4ad0fddc0  ; OopMap{r9=Oop [64]=Oop [56]=Oop [72]=Oop off=2041}
                                                ;*arraylength
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@13 (line 706)
                                                ;   {runtime_call}
  0x00007fc4ad346219: callq  0x00007fc4ad0fddc0  ; OopMap{[72]=Oop r9=Oop [64]=Oop rdx=Oop [56]=Oop off=2046}
                                                ;*caload
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@29 (line 709)
                                                ;   {runtime_call}
  0x00007fc4ad34621e: callq  0x00007fc4ad0fddc0  ; OopMap{[72]=Oop r9=Oop [64]=Oop rdx=Oop [56]=Oop off=2051}
                                                ;*caload
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@29 (line 709)
                                                ;   {runtime_call}
  0x00007fc4ad346223: mov    %rcx,(%rsp)
  0x00007fc4ad346227: callq  0x00007fc4ad070380  ; OopMap{[72]=Oop r9=Oop [64]=Oop rdx=Oop [56]=Oop off=2060}
                                                ;*caload
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@29 (line 709)
                                                ;   {runtime_call}
  0x00007fc4ad34622c: mov    %rsi,(%rsp)
  0x00007fc4ad346230: callq  0x00007fc4ad070380  ; OopMap{[72]=Oop r9=Oop [64]=Oop rdx=Oop [56]=Oop off=2069}
                                                ;*bastore
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@50 (line 710)
                                                ;   {runtime_call}
  0x00007fc4ad346235: mov    %rsi,0x8(%rsp)
  0x00007fc4ad34623a: movq   $0x33,(%rsp)
  0x00007fc4ad346242: callq  0x00007fc4ad18f560  ; OopMap{[72]=Oop r9=Oop [64]=Oop rdx=Oop [56]=Oop off=2087}
                                                ;*goto
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@51 (line 710)
                                                ;   {runtime_call}
  0x00007fc4ad346247: jmpq   0x00007fc4ad345b70
  0x00007fc4ad34624c: callq  0x00007fc4ad0fddc0  ; OopMap{r9=Oop [64]=Oop rdx=Oop [56]=Oop [72]=Oop off=2097}
                                                ;*caload
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@65 (line 713)
                                                ;   {runtime_call}
  0x00007fc4ad346251: callq  0x00007fc4ad0fddc0  ; OopMap{r9=Oop [64]=Oop rdx=Oop [56]=Oop [72]=Oop off=2102}
                                                ;*caload
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@65 (line 713)
                                                ;   {runtime_call}
  0x00007fc4ad346256: mov    %rcx,(%rsp)
  0x00007fc4ad34625a: callq  0x00007fc4ad070380  ; OopMap{r9=Oop [64]=Oop rdx=Oop [56]=Oop [72]=Oop off=2111}
                                                ;*caload
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@65 (line 713)
                                                ;   {runtime_call}
  0x00007fc4ad34625f: mov    %rsi,(%rsp)
  0x00007fc4ad346263: callq  0x00007fc4ad070380  ; OopMap{r9=Oop [64]=Oop rdx=Oop [56]=Oop [72]=Oop off=2120}
                                                ;*bastore
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@86 (line 716)
                                                ;   {runtime_call}
  0x00007fc4ad346268: mov    %rsi,(%rsp)
  0x00007fc4ad34626c: callq  0x00007fc4ad070380  ; OopMap{r9=Oop [64]=Oop rdx=Oop [56]=Oop [72]=Oop off=2129}
                                                ;*bastore
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@115 (line 719)
                                                ;   {runtime_call}
  0x00007fc4ad346271: mov    %rsi,(%rsp)
  0x00007fc4ad346275: callq  0x00007fc4ad070380  ; OopMap{r9=Oop [64]=Oop rdx=Oop [56]=Oop [72]=Oop off=2138}
                                                ;*bastore
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@133 (line 720)
                                                ;   {runtime_call}
  0x00007fc4ad34627a: movabs $0x0,%rdx          ;   {metadata(NULL)}
  0x00007fc4ad346284: mov    $0xa050f00,%eax
  0x00007fc4ad346289: callq  0x00007fc4ad18e460  ; OopMap{[64]=Oop [56]=Oop [72]=Oop off=2158}
                                                ;*new  ; - sun.nio.cs.UTF_8$Encoder::encode@153 (line 723)
                                                ;   {runtime_call}
  0x00007fc4ad34628e: jmpq   0x00007fc4ad345dd0
  0x00007fc4ad346293: mov    %rdx,%rdx
  0x00007fc4ad346296: callq  0x00007fc4ad0fe260  ; OopMap{[64]=Oop [56]=Oop [72]=Oop off=2171}
                                                ;*new  ; - sun.nio.cs.UTF_8$Encoder::encode@153 (line 723)
                                                ;   {runtime_call}
  0x00007fc4ad34629b: jmpq   0x00007fc4ad345ddf
  0x00007fc4ad3462a0: callq  0x00007fc4ad0fddc0  ; OopMap{[64]=Oop [56]=Oop rsi=Oop [72]=Oop rdi=Oop off=2181}
                                                ;*invokevirtual parse
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@175 (line 724)
                                                ;   {runtime_call}
  0x00007fc4ad3462a5: mov    %rsi,(%rsp)
  0x00007fc4ad3462a9: callq  0x00007fc4ad070380  ; OopMap{[56]=Oop rdi=Oop [72]=Oop r9=Oop [64]=Oop off=2190}
                                                ;*bastore
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@208 (line 728)
                                                ;   {runtime_call}
  0x00007fc4ad3462ae: mov    %rsi,(%rsp)
  0x00007fc4ad3462b2: callq  0x00007fc4ad070380  ; OopMap{[56]=Oop rdi=Oop [72]=Oop r9=Oop [64]=Oop off=2199}
                                                ;*bastore
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@229 (line 730)
                                                ;   {runtime_call}
  0x00007fc4ad3462b7: mov    %rsi,(%rsp)
  0x00007fc4ad3462bb: callq  0x00007fc4ad070380  ; OopMap{[56]=Oop rdi=Oop [72]=Oop r9=Oop [64]=Oop off=2208}
                                                ;*bastore
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@250 (line 731)
                                                ;   {runtime_call}
  0x00007fc4ad3462c0: mov    %rsi,(%rsp)
  0x00007fc4ad3462c4: callq  0x00007fc4ad070380  ; OopMap{[56]=Oop rdi=Oop [72]=Oop r9=Oop [64]=Oop off=2217}
                                                ;*bastore
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@271 (line 732)
                                                ;   {runtime_call}
  0x00007fc4ad3462c9: mov    %rsi,(%rsp)
  0x00007fc4ad3462cd: callq  0x00007fc4ad070380  ; OopMap{[56]=Oop rdi=Oop [72]=Oop r9=Oop [64]=Oop off=2226}
                                                ;*bastore
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@289 (line 733)
                                                ;   {runtime_call}
  0x00007fc4ad3462d2: mov    %rsi,(%rsp)
  0x00007fc4ad3462d6: callq  0x00007fc4ad070380  ; OopMap{[56]=Oop rdi=Oop [72]=Oop r9=Oop [64]=Oop off=2235}
                                                ;*bastore
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@313 (line 738)
                                                ;   {runtime_call}
  0x00007fc4ad3462db: mov    %rsi,(%rsp)
  0x00007fc4ad3462df: callq  0x00007fc4ad070380  ; OopMap{[56]=Oop rdi=Oop [72]=Oop r9=Oop [64]=Oop off=2244}
                                                ;*bastore
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@334 (line 739)
                                                ;   {runtime_call}
  0x00007fc4ad3462e4: mov    %rsi,(%rsp)
  0x00007fc4ad3462e8: callq  0x00007fc4ad070380  ; OopMap{[56]=Oop rdi=Oop [72]=Oop r9=Oop [64]=Oop off=2253}
                                                ;*bastore
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@352 (line 740)
                                                ;   {runtime_call}
  0x00007fc4ad3462ed: mov    %rsi,0x8(%rsp)
  0x00007fc4ad3462f2: movq   $0x161,(%rsp)
  0x00007fc4ad3462fa: callq  0x00007fc4ad18f560  ; OopMap{[56]=Oop rdi=Oop [72]=Oop r9=Oop [64]=Oop off=2271}
                                                ;*goto
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@353 (line 742)
                                                ;   {runtime_call}
  0x00007fc4ad3462ff: jmpq   0x00007fc4ad3461b7
  0x00007fc4ad346304: nop
  0x00007fc4ad346305: nop
  0x00007fc4ad346306: mov    0x300(%r15),%rax
  0x00007fc4ad34630d: movabs $0x0,%r10
  0x00007fc4ad346317: mov    %r10,0x300(%r15)
  0x00007fc4ad34631e: movabs $0x0,%r10
  0x00007fc4ad346328: mov    %r10,0x308(%r15)
  0x00007fc4ad34632f: add    $0x70,%rsp
  0x00007fc4ad346333: pop    %rbp
  0x00007fc4ad346334: jmpq   0x00007fc4ad070820  ;   {runtime_call}
  0x00007fc4ad346339: hlt    
  0x00007fc4ad34633a: hlt    
  0x00007fc4ad34633b: hlt    
  0x00007fc4ad34633c: hlt    
  0x00007fc4ad34633d: hlt    
  0x00007fc4ad34633e: hlt    
  0x00007fc4ad34633f: hlt    
[Stub Code]
  0x00007fc4ad346340: nop                       ;   {no_reloc}
  0x00007fc4ad346341: nop
  0x00007fc4ad346342: nop
  0x00007fc4ad346343: nop
  0x00007fc4ad346344: nop
  0x00007fc4ad346345: movabs $0x0,%rbx          ;   {static_stub}
  0x00007fc4ad34634f: jmpq   0x00007fc4ad34634f  ;   {runtime_call}
  0x00007fc4ad346354: nop
  0x00007fc4ad346355: movabs $0x0,%rbx          ;   {static_stub}
  0x00007fc4ad34635f: jmpq   0x00007fc4ad34635f  ;   {runtime_call}
  0x00007fc4ad346364: nop
  0x00007fc4ad346365: movabs $0x0,%rbx          ;   {static_stub}
  0x00007fc4ad34636f: jmpq   0x00007fc4ad34636f  ;   {runtime_call}
  0x00007fc4ad346374: nop
  0x00007fc4ad346375: movabs $0x0,%rbx          ;   {static_stub}
  0x00007fc4ad34637f: jmpq   0x00007fc4ad34637f  ;   {runtime_call}
  0x00007fc4ad346384: nop
  0x00007fc4ad346385: movabs $0x0,%rbx          ;   {static_stub}
  0x00007fc4ad34638f: jmpq   0x00007fc4ad34638f  ;   {runtime_call}
[Exception Handler]
  0x00007fc4ad346394: callq  0x00007fc4ad070160  ;   {runtime_call}
  0x00007fc4ad346399: mov    %rsp,-0x28(%rsp)
  0x00007fc4ad34639e: sub    $0x80,%rsp
  0x00007fc4ad3463a5: mov    %rax,0x78(%rsp)
  0x00007fc4ad3463aa: mov    %rcx,0x70(%rsp)
  0x00007fc4ad3463af: mov    %rdx,0x68(%rsp)
  0x00007fc4ad3463b4: mov    %rbx,0x60(%rsp)
  0x00007fc4ad3463b9: mov    %rbp,0x50(%rsp)
  0x00007fc4ad3463be: mov    %rsi,0x48(%rsp)
  0x00007fc4ad3463c3: mov    %rdi,0x40(%rsp)
  0x00007fc4ad3463c8: mov    %r8,0x38(%rsp)
  0x00007fc4ad3463cd: mov    %r9,0x30(%rsp)
  0x00007fc4ad3463d2: mov    %r10,0x28(%rsp)
  0x00007fc4ad3463d7: mov    %r11,0x20(%rsp)
  0x00007fc4ad3463dc: mov    %r12,0x18(%rsp)
  0x00007fc4ad3463e1: mov    %r13,0x10(%rsp)
  0x00007fc4ad3463e6: mov    %r14,0x8(%rsp)
  0x00007fc4ad3463eb: mov    %r15,(%rsp)
  0x00007fc4ad3463ef: movabs $0x7fc4c3c3b49e,%rdi  ;   {external_word}
  0x00007fc4ad3463f9: movabs $0x7fc4ad346399,%rsi  ;   {internal_word}
  0x00007fc4ad346403: mov    %rsp,%rdx
  0x00007fc4ad346406: and    $0xfffffffffffffff0,%rsp
  0x00007fc4ad34640a: callq  0x00007fc4c3961460  ;   {runtime_call}
  0x00007fc4ad34640f: hlt    
[Deopt Handler Code]
  0x00007fc4ad346410: movabs $0x7fc4ad346410,%r10  ;   {section_word}
  0x00007fc4ad34641a: push   %r10
  0x00007fc4ad34641c: jmpq   0x00007fc4ad046e40  ;   {runtime_call}
  0x00007fc4ad346421: hlt    
  0x00007fc4ad346422: hlt    
  0x00007fc4ad346423: hlt    
  0x00007fc4ad346424: hlt    
  0x00007fc4ad346425: hlt    
  0x00007fc4ad346426: hlt    
  0x00007fc4ad346427: hlt    
Decoding compiled method 0x00007fc4ad33bb10:
Code:
[Entry Point]
[Verified Entry Point]
[Constants]
  # {method} {0x00007fc4a964dfb8} 'copyOfRange' '([CII)[C' in 'java/util/Arrays'
  # parm0:    rsi:rsi   = '[C'
  # parm1:    rdx       = int
  # parm2:    rcx       = int
  #           [sp+0x80]  (sp of caller)
  0x00007fc4ad33bd00: mov    %eax,-0x14000(%rsp)
  0x00007fc4ad33bd07: push   %rbp
  0x00007fc4ad33bd08: sub    $0x70,%rsp
  0x00007fc4ad33bd0c: mov    %edx,0x40(%rsp)
  0x00007fc4ad33bd10: movabs $0x7fc4a97d4768,%rbx  ;   {metadata(method data for {method} {0x00007fc4a964dfb8} 'copyOfRange' '([CII)[C' in 'java/util/Arrays')}
  0x00007fc4ad33bd1a: mov    0xdc(%rbx),%edi
  0x00007fc4ad33bd20: add    $0x8,%edi
  0x00007fc4ad33bd23: mov    %edi,0xdc(%rbx)
  0x00007fc4ad33bd29: movabs $0x7fc4a964dfb8,%rbx  ;   {metadata({method} {0x00007fc4a964dfb8} 'copyOfRange' '([CII)[C' in 'java/util/Arrays')}
  0x00007fc4ad33bd33: and    $0x1ff8,%edi
  0x00007fc4ad33bd39: cmp    $0x0,%edi
  0x00007fc4ad33bd3c: je     0x00007fc4ad33c1ee  ;*iload_2
                                                ; - java.util.Arrays::copyOfRange@0 (line 3661)

  0x00007fc4ad33bd42: mov    %rcx,%r8
  0x00007fc4ad33bd45: sub    %edx,%r8d
  0x00007fc4ad33bd48: cmp    $0x0,%r8d
  0x00007fc4ad33bd4c: movabs $0x7fc4a97d4768,%rbx  ;   {metadata(method data for {method} {0x00007fc4a964dfb8} 'copyOfRange' '([CII)[C' in 'java/util/Arrays')}
  0x00007fc4ad33bd56: movabs $0x108,%rdi
  0x00007fc4ad33bd60: jge    0x00007fc4ad33bd70
  0x00007fc4ad33bd66: movabs $0x118,%rdi
  0x00007fc4ad33bd70: mov    (%rbx,%rdi,1),%rax
  0x00007fc4ad33bd74: lea    0x1(%rax),%rax
  0x00007fc4ad33bd78: mov    %rax,(%rbx,%rdi,1)
  0x00007fc4ad33bd7c: jl     0x00007fc4ad33be75  ;*ifge
                                                ; - java.util.Arrays::copyOfRange@5 (line 3662)

  0x00007fc4ad33bd82: mov    %r8,%rbx
  0x00007fc4ad33bd85: mov    %rdx,%r9
  0x00007fc4ad33bd88: movabs $0x7c0000208,%rdx  ;   {metadata({type array char})}
  0x00007fc4ad33bd92: mov    %rsi,%r11
  0x00007fc4ad33bd95: movslq %ebx,%rbx
  0x00007fc4ad33bd98: mov    %rbx,%rdi
  0x00007fc4ad33bd9b: cmp    $0xffffff,%rbx
  0x00007fc4ad33bda2: ja     0x00007fc4ad33c205
  0x00007fc4ad33bda8: movabs $0x17,%rsi
  0x00007fc4ad33bdb2: lea    (%rsi,%rbx,2),%rsi
  0x00007fc4ad33bdb6: and    $0xfffffffffffffff8,%rsi
  0x00007fc4ad33bdba: mov    0x60(%r15),%rax
  0x00007fc4ad33bdbe: lea    (%rax,%rsi,1),%rsi
  0x00007fc4ad33bdc2: cmp    0x70(%r15),%rsi
  0x00007fc4ad33bdc6: ja     0x00007fc4ad33c205
  0x00007fc4ad33bdcc: mov    %rsi,0x60(%r15)
  0x00007fc4ad33bdd0: sub    %rax,%rsi
  0x00007fc4ad33bdd3: movq   $0x1,(%rax)
  0x00007fc4ad33bdda: mov    %rdx,%rcx
  0x00007fc4ad33bddd: shr    $0x3,%rcx
  0x00007fc4ad33bde1: mov    %ecx,0x8(%rax)
  0x00007fc4ad33bde4: mov    %ebx,0xc(%rax)
  0x00007fc4ad33bde7: sub    $0x10,%rsi
  0x00007fc4ad33bdeb: je     0x00007fc4ad33be02
  0x00007fc4ad33bdf1: xor    %rbx,%rbx
  0x00007fc4ad33bdf4: shr    $0x3,%rsi
  0x00007fc4ad33bdf8: mov    %rbx,0x8(%rax,%rsi,8)
  0x00007fc4ad33bdfd: dec    %rsi
  0x00007fc4ad33be00: jne    0x00007fc4ad33bdf8  ;*newarray
                                                ; - java.util.Arrays::copyOfRange@40 (line 3664)

  0x00007fc4ad33be02: mov    0xc(%r11),%esi     ;*arraylength
                                                ; - java.util.Arrays::copyOfRange@50 (line 3665)
                                                ; implicit exception: dispatches to 0x00007fc4ad33c20f
  0x00007fc4ad33be06: movabs $0x7fc4a97d4768,%rdx  ;   {metadata(method data for {method} {0x00007fc4a964dfb8} 'copyOfRange' '([CII)[C' in 'java/util/Arrays')}
  0x00007fc4ad33be10: addq   $0x1,0x208(%rdx)
  0x00007fc4ad33be18: sub    %r9d,%esi
  0x00007fc4ad33be1b: mov    %r8,%rdx           ;*invokestatic min
                                                ; - java.util.Arrays::copyOfRange@54 (line 3666)

  0x00007fc4ad33be1e: mov    %rax,0x48(%rsp)
  0x00007fc4ad33be23: mov    %r11,0x38(%rsp)
  0x00007fc4ad33be28: nop
  0x00007fc4ad33be29: nop
  0x00007fc4ad33be2a: nop
  0x00007fc4ad33be2b: nop
  0x00007fc4ad33be2c: nop
  0x00007fc4ad33be2d: nop
  0x00007fc4ad33be2e: nop
  0x00007fc4ad33be2f: callq  0x00007fc4ad046260  ; OopMap{[72]=Oop [56]=Oop off=308}
                                                ;*invokestatic min
                                                ; - java.util.Arrays::copyOfRange@54 (line 3666)
                                                ;   {static_call}
  0x00007fc4ad33be34: movabs $0x7fc4a97d4768,%rsi  ;   {metadata(method data for {method} {0x00007fc4a964dfb8} 'copyOfRange' '([CII)[C' in 'java/util/Arrays')}
  0x00007fc4ad33be3e: addq   $0x1,0x218(%rsi)
  0x00007fc4ad33be46: mov    0x38(%rsp),%rsi
  0x00007fc4ad33be4b: mov    0x40(%rsp),%edx
  0x00007fc4ad33be4f: mov    0x48(%rsp),%rcx
  0x00007fc4ad33be54: mov    $0x0,%r8d
  0x00007fc4ad33be5a: mov    %rax,%r9           ;*invokestatic arraycopy
                                                ; - java.util.Arrays::copyOfRange@57 (line 3665)

  0x00007fc4ad33be5d: nop
  0x00007fc4ad33be5e: nop
  0x00007fc4ad33be5f: callq  0x00007fc4ad046260  ; OopMap{[72]=Oop off=356}
                                                ;*invokestatic arraycopy
                                                ; - java.util.Arrays::copyOfRange@57 (line 3665)
                                                ;   {static_call}
  0x00007fc4ad33be64: mov    0x48(%rsp),%rax
  0x00007fc4ad33be69: add    $0x70,%rsp
  0x00007fc4ad33be6d: pop    %rbp
  0x00007fc4ad33be6e: test   %eax,0x16e1128c(%rip)        # 0x00007fc4c414d100
                                                ;   {poll_return}
  0x00007fc4ad33be74: retq                      ;*areturn
                                                ; - java.util.Arrays::copyOfRange@62 (line 3667)

  0x00007fc4ad33be75: mov    %ecx,0x44(%rsp)
  0x00007fc4ad33be79: nopl   0x0(%rax)
  0x00007fc4ad33be80: jmpq   0x00007fc4ad33c223  ;   {no_reloc}
  0x00007fc4ad33be85: add    %al,(%rax)
  0x00007fc4ad33be87: add    %al,(%rax)
  0x00007fc4ad33be89: add    %cl,-0x75(%rcx)
  0x00007fc4ad33be8c: rex.RXB (bad) 
  0x00007fc4ad33be8e: lea    0x20(%rax),%rdi
  0x00007fc4ad33be92: cmp    0x70(%r15),%rdi
  0x00007fc4ad33be96: ja     0x00007fc4ad33c22d
  0x00007fc4ad33be9c: mov    %rdi,0x60(%r15)
  0x00007fc4ad33bea0: mov    0xa8(%rdx),%rcx
  0x00007fc4ad33bea7: mov    %rcx,(%rax)
  0x00007fc4ad33beaa: mov    %rdx,%rcx
  0x00007fc4ad33bead: shr    $0x3,%rcx
  0x00007fc4ad33beb1: mov    %ecx,0x8(%rax)
  0x00007fc4ad33beb4: xor    %rcx,%rcx
  0x00007fc4ad33beb7: mov    %ecx,0xc(%rax)
  0x00007fc4ad33beba: xor    %rcx,%rcx
  0x00007fc4ad33bebd: mov    %rcx,0x10(%rax)
  0x00007fc4ad33bec1: mov    %rcx,0x18(%rax)    ;*new  ; - java.util.Arrays::copyOfRange@8 (line 3663)

  0x00007fc4ad33bec5: data16 xchg %ax,%ax
  0x00007fc4ad33bec8: jmpq   0x00007fc4ad33c249  ;   {no_reloc}
  0x00007fc4ad33becd: add    %al,(%rax)
  0x00007fc4ad33becf: add    %al,(%rax)
  0x00007fc4ad33bed1: add    %cl,-0x77(%rax)
  0x00007fc4ad33bed4: rex.R and $0x58,%al
  0x00007fc4ad33bed7: mov    0x60(%r15),%rax
  0x00007fc4ad33bedb: lea    0x18(%rax),%rdi
  0x00007fc4ad33bedf: cmp    0x70(%r15),%rdi
  0x00007fc4ad33bee3: ja     0x00007fc4ad33c253
  0x00007fc4ad33bee9: mov    %rdi,0x60(%r15)
  0x00007fc4ad33beed: mov    0xa8(%rdx),%rcx
  0x00007fc4ad33bef4: mov    %rcx,(%rax)
  0x00007fc4ad33bef7: mov    %rdx,%rcx
  0x00007fc4ad33befa: shr    $0x3,%rcx
  0x00007fc4ad33befe: mov    %ecx,0x8(%rax)
  0x00007fc4ad33bf01: xor    %rcx,%rcx
  0x00007fc4ad33bf04: mov    %ecx,0xc(%rax)
  0x00007fc4ad33bf07: xor    %rcx,%rcx
  0x00007fc4ad33bf0a: mov    %rcx,0x10(%rax)    ;*new  ; - java.util.Arrays::copyOfRange@12 (line 3663)

  0x00007fc4ad33bf0e: mov    %rax,%rsi
  0x00007fc4ad33bf11: movabs $0x7fc4a97d4768,%rdi  ;   {metadata(method data for {method} {0x00007fc4a964dfb8} 'copyOfRange' '([CII)[C' in 'java/util/Arrays')}
  0x00007fc4ad33bf1b: addq   $0x1,0x128(%rdi)
  0x00007fc4ad33bf23: mov    %rax,%rsi          ;*invokespecial <init>
                                                ; - java.util.Arrays::copyOfRange@16 (line 3663)

  0x00007fc4ad33bf26: mov    %rax,0x50(%rsp)
  0x00007fc4ad33bf2b: nop
  0x00007fc4ad33bf2c: nop
  0x00007fc4ad33bf2d: nop
  0x00007fc4ad33bf2e: nop
  0x00007fc4ad33bf2f: callq  0x00007fc4ad045de0  ; OopMap{[80]=Oop [88]=Oop off=564}
                                                ;*invokespecial <init>
                                                ; - java.util.Arrays::copyOfRange@16 (line 3663)
                                                ;   {optimized virtual_call}
  0x00007fc4ad33bf34: mov    0x50(%rsp),%rax
  0x00007fc4ad33bf39: movabs $0x7fc4a97d4768,%rdx  ;   {metadata(method data for {method} {0x00007fc4a964dfb8} 'copyOfRange' '([CII)[C' in 'java/util/Arrays')}
  0x00007fc4ad33bf43: mov    0x8(%rax),%eax
  0x00007fc4ad33bf46: shl    $0x3,%rax
  0x00007fc4ad33bf4a: cmp    0x140(%rdx),%rax
  0x00007fc4ad33bf51: jne    0x00007fc4ad33bf60
  0x00007fc4ad33bf53: addq   $0x1,0x148(%rdx)
  0x00007fc4ad33bf5b: jmpq   0x00007fc4ad33bfc6
  0x00007fc4ad33bf60: cmp    0x150(%rdx),%rax
  0x00007fc4ad33bf67: jne    0x00007fc4ad33bf76
  0x00007fc4ad33bf69: addq   $0x1,0x158(%rdx)
  0x00007fc4ad33bf71: jmpq   0x00007fc4ad33bfc6
  0x00007fc4ad33bf76: cmpq   $0x0,0x140(%rdx)
  0x00007fc4ad33bf81: jne    0x00007fc4ad33bf9a
  0x00007fc4ad33bf83: mov    %rax,0x140(%rdx)
  0x00007fc4ad33bf8a: movq   $0x1,0x148(%rdx)
  0x00007fc4ad33bf95: jmpq   0x00007fc4ad33bfc6
  0x00007fc4ad33bf9a: cmpq   $0x0,0x150(%rdx)
  0x00007fc4ad33bfa5: jne    0x00007fc4ad33bfbe
  0x00007fc4ad33bfa7: mov    %rax,0x150(%rdx)
  0x00007fc4ad33bfae: movq   $0x1,0x158(%rdx)
  0x00007fc4ad33bfb9: jmpq   0x00007fc4ad33bfc6
  0x00007fc4ad33bfbe: addq   $0x1,0x138(%rdx)
  0x00007fc4ad33bfc6: mov    0x40(%rsp),%edx
  0x00007fc4ad33bfca: mov    0x50(%rsp),%rsi    ;*invokevirtual append
                                                ; - java.util.Arrays::copyOfRange@20 (line 3663)

  0x00007fc4ad33bfcf: callq  0x00007fc4ad045de0  ; OopMap{[88]=Oop off=724}
                                                ;*invokevirtual append
                                                ; - java.util.Arrays::copyOfRange@20 (line 3663)
                                                ;   {optimized virtual_call}
  0x00007fc4ad33bfd4: cmp    (%rax),%rax        ; implicit exception: dispatches to 0x00007fc4ad33c260
  0x00007fc4ad33bfd7: mov    %rax,%rdx
  0x00007fc4ad33bfda: movabs $0x7fc4a97d4768,%rsi  ;   {metadata(method data for {method} {0x00007fc4a964dfb8} 'copyOfRange' '([CII)[C' in 'java/util/Arrays')}
  0x00007fc4ad33bfe4: mov    0x8(%rdx),%edx
  0x00007fc4ad33bfe7: shl    $0x3,%rdx
  0x00007fc4ad33bfeb: cmp    0x170(%rsi),%rdx
  0x00007fc4ad33bff2: jne    0x00007fc4ad33c001
  0x00007fc4ad33bff4: addq   $0x1,0x178(%rsi)
  0x00007fc4ad33bffc: jmpq   0x00007fc4ad33c067
  0x00007fc4ad33c001: cmp    0x180(%rsi),%rdx
  0x00007fc4ad33c008: jne    0x00007fc4ad33c017
  0x00007fc4ad33c00a: addq   $0x1,0x188(%rsi)
  0x00007fc4ad33c012: jmpq   0x00007fc4ad33c067
  0x00007fc4ad33c017: cmpq   $0x0,0x170(%rsi)
  0x00007fc4ad33c022: jne    0x00007fc4ad33c03b
  0x00007fc4ad33c024: mov    %rdx,0x170(%rsi)
  0x00007fc4ad33c02b: movq   $0x1,0x178(%rsi)
  0x00007fc4ad33c036: jmpq   0x00007fc4ad33c067
  0x00007fc4ad33c03b: cmpq   $0x0,0x180(%rsi)
  0x00007fc4ad33c046: jne    0x00007fc4ad33c05f
  0x00007fc4ad33c048: mov    %rdx,0x180(%rsi)
  0x00007fc4ad33c04f: movq   $0x1,0x188(%rsi)
  0x00007fc4ad33c05a: jmpq   0x00007fc4ad33c067
  0x00007fc4ad33c05f: addq   $0x1,0x168(%rsi)
  0x00007fc4ad33c067: movabs $0x6b510a3f8,%rdx  ;   {oop(" > ")}
  0x00007fc4ad33c071: mov    %rax,%rsi          ;*invokevirtual append
                                                ; - java.util.Arrays::copyOfRange@25 (line 3663)

  0x00007fc4ad33c074: nop
  0x00007fc4ad33c075: nop
  0x00007fc4ad33c076: nop
  0x00007fc4ad33c077: callq  0x00007fc4ad045de0  ; OopMap{[88]=Oop off=892}
                                                ;*invokevirtual append
                                                ; - java.util.Arrays::copyOfRange@25 (line 3663)
                                                ;   {optimized virtual_call}
  0x00007fc4ad33c07c: cmp    (%rax),%rax        ; implicit exception: dispatches to 0x00007fc4ad33c265
  0x00007fc4ad33c07f: mov    %rax,%rdx
  0x00007fc4ad33c082: movabs $0x7fc4a97d4768,%rsi  ;   {metadata(method data for {method} {0x00007fc4a964dfb8} 'copyOfRange' '([CII)[C' in 'java/util/Arrays')}
  0x00007fc4ad33c08c: mov    0x8(%rdx),%edx
  0x00007fc4ad33c08f: shl    $0x3,%rdx
  0x00007fc4ad33c093: cmp    0x1a0(%rsi),%rdx
  0x00007fc4ad33c09a: jne    0x00007fc4ad33c0a9
  0x00007fc4ad33c09c: addq   $0x1,0x1a8(%rsi)
  0x00007fc4ad33c0a4: jmpq   0x00007fc4ad33c10f
  0x00007fc4ad33c0a9: cmp    0x1b0(%rsi),%rdx
  0x00007fc4ad33c0b0: jne    0x00007fc4ad33c0bf
  0x00007fc4ad33c0b2: addq   $0x1,0x1b8(%rsi)
  0x00007fc4ad33c0ba: jmpq   0x00007fc4ad33c10f
  0x00007fc4ad33c0bf: cmpq   $0x0,0x1a0(%rsi)
  0x00007fc4ad33c0ca: jne    0x00007fc4ad33c0e3
  0x00007fc4ad33c0cc: mov    %rdx,0x1a0(%rsi)
  0x00007fc4ad33c0d3: movq   $0x1,0x1a8(%rsi)
  0x00007fc4ad33c0de: jmpq   0x00007fc4ad33c10f
  0x00007fc4ad33c0e3: cmpq   $0x0,0x1b0(%rsi)
  0x00007fc4ad33c0ee: jne    0x00007fc4ad33c107
  0x00007fc4ad33c0f0: mov    %rdx,0x1b0(%rsi)
  0x00007fc4ad33c0f7: movq   $0x1,0x1b8(%rsi)
  0x00007fc4ad33c102: jmpq   0x00007fc4ad33c10f
  0x00007fc4ad33c107: addq   $0x1,0x198(%rsi)
  0x00007fc4ad33c10f: mov    0x44(%rsp),%edx
  0x00007fc4ad33c113: mov    %rax,%rsi          ;*invokevirtual append
                                                ; - java.util.Arrays::copyOfRange@29 (line 3663)

  0x00007fc4ad33c116: nop
  0x00007fc4ad33c117: callq  0x00007fc4ad045de0  ; OopMap{[88]=Oop off=1052}
                                                ;*invokevirtual append
                                                ; - java.util.Arrays::copyOfRange@29 (line 3663)
                                                ;   {optimized virtual_call}
  0x00007fc4ad33c11c: cmp    (%rax),%rax        ; implicit exception: dispatches to 0x00007fc4ad33c26a
  0x00007fc4ad33c11f: mov    %rax,%rsi
  0x00007fc4ad33c122: movabs $0x7fc4a97d4768,%rdi  ;   {metadata(method data for {method} {0x00007fc4a964dfb8} 'copyOfRange' '([CII)[C' in 'java/util/Arrays')}
  0x00007fc4ad33c12c: mov    0x8(%rsi),%esi
  0x00007fc4ad33c12f: shl    $0x3,%rsi
  0x00007fc4ad33c133: cmp    0x1d0(%rdi),%rsi
  0x00007fc4ad33c13a: jne    0x00007fc4ad33c149
  0x00007fc4ad33c13c: addq   $0x1,0x1d8(%rdi)
  0x00007fc4ad33c144: jmpq   0x00007fc4ad33c1af
  0x00007fc4ad33c149: cmp    0x1e0(%rdi),%rsi
  0x00007fc4ad33c150: jne    0x00007fc4ad33c15f
  0x00007fc4ad33c152: addq   $0x1,0x1e8(%rdi)
  0x00007fc4ad33c15a: jmpq   0x00007fc4ad33c1af
  0x00007fc4ad33c15f: cmpq   $0x0,0x1d0(%rdi)
  0x00007fc4ad33c16a: jne    0x00007fc4ad33c183
  0x00007fc4ad33c16c: mov    %rsi,0x1d0(%rdi)
  0x00007fc4ad33c173: movq   $0x1,0x1d8(%rdi)
  0x00007fc4ad33c17e: jmpq   0x00007fc4ad33c1af
  0x00007fc4ad33c183: cmpq   $0x0,0x1e0(%rdi)
  0x00007fc4ad33c18e: jne    0x00007fc4ad33c1a7
  0x00007fc4ad33c190: mov    %rsi,0x1e0(%rdi)
  0x00007fc4ad33c197: movq   $0x1,0x1e8(%rdi)
  0x00007fc4ad33c1a2: jmpq   0x00007fc4ad33c1af
  0x00007fc4ad33c1a7: addq   $0x1,0x1c8(%rdi)
  0x00007fc4ad33c1af: mov    %rax,%rsi          ;*invokevirtual toString
                                                ; - java.util.Arrays::copyOfRange@32 (line 3663)

  0x00007fc4ad33c1b2: nop
  0x00007fc4ad33c1b3: nop
  0x00007fc4ad33c1b4: nop
  0x00007fc4ad33c1b5: nop
  0x00007fc4ad33c1b6: nop
  0x00007fc4ad33c1b7: callq  0x00007fc4ad045de0  ; OopMap{[88]=Oop off=1212}
                                                ;*invokevirtual toString
                                                ; - java.util.Arrays::copyOfRange@32 (line 3663)
                                                ;   {optimized virtual_call}
  0x00007fc4ad33c1bc: mov    0x58(%rsp),%rdx
  0x00007fc4ad33c1c1: movabs $0x7fc4a97d4768,%rsi  ;   {metadata(method data for {method} {0x00007fc4a964dfb8} 'copyOfRange' '([CII)[C' in 'java/util/Arrays')}
  0x00007fc4ad33c1cb: addq   $0x1,0x1f8(%rsi)
  0x00007fc4ad33c1d3: mov    %rax,%rdx
  0x00007fc4ad33c1d6: mov    0x58(%rsp),%rsi    ;*invokespecial <init>
                                                ; - java.util.Arrays::copyOfRange@35 (line 3663)

  0x00007fc4ad33c1db: nop
  0x00007fc4ad33c1dc: nop
  0x00007fc4ad33c1dd: nop
  0x00007fc4ad33c1de: nop
  0x00007fc4ad33c1df: callq  0x00007fc4ad045de0  ; OopMap{[88]=Oop off=1252}
                                                ;*invokespecial <init>
                                                ; - java.util.Arrays::copyOfRange@35 (line 3663)
                                                ;   {optimized virtual_call}
  0x00007fc4ad33c1e4: mov    0x58(%rsp),%rax
  0x00007fc4ad33c1e9: jmpq   0x00007fc4ad33c29a
  0x00007fc4ad33c1ee: mov    %rbx,0x8(%rsp)
  0x00007fc4ad33c1f3: movq   $0xffffffffffffffff,(%rsp)
  0x00007fc4ad33c1fb: callq  0x00007fc4ad18f560  ; OopMap{rsi=Oop off=1280}
                                                ;*synchronization entry
                                                ; - java.util.Arrays::copyOfRange@-1 (line 3661)
                                                ;   {runtime_call}
  0x00007fc4ad33c200: jmpq   0x00007fc4ad33bd42
  0x00007fc4ad33c205: callq  0x00007fc4ad0fee20  ; OopMap{r11=Oop off=1290}
                                                ;*newarray
                                                ; - java.util.Arrays::copyOfRange@40 (line 3664)
                                                ;   {runtime_call}
  0x00007fc4ad33c20a: jmpq   0x00007fc4ad33be02
  0x00007fc4ad33c20f: callq  0x00007fc4ad0fddc0  ; OopMap{r11=Oop rax=Oop off=1300}
                                                ;*arraylength
                                                ; - java.util.Arrays::copyOfRange@50 (line 3665)
                                                ;   {runtime_call}
  0x00007fc4ad33c214: movabs $0x0,%rdx          ;   {metadata(NULL)}
  0x00007fc4ad33c21e: mov    $0xa050f00,%eax
  0x00007fc4ad33c223: callq  0x00007fc4ad18e460  ; OopMap{off=1320}
                                                ;*new  ; - java.util.Arrays::copyOfRange@8 (line 3663)
                                                ;   {runtime_call}
  0x00007fc4ad33c228: jmpq   0x00007fc4ad33be80
  0x00007fc4ad33c22d: mov    %rdx,%rdx
  0x00007fc4ad33c230: callq  0x00007fc4ad0fe520  ; OopMap{off=1333}
                                                ;*new  ; - java.util.Arrays::copyOfRange@8 (line 3663)
                                                ;   {runtime_call}
  0x00007fc4ad33c235: jmpq   0x00007fc4ad33bec5
  0x00007fc4ad33c23a: movabs $0x0,%rdx          ;   {metadata(NULL)}
  0x00007fc4ad33c244: mov    $0xa050f00,%eax
  0x00007fc4ad33c249: callq  0x00007fc4ad18e460  ; OopMap{rax=Oop off=1358}
                                                ;*new  ; - java.util.Arrays::copyOfRange@12 (line 3663)
                                                ;   {runtime_call}
  0x00007fc4ad33c24e: jmpq   0x00007fc4ad33bec8
  0x00007fc4ad33c253: mov    %rdx,%rdx
  0x00007fc4ad33c256: callq  0x00007fc4ad0fe520  ; OopMap{[88]=Oop off=1371}
                                                ;*new  ; - java.util.Arrays::copyOfRange@12 (line 3663)
                                                ;   {runtime_call}
  0x00007fc4ad33c25b: jmpq   0x00007fc4ad33bf0e
  0x00007fc4ad33c260: callq  0x00007fc4ad0fddc0  ; OopMap{[88]=Oop rax=Oop off=1381}
                                                ;*invokevirtual append
                                                ; - java.util.Arrays::copyOfRange@25 (line 3663)
                                                ;   {runtime_call}
  0x00007fc4ad33c265: callq  0x00007fc4ad0fddc0  ; OopMap{[88]=Oop rax=Oop off=1386}
                                                ;*invokevirtual append
                                                ; - java.util.Arrays::copyOfRange@29 (line 3663)
                                                ;   {runtime_call}
  0x00007fc4ad33c26a: callq  0x00007fc4ad0fddc0  ; OopMap{[88]=Oop rax=Oop off=1391}
                                                ;*invokevirtual toString
                                                ; - java.util.Arrays::copyOfRange@32 (line 3663)
                                                ;   {runtime_call}
  0x00007fc4ad33c26f: nop
  0x00007fc4ad33c270: nop
  0x00007fc4ad33c271: mov    0x300(%r15),%rax
  0x00007fc4ad33c278: movabs $0x0,%r10
  0x00007fc4ad33c282: mov    %r10,0x300(%r15)
  0x00007fc4ad33c289: movabs $0x0,%r10
  0x00007fc4ad33c293: mov    %r10,0x308(%r15)
  0x00007fc4ad33c29a: add    $0x70,%rsp
  0x00007fc4ad33c29e: pop    %rbp
  0x00007fc4ad33c29f: jmpq   0x00007fc4ad070820  ;   {runtime_call}
  0x00007fc4ad33c2a4: hlt    
  0x00007fc4ad33c2a5: hlt    
  0x00007fc4ad33c2a6: hlt    
  0x00007fc4ad33c2a7: hlt    
  0x00007fc4ad33c2a8: hlt    
  0x00007fc4ad33c2a9: hlt    
  0x00007fc4ad33c2aa: hlt    
  0x00007fc4ad33c2ab: hlt    
  0x00007fc4ad33c2ac: hlt    
  0x00007fc4ad33c2ad: hlt    
  0x00007fc4ad33c2ae: hlt    
  0x00007fc4ad33c2af: hlt    
  0x00007fc4ad33c2b0: hlt    
  0x00007fc4ad33c2b1: hlt    
  0x00007fc4ad33c2b2: hlt    
  0x00007fc4ad33c2b3: hlt    
  0x00007fc4ad33c2b4: hlt    
  0x00007fc4ad33c2b5: hlt    
  0x00007fc4ad33c2b6: hlt    
  0x00007fc4ad33c2b7: hlt    
  0x00007fc4ad33c2b8: hlt    
  0x00007fc4ad33c2b9: hlt    
  0x00007fc4ad33c2ba: hlt    
  0x00007fc4ad33c2bb: hlt    
  0x00007fc4ad33c2bc: hlt    
  0x00007fc4ad33c2bd: hlt    
  0x00007fc4ad33c2be: hlt    
  0x00007fc4ad33c2bf: hlt    
[Stub Code]
  0x00007fc4ad33c2c0: nop                       ;   {no_reloc}
  0x00007fc4ad33c2c1: nop
  0x00007fc4ad33c2c2: nop
  0x00007fc4ad33c2c3: nop
  0x00007fc4ad33c2c4: nop
  0x00007fc4ad33c2c5: movabs $0x0,%rbx          ;   {static_stub}
  0x00007fc4ad33c2cf: jmpq   0x00007fc4ad33c2cf  ;   {runtime_call}
  0x00007fc4ad33c2d4: nop
  0x00007fc4ad33c2d5: movabs $0x0,%rbx          ;   {static_stub}
  0x00007fc4ad33c2df: jmpq   0x00007fc4ad33c2df  ;   {runtime_call}
  0x00007fc4ad33c2e4: nop
  0x00007fc4ad33c2e5: movabs $0x0,%rbx          ;   {static_stub}
  0x00007fc4ad33c2ef: jmpq   0x00007fc4ad33c2ef  ;   {runtime_call}
  0x00007fc4ad33c2f4: nop
  0x00007fc4ad33c2f5: movabs $0x0,%rbx          ;   {static_stub}
  0x00007fc4ad33c2ff: jmpq   0x00007fc4ad33c2ff  ;   {runtime_call}
  0x00007fc4ad33c304: nop
  0x00007fc4ad33c305: movabs $0x0,%rbx          ;   {static_stub}
  0x00007fc4ad33c30f: jmpq   0x00007fc4ad33c30f  ;   {runtime_call}
  0x00007fc4ad33c314: nop
  0x00007fc4ad33c315: movabs $0x0,%rbx          ;   {static_stub}
  0x00007fc4ad33c31f: jmpq   0x00007fc4ad33c31f  ;   {runtime_call}
  0x00007fc4ad33c324: nop
  0x00007fc4ad33c325: movabs $0x0,%rbx          ;   {static_stub}
  0x00007fc4ad33c32f: jmpq   0x00007fc4ad33c32f  ;   {runtime_call}
  0x00007fc4ad33c334: nop
  0x00007fc4ad33c335: movabs $0x0,%rbx          ;   {static_stub}
  0x00007fc4ad33c33f: jmpq   0x00007fc4ad33c33f  ;   {runtime_call}
[Exception Handler]
  0x00007fc4ad33c344: callq  0x00007fc4ad070160  ;   {runtime_call}
  0x00007fc4ad33c349: mov    %rsp,-0x28(%rsp)
  0x00007fc4ad33c34e: sub    $0x80,%rsp
  0x00007fc4ad33c355: mov    %rax,0x78(%rsp)
  0x00007fc4ad33c35a: mov    %rcx,0x70(%rsp)
  0x00007fc4ad33c35f: mov    %rdx,0x68(%rsp)
  0x00007fc4ad33c364: mov    %rbx,0x60(%rsp)
  0x00007fc4ad33c369: mov    %rbp,0x50(%rsp)
  0x00007fc4ad33c36e: mov    %rsi,0x48(%rsp)
  0x00007fc4ad33c373: mov    %rdi,0x40(%rsp)
  0x00007fc4ad33c378: mov    %r8,0x38(%rsp)
  0x00007fc4ad33c37d: mov    %r9,0x30(%rsp)
  0x00007fc4ad33c382: mov    %r10,0x28(%rsp)
  0x00007fc4ad33c387: mov    %r11,0x20(%rsp)
  0x00007fc4ad33c38c: mov    %r12,0x18(%rsp)
  0x00007fc4ad33c391: mov    %r13,0x10(%rsp)
  0x00007fc4ad33c396: mov    %r14,0x8(%rsp)
  0x00007fc4ad33c39b: mov    %r15,(%rsp)
  0x00007fc4ad33c39f: movabs $0x7fc4c3c3b49e,%rdi  ;   {external_word}
  0x00007fc4ad33c3a9: movabs $0x7fc4ad33c349,%rsi  ;   {internal_word}
  0x00007fc4ad33c3b3: mov    %rsp,%rdx
  0x00007fc4ad33c3b6: and    $0xfffffffffffffff0,%rsp
  0x00007fc4ad33c3ba: callq  0x00007fc4c3961460  ;   {runtime_call}
  0x00007fc4ad33c3bf: hlt    
[Deopt Handler Code]
  0x00007fc4ad33c3c0: movabs $0x7fc4ad33c3c0,%r10  ;   {section_word}
  0x00007fc4ad33c3ca: push   %r10
  0x00007fc4ad33c3cc: jmpq   0x00007fc4ad046e40  ;   {runtime_call}
  0x00007fc4ad33c3d1: hlt    
  0x00007fc4ad33c3d2: hlt    
  0x00007fc4ad33c3d3: hlt    
  0x00007fc4ad33c3d4: hlt    
  0x00007fc4ad33c3d5: hlt    
  0x00007fc4ad33c3d6: hlt    
  0x00007fc4ad33c3d7: hlt    
Decoding compiled method 0x00007fc4ad346c10:
Code:
[Entry Point]
[Constants]
  # {method} {0x00007fc4a9536df8} 'startsWith' '(Ljava/lang/String;I)Z' in 'java/lang/String'
  # this:     rsi:rsi   = 'java/lang/String'
  # parm0:    rdx:rdx   = 'java/lang/String'
  # parm1:    rcx       = int
  #           [sp+0x40]  (sp of caller)
  0x00007fc4ad346d80: mov    0x8(%rsi),%r10d
  0x00007fc4ad346d84: shl    $0x3,%r10
  0x00007fc4ad346d88: cmp    %rax,%r10
  0x00007fc4ad346d8b: jne    0x00007fc4ad045ba0  ;   {runtime_call}
  0x00007fc4ad346d91: nopl   0x0(%rax,%rax,1)
  0x00007fc4ad346d99: nopl   0x0(%rax)
[Verified Entry Point]
  0x00007fc4ad346da0: mov    %eax,-0x14000(%rsp)
  0x00007fc4ad346da7: push   %rbp
  0x00007fc4ad346da8: sub    $0x30,%rsp
  0x00007fc4ad346dac: movabs $0x7fc4a97d4b50,%rax  ;   {metadata(method data for {method} {0x00007fc4a9536df8} 'startsWith' '(Ljava/lang/String;I)Z' in 'java/lang/String')}
  0x00007fc4ad346db6: mov    0xdc(%rax),%edi
  0x00007fc4ad346dbc: add    $0x8,%edi
  0x00007fc4ad346dbf: mov    %edi,0xdc(%rax)
  0x00007fc4ad346dc5: movabs $0x7fc4a9536df8,%rax  ;   {metadata({method} {0x00007fc4a9536df8} 'startsWith' '(Ljava/lang/String;I)Z' in 'java/lang/String')}
  0x00007fc4ad346dcf: and    $0x1ff8,%edi
  0x00007fc4ad346dd5: cmp    $0x0,%edi
  0x00007fc4ad346dd8: je     0x00007fc4ad346f8d  ;*aload_0
                                                ; - java.lang.String::startsWith@0 (line 1403)

  0x00007fc4ad346dde: mov    0xc(%rsi),%eax
  0x00007fc4ad346de1: shl    $0x3,%rax          ;*getfield value
                                                ; - java.lang.String::startsWith@1 (line 1403)

  0x00007fc4ad346de5: mov    0xc(%rdx),%esi     ; implicit exception: dispatches to 0x00007fc4ad346fa4
  0x00007fc4ad346de8: shl    $0x3,%rsi          ;*getfield value
                                                ; - java.lang.String::startsWith@9 (line 1405)

  0x00007fc4ad346dec: mov    0xc(%rsi),%edi     ;*arraylength
                                                ; - java.lang.String::startsWith@21 (line 1407)
                                                ; implicit exception: dispatches to 0x00007fc4ad346fa9
  0x00007fc4ad346def: cmp    $0x0,%ecx
  0x00007fc4ad346df2: movabs $0x7fc4a97d4b50,%rbx  ;   {metadata(method data for {method} {0x00007fc4a9536df8} 'startsWith' '(Ljava/lang/String;I)Z' in 'java/lang/String')}
  0x00007fc4ad346dfc: movabs $0x108,%rdx
  0x00007fc4ad346e06: jl     0x00007fc4ad346e16
  0x00007fc4ad346e0c: movabs $0x118,%rdx
  0x00007fc4ad346e16: mov    (%rbx,%rdx,1),%r8
  0x00007fc4ad346e1a: lea    0x1(%r8),%r8
  0x00007fc4ad346e1e: mov    %r8,(%rbx,%rdx,1)
  0x00007fc4ad346e22: jl     0x00007fc4ad346f5a  ;*iflt
                                                ; - java.lang.String::startsWith@25 (line 1409)

  0x00007fc4ad346e28: mov    0xc(%rax),%ebx     ;*arraylength
                                                ; - java.lang.String::startsWith@33 (line 1409)
                                                ; implicit exception: dispatches to 0x00007fc4ad346fae
  0x00007fc4ad346e2b: sub    %edi,%ebx
  0x00007fc4ad346e2d: cmp    %ebx,%ecx
  0x00007fc4ad346e2f: movabs $0x7fc4a97d4b50,%rbx  ;   {metadata(method data for {method} {0x00007fc4a9536df8} 'startsWith' '(Ljava/lang/String;I)Z' in 'java/lang/String')}
  0x00007fc4ad346e39: movabs $0x128,%rdx
  0x00007fc4ad346e43: jle    0x00007fc4ad346e53
  0x00007fc4ad346e49: movabs $0x138,%rdx
  0x00007fc4ad346e53: mov    (%rbx,%rdx,1),%r8
  0x00007fc4ad346e57: lea    0x1(%r8),%r8
  0x00007fc4ad346e5b: mov    %r8,(%rbx,%rdx,1)
  0x00007fc4ad346e5f: jg     0x00007fc4ad346f5a  ;*if_icmple
                                                ; - java.lang.String::startsWith@37 (line 1409)

  0x00007fc4ad346e65: mov    $0x0,%ebx
  0x00007fc4ad346e6a: jmpq   0x00007fc4ad346f1a  ;*iinc
                                                ; - java.lang.String::startsWith@42 (line 1412)

  0x00007fc4ad346e6f: nop
  0x00007fc4ad346e70: mov    %rcx,%rdx
  0x00007fc4ad346e73: inc    %edx
  0x00007fc4ad346e75: movslq %ecx,%r8
  0x00007fc4ad346e78: cmp    0xc(%rax),%ecx
  0x00007fc4ad346e7b: jae    0x00007fc4ad346fb3
  0x00007fc4ad346e81: movzwl 0x10(%rax,%r8,2),%ecx  ;*caload
                                                ; - java.lang.String::startsWith@56 (line 1413)

  0x00007fc4ad346e87: mov    %rbx,%r8
  0x00007fc4ad346e8a: inc    %r8d
  0x00007fc4ad346e8d: movslq %ebx,%r9
  0x00007fc4ad346e90: cmp    0xc(%rsi),%ebx
  0x00007fc4ad346e93: jae    0x00007fc4ad346fbc
  0x00007fc4ad346e99: movzwl 0x10(%rsi,%r9,2),%ebx  ;*caload
                                                ; - java.lang.String::startsWith@64 (line 1413)

  0x00007fc4ad346e9f: movabs $0x7fc4a97d4b50,%r9  ;   {metadata(method data for {method} {0x00007fc4a9536df8} 'startsWith' '(Ljava/lang/String;I)Z' in 'java/lang/String')}
  0x00007fc4ad346ea9: mov    0xe0(%r9),%r11d
  0x00007fc4ad346eb0: add    $0x8,%r11d
  0x00007fc4ad346eb4: mov    %r11d,0xe0(%r9)
  0x00007fc4ad346ebb: movabs $0x7fc4a9536df8,%r9  ;   {metadata({method} {0x00007fc4a9536df8} 'startsWith' '(Ljava/lang/String;I)Z' in 'java/lang/String')}
  0x00007fc4ad346ec5: and    $0xfff8,%r11d
  0x00007fc4ad346ecc: cmp    $0x0,%r11d
  0x00007fc4ad346ed0: je     0x00007fc4ad346fc5  ; OopMap{rsi=Oop rax=Oop off=342}
                                                ;*if_icmpeq
                                                ; - java.lang.String::startsWith@65 (line 1413)

  0x00007fc4ad346ed6: test   %eax,0x16e06224(%rip)        # 0x00007fc4c414d100
                                                ;   {poll}
  0x00007fc4ad346edc: cmp    %ebx,%ecx
  0x00007fc4ad346ede: movabs $0x7fc4a97d4b50,%rbx  ;   {metadata(method data for {method} {0x00007fc4a9536df8} 'startsWith' '(Ljava/lang/String;I)Z' in 'java/lang/String')}
  0x00007fc4ad346ee8: movabs $0x168,%rcx
  0x00007fc4ad346ef2: je     0x00007fc4ad346f02
  0x00007fc4ad346ef8: movabs $0x178,%rcx
  0x00007fc4ad346f02: mov    (%rbx,%rcx,1),%r9
  0x00007fc4ad346f06: lea    0x1(%r9),%r9
  0x00007fc4ad346f0a: mov    %r9,(%rbx,%rcx,1)
  0x00007fc4ad346f0e: jne    0x00007fc4ad346f6b  ;*if_icmpeq
                                                ; - java.lang.String::startsWith@65 (line 1413)

  0x00007fc4ad346f14: mov    %r8,%rbx
  0x00007fc4ad346f17: mov    %rdx,%rcx          ;*iinc
                                                ; - java.lang.String::startsWith@42 (line 1412)

  0x00007fc4ad346f1a: dec    %edi
  0x00007fc4ad346f1c: cmp    $0x0,%edi
  0x00007fc4ad346f1f: movabs $0x7fc4a97d4b50,%rdx  ;   {metadata(method data for {method} {0x00007fc4a9536df8} 'startsWith' '(Ljava/lang/String;I)Z' in 'java/lang/String')}
  0x00007fc4ad346f29: movabs $0x148,%r8
  0x00007fc4ad346f33: jl     0x00007fc4ad346f43
  0x00007fc4ad346f39: movabs $0x158,%r8
  0x00007fc4ad346f43: mov    (%rdx,%r8,1),%r9
  0x00007fc4ad346f47: lea    0x1(%r9),%r9
  0x00007fc4ad346f4b: mov    %r9,(%rdx,%r8,1)
  0x00007fc4ad346f4f: jl     0x00007fc4ad346f7c
  0x00007fc4ad346f55: jmpq   0x00007fc4ad346e70  ;*iflt
                                                ; - java.lang.String::startsWith@47 (line 1412)

  0x00007fc4ad346f5a: mov    $0x0,%eax
  0x00007fc4ad346f5f: add    $0x30,%rsp
  0x00007fc4ad346f63: pop    %rbp
  0x00007fc4ad346f64: test   %eax,0x16e06196(%rip)        # 0x00007fc4c414d100
                                                ;   {poll_return}
  0x00007fc4ad346f6a: retq                      ;*ireturn
                                                ; - java.lang.String::startsWith@41 (line 1410)

  0x00007fc4ad346f6b: mov    $0x0,%eax
  0x00007fc4ad346f70: add    $0x30,%rsp
  0x00007fc4ad346f74: pop    %rbp
  0x00007fc4ad346f75: test   %eax,0x16e06185(%rip)        # 0x00007fc4c414d100
                                                ;   {poll_return}
  0x00007fc4ad346f7b: retq                      ;*ireturn
                                                ; - java.lang.String::startsWith@69 (line 1414)

  0x00007fc4ad346f7c: mov    $0x1,%eax
  0x00007fc4ad346f81: add    $0x30,%rsp
  0x00007fc4ad346f85: pop    %rbp
  0x00007fc4ad346f86: test   %eax,0x16e06174(%rip)        # 0x00007fc4c414d100
                                                ;   {poll_return}
  0x00007fc4ad346f8c: retq   
  0x00007fc4ad346f8d: mov    %rax,0x8(%rsp)
  0x00007fc4ad346f92: movq   $0xffffffffffffffff,(%rsp)
  0x00007fc4ad346f9a: callq  0x00007fc4ad18f560  ; OopMap{rsi=Oop rdx=Oop off=543}
                                                ;*synchronization entry
                                                ; - java.lang.String::startsWith@-1 (line 1403)
                                                ;   {runtime_call}
  0x00007fc4ad346f9f: jmpq   0x00007fc4ad346dde
  0x00007fc4ad346fa4: callq  0x00007fc4ad0fddc0  ; OopMap{rax=Oop off=553}
                                                ;*getfield value
                                                ; - java.lang.String::startsWith@9 (line 1405)
                                                ;   {runtime_call}
  0x00007fc4ad346fa9: callq  0x00007fc4ad0fddc0  ; OopMap{rax=Oop rsi=Oop off=558}
                                                ;*arraylength
                                                ; - java.lang.String::startsWith@21 (line 1407)
                                                ;   {runtime_call}
  0x00007fc4ad346fae: callq  0x00007fc4ad0fddc0  ; OopMap{rsi=Oop rax=Oop off=563}
                                                ;*arraylength
                                                ; - java.lang.String::startsWith@33 (line 1409)
                                                ;   {runtime_call}
  0x00007fc4ad346fb3: mov    %rcx,(%rsp)
  0x00007fc4ad346fb7: callq  0x00007fc4ad070380  ; OopMap{rsi=Oop rax=Oop off=572}
                                                ;*caload
                                                ; - java.lang.String::startsWith@56 (line 1413)
                                                ;   {runtime_call}
  0x00007fc4ad346fbc: mov    %rbx,(%rsp)
  0x00007fc4ad346fc0: callq  0x00007fc4ad070380  ; OopMap{rsi=Oop rax=Oop off=581}
                                                ;*caload
                                                ; - java.lang.String::startsWith@64 (line 1413)
                                                ;   {runtime_call}
  0x00007fc4ad346fc5: mov    %r9,0x8(%rsp)
  0x00007fc4ad346fca: movq   $0x41,(%rsp)
  0x00007fc4ad346fd2: callq  0x00007fc4ad18f560  ; OopMap{rsi=Oop rax=Oop off=599}
                                                ;*if_icmpeq
                                                ; - java.lang.String::startsWith@65 (line 1413)
                                                ;   {runtime_call}
  0x00007fc4ad346fd7: jmpq   0x00007fc4ad346ed6
  0x00007fc4ad346fdc: nop
  0x00007fc4ad346fdd: nop
  0x00007fc4ad346fde: mov    0x300(%r15),%rax
  0x00007fc4ad346fe5: movabs $0x0,%r10
  0x00007fc4ad346fef: mov    %r10,0x300(%r15)
  0x00007fc4ad346ff6: movabs $0x0,%r10
  0x00007fc4ad347000: mov    %r10,0x308(%r15)
  0x00007fc4ad347007: add    $0x30,%rsp
  0x00007fc4ad34700b: pop    %rbp
  0x00007fc4ad34700c: jmpq   0x00007fc4ad070820  ;   {runtime_call}
  0x00007fc4ad347011: hlt    
  0x00007fc4ad347012: hlt    
  0x00007fc4ad347013: hlt    
  0x00007fc4ad347014: hlt    
  0x00007fc4ad347015: hlt    
  0x00007fc4ad347016: hlt    
  0x00007fc4ad347017: hlt    
  0x00007fc4ad347018: hlt    
  0x00007fc4ad347019: hlt    
  0x00007fc4ad34701a: hlt    
  0x00007fc4ad34701b: hlt    
  0x00007fc4ad34701c: hlt    
  0x00007fc4ad34701d: hlt    
  0x00007fc4ad34701e: hlt    
  0x00007fc4ad34701f: hlt    
[Exception Handler]
[Stub Code]
  0x00007fc4ad347020: callq  0x00007fc4ad070160  ;   {no_reloc}
  0x00007fc4ad347025: mov    %rsp,-0x28(%rsp)
  0x00007fc4ad34702a: sub    $0x80,%rsp
  0x00007fc4ad347031: mov    %rax,0x78(%rsp)
  0x00007fc4ad347036: mov    %rcx,0x70(%rsp)
  0x00007fc4ad34703b: mov    %rdx,0x68(%rsp)
  0x00007fc4ad347040: mov    %rbx,0x60(%rsp)
  0x00007fc4ad347045: mov    %rbp,0x50(%rsp)
  0x00007fc4ad34704a: mov    %rsi,0x48(%rsp)
  0x00007fc4ad34704f: mov    %rdi,0x40(%rsp)
  0x00007fc4ad347054: mov    %r8,0x38(%rsp)
  0x00007fc4ad347059: mov    %r9,0x30(%rsp)
  0x00007fc4ad34705e: mov    %r10,0x28(%rsp)
  0x00007fc4ad347063: mov    %r11,0x20(%rsp)
  0x00007fc4ad347068: mov    %r12,0x18(%rsp)
  0x00007fc4ad34706d: mov    %r13,0x10(%rsp)
  0x00007fc4ad347072: mov    %r14,0x8(%rsp)
  0x00007fc4ad347077: mov    %r15,(%rsp)
  0x00007fc4ad34707b: movabs $0x7fc4c3c3b49e,%rdi  ;   {external_word}
  0x00007fc4ad347085: movabs $0x7fc4ad347025,%rsi  ;   {internal_word}
  0x00007fc4ad34708f: mov    %rsp,%rdx
  0x00007fc4ad347092: and    $0xfffffffffffffff0,%rsp
  0x00007fc4ad347096: callq  0x00007fc4c3961460  ;   {runtime_call}
  0x00007fc4ad34709b: hlt    
[Deopt Handler Code]
  0x00007fc4ad34709c: movabs $0x7fc4ad34709c,%r10  ;   {section_word}
  0x00007fc4ad3470a6: push   %r10
  0x00007fc4ad3470a8: jmpq   0x00007fc4ad046e40  ;   {runtime_call}
  0x00007fc4ad3470ad: hlt    
  0x00007fc4ad3470ae: hlt    
  0x00007fc4ad3470af: hlt    
Decoding compiled method 0x00007fc4ad33b7d0:
Code:
[Entry Point]
[Verified Entry Point]
[Constants]
  # {method} {0x00007fc4a9638010} 'access$400' '(Ljava/lang/ThreadLocal;)I' in 'java/lang/ThreadLocal'
  # parm0:    rsi:rsi   = 'java/lang/ThreadLocal'
  #           [sp+0x40]  (sp of caller)
  0x00007fc4ad33b920: mov    %eax,-0x14000(%rsp)
  0x00007fc4ad33b927: push   %rbp
  0x00007fc4ad33b928: sub    $0x30,%rsp         ;*aload_0
                                                ; - java.lang.ThreadLocal::access$400@0 (line 74)

  0x00007fc4ad33b92c: mov    0xc(%rsi),%eax     ;*getfield threadLocalHashCode
                                                ; - java.lang.ThreadLocal::access$400@1 (line 74)
                                                ; implicit exception: dispatches to 0x00007fc4ad33b93b
  0x00007fc4ad33b92f: add    $0x30,%rsp
  0x00007fc4ad33b933: pop    %rbp
  0x00007fc4ad33b934: test   %eax,0x16e117c6(%rip)        # 0x00007fc4c414d100
                                                ;   {poll_return}
  0x00007fc4ad33b93a: retq   
  0x00007fc4ad33b93b: callq  0x00007fc4ad0fddc0  ; OopMap{off=32}
                                                ;*getfield threadLocalHashCode
                                                ; - java.lang.ThreadLocal::access$400@1 (line 74)
                                                ;   {runtime_call}
  0x00007fc4ad33b940: nop
  0x00007fc4ad33b941: nop
  0x00007fc4ad33b942: mov    0x300(%r15),%rax
  0x00007fc4ad33b949: movabs $0x0,%r10
  0x00007fc4ad33b953: mov    %r10,0x300(%r15)
  0x00007fc4ad33b95a: movabs $0x0,%r10
  0x00007fc4ad33b964: mov    %r10,0x308(%r15)
  0x00007fc4ad33b96b: add    $0x30,%rsp
  0x00007fc4ad33b96f: pop    %rbp
  0x00007fc4ad33b970: jmpq   0x00007fc4ad070820  ;   {runtime_call}
  0x00007fc4ad33b975: hlt    
  0x00007fc4ad33b976: hlt    
  0x00007fc4ad33b977: hlt    
  0x00007fc4ad33b978: hlt    
  0x00007fc4ad33b979: hlt    
  0x00007fc4ad33b97a: hlt    
  0x00007fc4ad33b97b: hlt    
  0x00007fc4ad33b97c: hlt    
  0x00007fc4ad33b97d: hlt    
  0x00007fc4ad33b97e: hlt    
  0x00007fc4ad33b97f: hlt    
[Exception Handler]
[Stub Code]
  0x00007fc4ad33b980: callq  0x00007fc4ad070160  ;   {no_reloc}
  0x00007fc4ad33b985: mov    %rsp,-0x28(%rsp)
  0x00007fc4ad33b98a: sub    $0x80,%rsp
  0x00007fc4ad33b991: mov    %rax,0x78(%rsp)
  0x00007fc4ad33b996: mov    %rcx,0x70(%rsp)
  0x00007fc4ad33b99b: mov    %rdx,0x68(%rsp)
  0x00007fc4ad33b9a0: mov    %rbx,0x60(%rsp)
  0x00007fc4ad33b9a5: mov    %rbp,0x50(%rsp)
  0x00007fc4ad33b9aa: mov    %rsi,0x48(%rsp)
  0x00007fc4ad33b9af: mov    %rdi,0x40(%rsp)
  0x00007fc4ad33b9b4: mov    %r8,0x38(%rsp)
  0x00007fc4ad33b9b9: mov    %r9,0x30(%rsp)
  0x00007fc4ad33b9be: mov    %r10,0x28(%rsp)
  0x00007fc4ad33b9c3: mov    %r11,0x20(%rsp)
  0x00007fc4ad33b9c8: mov    %r12,0x18(%rsp)
  0x00007fc4ad33b9cd: mov    %r13,0x10(%rsp)
  0x00007fc4ad33b9d2: mov    %r14,0x8(%rsp)
  0x00007fc4ad33b9d7: mov    %r15,(%rsp)
  0x00007fc4ad33b9db: movabs $0x7fc4c3c3b49e,%rdi  ;   {external_word}
  0x00007fc4ad33b9e5: movabs $0x7fc4ad33b985,%rsi  ;   {internal_word}
  0x00007fc4ad33b9ef: mov    %rsp,%rdx
  0x00007fc4ad33b9f2: and    $0xfffffffffffffff0,%rsp
  0x00007fc4ad33b9f6: callq  0x00007fc4c3961460  ;   {runtime_call}
  0x00007fc4ad33b9fb: hlt    
[Deopt Handler Code]
  0x00007fc4ad33b9fc: movabs $0x7fc4ad33b9fc,%r10  ;   {section_word}
  0x00007fc4ad33ba06: push   %r10
  0x00007fc4ad33ba08: jmpq   0x00007fc4ad046e40  ;   {runtime_call}
  0x00007fc4ad33ba0d: hlt    
  0x00007fc4ad33ba0e: hlt    
  0x00007fc4ad33ba0f: hlt    
Decoding compiled method 0x00007fc4ad345450:
Code:
[Entry Point]
[Constants]
  # {method} {0x00007fc4a9637da8} 'getMap' '(Ljava/lang/Thread;)Ljava/lang/ThreadLocal$ThreadLocalMap;' in 'java/lang/ThreadLocal'
  # this:     rsi:rsi   = 'java/lang/ThreadLocal'
  # parm0:    rdx:rdx   = 'java/lang/Thread'
  #           [sp+0x40]  (sp of caller)
  0x00007fc4ad3455c0: mov    0x8(%rsi),%r10d
  0x00007fc4ad3455c4: shl    $0x3,%r10
  0x00007fc4ad3455c8: cmp    %rax,%r10
  0x00007fc4ad3455cb: jne    0x00007fc4ad045ba0  ;   {runtime_call}
  0x00007fc4ad3455d1: nopl   0x0(%rax,%rax,1)
  0x00007fc4ad3455d9: nopl   0x0(%rax)
[Verified Entry Point]
  0x00007fc4ad3455e0: mov    %eax,-0x14000(%rsp)
  0x00007fc4ad3455e7: push   %rbp
  0x00007fc4ad3455e8: sub    $0x30,%rsp
  0x00007fc4ad3455ec: movabs $0x7fc4a97d8598,%rax  ;   {metadata(method data for {method} {0x00007fc4a9637da8} 'getMap' '(Ljava/lang/Thread;)Ljava/lang/ThreadLocal$ThreadLocalMap;' in 'java/lang/ThreadLocal')}
  0x00007fc4ad3455f6: mov    0xdc(%rax),%edi
  0x00007fc4ad3455fc: add    $0x8,%edi
  0x00007fc4ad3455ff: mov    %edi,0xdc(%rax)
  0x00007fc4ad345605: movabs $0x7fc4a9637da8,%rax  ;   {metadata({method} {0x00007fc4a9637da8} 'getMap' '(Ljava/lang/Thread;)Ljava/lang/ThreadLocal$ThreadLocalMap;' in 'java/lang/ThreadLocal')}
  0x00007fc4ad34560f: and    $0x1ff8,%edi
  0x00007fc4ad345615: cmp    $0x0,%edi
  0x00007fc4ad345618: je     0x00007fc4ad345631  ;*aload_1
                                                ; - java.lang.ThreadLocal::getMap@0 (line 233)

  0x00007fc4ad34561e: mov    0x50(%rdx),%eax    ; implicit exception: dispatches to 0x00007fc4ad345645
  0x00007fc4ad345621: shl    $0x3,%rax          ;*getfield threadLocals
                                                ; - java.lang.ThreadLocal::getMap@1 (line 233)

  0x00007fc4ad345625: add    $0x30,%rsp
  0x00007fc4ad345629: pop    %rbp
  0x00007fc4ad34562a: test   %eax,0x16e07ad0(%rip)        # 0x00007fc4c414d100
                                                ;   {poll_return}
  0x00007fc4ad345630: retq   
  0x00007fc4ad345631: mov    %rax,0x8(%rsp)
  0x00007fc4ad345636: movq   $0xffffffffffffffff,(%rsp)
  0x00007fc4ad34563e: callq  0x00007fc4ad18f560  ; OopMap{rsi=Oop rdx=Oop off=131}
                                                ;*synchronization entry
                                                ; - java.lang.ThreadLocal::getMap@-1 (line 233)
                                                ;   {runtime_call}
  0x00007fc4ad345643: jmp    0x00007fc4ad34561e
  0x00007fc4ad345645: callq  0x00007fc4ad0fddc0  ; OopMap{off=138}
                                                ;*getfield threadLocals
                                                ; - java.lang.ThreadLocal::getMap@1 (line 233)
                                                ;   {runtime_call}
  0x00007fc4ad34564a: nop
  0x00007fc4ad34564b: nop
  0x00007fc4ad34564c: mov    0x300(%r15),%rax
  0x00007fc4ad345653: movabs $0x0,%r10
  0x00007fc4ad34565d: mov    %r10,0x300(%r15)
  0x00007fc4ad345664: movabs $0x0,%r10
  0x00007fc4ad34566e: mov    %r10,0x308(%r15)
  0x00007fc4ad345675: add    $0x30,%rsp
  0x00007fc4ad345679: pop    %rbp
  0x00007fc4ad34567a: jmpq   0x00007fc4ad070820  ;   {runtime_call}
  0x00007fc4ad34567f: hlt    
[Exception Handler]
[Stub Code]
  0x00007fc4ad345680: callq  0x00007fc4ad070160  ;   {no_reloc}
  0x00007fc4ad345685: mov    %rsp,-0x28(%rsp)
  0x00007fc4ad34568a: sub    $0x80,%rsp
  0x00007fc4ad345691: mov    %rax,0x78(%rsp)
  0x00007fc4ad345696: mov    %rcx,0x70(%rsp)
  0x00007fc4ad34569b: mov    %rdx,0x68(%rsp)
  0x00007fc4ad3456a0: mov    %rbx,0x60(%rsp)
  0x00007fc4ad3456a5: mov    %rbp,0x50(%rsp)
  0x00007fc4ad3456aa: mov    %rsi,0x48(%rsp)
  0x00007fc4ad3456af: mov    %rdi,0x40(%rsp)
  0x00007fc4ad3456b4: mov    %r8,0x38(%rsp)
  0x00007fc4ad3456b9: mov    %r9,0x30(%rsp)
  0x00007fc4ad3456be: mov    %r10,0x28(%rsp)
  0x00007fc4ad3456c3: mov    %r11,0x20(%rsp)
  0x00007fc4ad3456c8: mov    %r12,0x18(%rsp)
  0x00007fc4ad3456cd: mov    %r13,0x10(%rsp)
  0x00007fc4ad3456d2: mov    %r14,0x8(%rsp)
  0x00007fc4ad3456d7: mov    %r15,(%rsp)
  0x00007fc4ad3456db: movabs $0x7fc4c3c3b49e,%rdi  ;   {external_word}
  0x00007fc4ad3456e5: movabs $0x7fc4ad345685,%rsi  ;   {internal_word}
  0x00007fc4ad3456ef: mov    %rsp,%rdx
  0x00007fc4ad3456f2: and    $0xfffffffffffffff0,%rsp
  0x00007fc4ad3456f6: callq  0x00007fc4c3961460  ;   {runtime_call}
  0x00007fc4ad3456fb: hlt    
[Deopt Handler Code]
  0x00007fc4ad3456fc: movabs $0x7fc4ad3456fc,%r10  ;   {section_word}
  0x00007fc4ad345706: push   %r10
  0x00007fc4ad345708: jmpq   0x00007fc4ad046e40  ;   {runtime_call}
  0x00007fc4ad34570d: hlt    
  0x00007fc4ad34570e: hlt    
  0x00007fc4ad34570f: hlt    
Decoding compiled method 0x00007fc4ad347350:
Code:
[Entry Point]
[Constants]
  # {method} {0x00007fc4a9537098} 'indexOf' '(I)I' in 'java/lang/String'
  # this:     rsi:rsi   = 'java/lang/String'
  # parm0:    rdx       = int
  #           [sp+0x40]  (sp of caller)
  0x00007fc4ad3474c0: mov    0x8(%rsi),%r10d
  0x00007fc4ad3474c4: shl    $0x3,%r10
  0x00007fc4ad3474c8: cmp    %rax,%r10
  0x00007fc4ad3474cb: jne    0x00007fc4ad045ba0  ;   {runtime_call}
  0x00007fc4ad3474d1: nopl   0x0(%rax,%rax,1)
  0x00007fc4ad3474d9: nopl   0x0(%rax)
[Verified Entry Point]
  0x00007fc4ad3474e0: mov    %eax,-0x14000(%rsp)
  0x00007fc4ad3474e7: push   %rbp
  0x00007fc4ad3474e8: sub    $0x30,%rsp
  0x00007fc4ad3474ec: movabs $0x7fc4a97d5bf8,%rcx  ;   {metadata(method data for {method} {0x00007fc4a9537098} 'indexOf' '(I)I' in 'java/lang/String')}
  0x00007fc4ad3474f6: mov    0xdc(%rcx),%edi
  0x00007fc4ad3474fc: add    $0x8,%edi
  0x00007fc4ad3474ff: mov    %edi,0xdc(%rcx)
  0x00007fc4ad347505: movabs $0x7fc4a9537098,%rcx  ;   {metadata({method} {0x00007fc4a9537098} 'indexOf' '(I)I' in 'java/lang/String')}
  0x00007fc4ad34750f: and    $0x1ff8,%edi
  0x00007fc4ad347515: cmp    $0x0,%edi
  0x00007fc4ad347518: je     0x00007fc4ad3475c8  ;*aload_0
                                                ; - java.lang.String::indexOf@0 (line 1503)

  0x00007fc4ad34751e: mov    %rsi,%rcx
  0x00007fc4ad347521: movabs $0x7fc4a97d5bf8,%rdi  ;   {metadata(method data for {method} {0x00007fc4a9537098} 'indexOf' '(I)I' in 'java/lang/String')}
  0x00007fc4ad34752b: mov    0x8(%rcx),%ecx
  0x00007fc4ad34752e: shl    $0x3,%rcx
  0x00007fc4ad347532: cmp    0x110(%rdi),%rcx
  0x00007fc4ad347539: jne    0x00007fc4ad347548
  0x00007fc4ad34753b: addq   $0x1,0x118(%rdi)
  0x00007fc4ad347543: jmpq   0x00007fc4ad3475ae
  0x00007fc4ad347548: cmp    0x120(%rdi),%rcx
  0x00007fc4ad34754f: jne    0x00007fc4ad34755e
  0x00007fc4ad347551: addq   $0x1,0x128(%rdi)
  0x00007fc4ad347559: jmpq   0x00007fc4ad3475ae
  0x00007fc4ad34755e: cmpq   $0x0,0x110(%rdi)
  0x00007fc4ad347569: jne    0x00007fc4ad347582
  0x00007fc4ad34756b: mov    %rcx,0x110(%rdi)
  0x00007fc4ad347572: movq   $0x1,0x118(%rdi)
  0x00007fc4ad34757d: jmpq   0x00007fc4ad3475ae
  0x00007fc4ad347582: cmpq   $0x0,0x120(%rdi)
  0x00007fc4ad34758d: jne    0x00007fc4ad3475a6
  0x00007fc4ad34758f: mov    %rcx,0x120(%rdi)
  0x00007fc4ad347596: movq   $0x1,0x128(%rdi)
  0x00007fc4ad3475a1: jmpq   0x00007fc4ad3475ae
  0x00007fc4ad3475a6: addq   $0x1,0x108(%rdi)
  0x00007fc4ad3475ae: mov    $0x0,%ecx          ;*invokevirtual indexOf
                                                ; - java.lang.String::indexOf@3 (line 1503)

  0x00007fc4ad3475b3: nop
  0x00007fc4ad3475b4: nop
  0x00007fc4ad3475b5: nop
  0x00007fc4ad3475b6: nop
  0x00007fc4ad3475b7: callq  0x00007fc4ad045de0  ; OopMap{off=252}
                                                ;*invokevirtual indexOf
                                                ; - java.lang.String::indexOf@3 (line 1503)
                                                ;   {optimized virtual_call}
  0x00007fc4ad3475bc: add    $0x30,%rsp
  0x00007fc4ad3475c0: pop    %rbp
  0x00007fc4ad3475c1: test   %eax,0x16e05b39(%rip)        # 0x00007fc4c414d100
                                                ;   {poll_return}
  0x00007fc4ad3475c7: retq   
  0x00007fc4ad3475c8: mov    %rcx,0x8(%rsp)
  0x00007fc4ad3475cd: movq   $0xffffffffffffffff,(%rsp)
  0x00007fc4ad3475d5: callq  0x00007fc4ad18f560  ; OopMap{rsi=Oop off=282}
                                                ;*synchronization entry
                                                ; - java.lang.String::indexOf@-1 (line 1503)
                                                ;   {runtime_call}
  0x00007fc4ad3475da: jmpq   0x00007fc4ad34751e
  0x00007fc4ad3475df: nop
  0x00007fc4ad3475e0: nop
  0x00007fc4ad3475e1: mov    0x300(%r15),%rax
  0x00007fc4ad3475e8: movabs $0x0,%r10
  0x00007fc4ad3475f2: mov    %r10,0x300(%r15)
  0x00007fc4ad3475f9: movabs $0x0,%r10
  0x00007fc4ad347603: mov    %r10,0x308(%r15)
  0x00007fc4ad34760a: add    $0x30,%rsp
  0x00007fc4ad34760e: pop    %rbp
  0x00007fc4ad34760f: jmpq   0x00007fc4ad070820  ;   {runtime_call}
  0x00007fc4ad347614: hlt    
  0x00007fc4ad347615: hlt    
  0x00007fc4ad347616: hlt    
  0x00007fc4ad347617: hlt    
  0x00007fc4ad347618: hlt    
  0x00007fc4ad347619: hlt    
  0x00007fc4ad34761a: hlt    
  0x00007fc4ad34761b: hlt    
  0x00007fc4ad34761c: hlt    
  0x00007fc4ad34761d: hlt    
  0x00007fc4ad34761e: hlt    
  0x00007fc4ad34761f: hlt    
[Stub Code]
  0x00007fc4ad347620: nop                       ;   {no_reloc}
  0x00007fc4ad347621: nop
  0x00007fc4ad347622: nop
  0x00007fc4ad347623: nop
  0x00007fc4ad347624: nop
  0x00007fc4ad347625: movabs $0x0,%rbx          ;   {static_stub}
  0x00007fc4ad34762f: jmpq   0x00007fc4ad34762f  ;   {runtime_call}
[Exception Handler]
  0x00007fc4ad347634: callq  0x00007fc4ad070160  ;   {runtime_call}
  0x00007fc4ad347639: mov    %rsp,-0x28(%rsp)
  0x00007fc4ad34763e: sub    $0x80,%rsp
  0x00007fc4ad347645: mov    %rax,0x78(%rsp)
  0x00007fc4ad34764a: mov    %rcx,0x70(%rsp)
  0x00007fc4ad34764f: mov    %rdx,0x68(%rsp)
  0x00007fc4ad347654: mov    %rbx,0x60(%rsp)
  0x00007fc4ad347659: mov    %rbp,0x50(%rsp)
  0x00007fc4ad34765e: mov    %rsi,0x48(%rsp)
  0x00007fc4ad347663: mov    %rdi,0x40(%rsp)
  0x00007fc4ad347668: mov    %r8,0x38(%rsp)
  0x00007fc4ad34766d: mov    %r9,0x30(%rsp)
  0x00007fc4ad347672: mov    %r10,0x28(%rsp)
  0x00007fc4ad347677: mov    %r11,0x20(%rsp)
  0x00007fc4ad34767c: mov    %r12,0x18(%rsp)
  0x00007fc4ad347681: mov    %r13,0x10(%rsp)
  0x00007fc4ad347686: mov    %r14,0x8(%rsp)
  0x00007fc4ad34768b: mov    %r15,(%rsp)
  0x00007fc4ad34768f: movabs $0x7fc4c3c3b49e,%rdi  ;   {external_word}
  0x00007fc4ad347699: movabs $0x7fc4ad347639,%rsi  ;   {internal_word}
  0x00007fc4ad3476a3: mov    %rsp,%rdx
  0x00007fc4ad3476a6: and    $0xfffffffffffffff0,%rsp
  0x00007fc4ad3476aa: callq  0x00007fc4c3961460  ;   {runtime_call}
  0x00007fc4ad3476af: hlt    
[Deopt Handler Code]
  0x00007fc4ad3476b0: movabs $0x7fc4ad3476b0,%r10  ;   {section_word}
  0x00007fc4ad3476ba: push   %r10
  0x00007fc4ad3476bc: jmpq   0x00007fc4ad046e40  ;   {runtime_call}
  0x00007fc4ad3476c1: hlt    
  0x00007fc4ad3476c2: hlt    
  0x00007fc4ad3476c3: hlt    
  0x00007fc4ad3476c4: hlt    
  0x00007fc4ad3476c5: hlt    
  0x00007fc4ad3476c6: hlt    
  0x00007fc4ad3476c7: hlt    
Decoding compiled method 0x00007fc4ad347790:
Code:
[Entry Point]
[Verified Entry Point]
[Constants]
  # {method} {0x00007fc4a9934cf8} 'storeBarrierAfterStoreOfVolatileVariable' '()V' in 'com/chenluo/jvm/learn/TestVolatile'
  #           [sp+0x40]  (sp of caller)
  0x00007fc4ad3478e0: mov    %eax,-0x14000(%rsp)
  0x00007fc4ad3478e7: push   %rbp
  0x00007fc4ad3478e8: sub    $0x30,%rsp
  0x00007fc4ad3478ec: movabs $0x7fc4a9935370,%rsi  ;   {metadata(method data for {method} {0x00007fc4a9934cf8} 'storeBarrierAfterStoreOfVolatileVariable' '()V' in 'com/chenluo/jvm/learn/TestVolatile')}
  0x00007fc4ad3478f6: mov    0xdc(%rsi),%edi
  0x00007fc4ad3478fc: add    $0x8,%edi
  0x00007fc4ad3478ff: mov    %edi,0xdc(%rsi)
  0x00007fc4ad347905: movabs $0x7fc4a9934cf8,%rsi  ;   {metadata({method} {0x00007fc4a9934cf8} 'storeBarrierAfterStoreOfVolatileVariable' '()V' in 'com/chenluo/jvm/learn/TestVolatile')}
  0x00007fc4ad34790f: and    $0x1ff8,%edi
  0x00007fc4ad347915: cmp    $0x0,%edi
  0x00007fc4ad347918: je     0x00007fc4ad34795d  ;*iconst_1
                                                ; - com.chenluo.java.learn.TestVolatile::storeBarrierAfterStoreOfVolatileVariable@0 (line 34)

  0x00007fc4ad34791e: movabs $0x6b4a39ee0,%rsi  ;   {oop(a 'java/lang/Class' = 'com/chenluo/jvm/learn/TestVolatile')}
  0x00007fc4ad347928: movl   $0x1,0x68(%rsi)    ;*putstatic int1
                                                ; - com.chenluo.java.learn.TestVolatile::storeBarrierAfterStoreOfVolatileVariable@1 (line 34)

  0x00007fc4ad34792f: movl   $0x2,0x6c(%rsi)    ;*putstatic int2
                                                ; - com.chenluo.java.learn.TestVolatile::storeBarrierAfterStoreOfVolatileVariable@5 (line 35)

  0x00007fc4ad347936: mov    $0x3,%edi
  0x00007fc4ad34793b: mov    %edi,0x70(%rsi)
  0x00007fc4ad34793e: lock addl $0x0,(%rsp)     ;*putstatic int3_volatile
                                                ; - com.chenluo.java.learn.TestVolatile::storeBarrierAfterStoreOfVolatileVariable@9 (line 36)

  0x00007fc4ad347943: movl   $0x4,0x78(%rsi)    ;*putstatic int4
                                                ; - com.chenluo.java.learn.TestVolatile::storeBarrierAfterStoreOfVolatileVariable@13 (line 37)

  0x00007fc4ad34794a: movl   $0x5,0x7c(%rsi)    ;*putstatic int5
                                                ; - com.chenluo.java.learn.TestVolatile::storeBarrierAfterStoreOfVolatileVariable@17 (line 38)

  0x00007fc4ad347951: add    $0x30,%rsp
  0x00007fc4ad347955: pop    %rbp
  0x00007fc4ad347956: test   %eax,0x16e057a4(%rip)        # 0x00007fc4c414d100
                                                ;   {poll_return}
  0x00007fc4ad34795c: retq   
  0x00007fc4ad34795d: mov    %rsi,0x8(%rsp)
  0x00007fc4ad347962: movq   $0xffffffffffffffff,(%rsp)
  0x00007fc4ad34796a: callq  0x00007fc4ad18f560  ; OopMap{off=143}
                                                ;*synchronization entry
                                                ; - com.chenluo.java.learn.TestVolatile::storeBarrierAfterStoreOfVolatileVariable@-1 (line 34)
                                                ;   {runtime_call}
  0x00007fc4ad34796f: jmp    0x00007fc4ad34791e
  0x00007fc4ad347971: nop
  0x00007fc4ad347972: nop
  0x00007fc4ad347973: mov    0x300(%r15),%rax
  0x00007fc4ad34797a: movabs $0x0,%r10
  0x00007fc4ad347984: mov    %r10,0x300(%r15)
  0x00007fc4ad34798b: movabs $0x0,%r10
  0x00007fc4ad347995: mov    %r10,0x308(%r15)
  0x00007fc4ad34799c: add    $0x30,%rsp
  0x00007fc4ad3479a0: pop    %rbp
  0x00007fc4ad3479a1: jmpq   0x00007fc4ad070820  ;   {runtime_call}
  0x00007fc4ad3479a6: hlt    
  0x00007fc4ad3479a7: hlt    
  0x00007fc4ad3479a8: hlt    
  0x00007fc4ad3479a9: hlt    
  0x00007fc4ad3479aa: hlt    
  0x00007fc4ad3479ab: hlt    
  0x00007fc4ad3479ac: hlt    
  0x00007fc4ad3479ad: hlt    
  0x00007fc4ad3479ae: hlt    
  0x00007fc4ad3479af: hlt    
  0x00007fc4ad3479b0: hlt    
  0x00007fc4ad3479b1: hlt    
  0x00007fc4ad3479b2: hlt    
  0x00007fc4ad3479b3: hlt    
  0x00007fc4ad3479b4: hlt    
  0x00007fc4ad3479b5: hlt    
  0x00007fc4ad3479b6: hlt    
  0x00007fc4ad3479b7: hlt    
  0x00007fc4ad3479b8: hlt    
  0x00007fc4ad3479b9: hlt    
  0x00007fc4ad3479ba: hlt    
  0x00007fc4ad3479bb: hlt    
  0x00007fc4ad3479bc: hlt    
  0x00007fc4ad3479bd: hlt    
  0x00007fc4ad3479be: hlt    
  0x00007fc4ad3479bf: hlt    
[Exception Handler]
[Stub Code]
  0x00007fc4ad3479c0: callq  0x00007fc4ad070160  ;   {no_reloc}
  0x00007fc4ad3479c5: mov    %rsp,-0x28(%rsp)
  0x00007fc4ad3479ca: sub    $0x80,%rsp
  0x00007fc4ad3479d1: mov    %rax,0x78(%rsp)
  0x00007fc4ad3479d6: mov    %rcx,0x70(%rsp)
  0x00007fc4ad3479db: mov    %rdx,0x68(%rsp)
  0x00007fc4ad3479e0: mov    %rbx,0x60(%rsp)
  0x00007fc4ad3479e5: mov    %rbp,0x50(%rsp)
  0x00007fc4ad3479ea: mov    %rsi,0x48(%rsp)
  0x00007fc4ad3479ef: mov    %rdi,0x40(%rsp)
  0x00007fc4ad3479f4: mov    %r8,0x38(%rsp)
  0x00007fc4ad3479f9: mov    %r9,0x30(%rsp)
  0x00007fc4ad3479fe: mov    %r10,0x28(%rsp)
  0x00007fc4ad347a03: mov    %r11,0x20(%rsp)
  0x00007fc4ad347a08: mov    %r12,0x18(%rsp)
  0x00007fc4ad347a0d: mov    %r13,0x10(%rsp)
  0x00007fc4ad347a12: mov    %r14,0x8(%rsp)
  0x00007fc4ad347a17: mov    %r15,(%rsp)
  0x00007fc4ad347a1b: movabs $0x7fc4c3c3b49e,%rdi  ;   {external_word}
  0x00007fc4ad347a25: movabs $0x7fc4ad3479c5,%rsi  ;   {internal_word}
  0x00007fc4ad347a2f: mov    %rsp,%rdx
  0x00007fc4ad347a32: and    $0xfffffffffffffff0,%rsp
  0x00007fc4ad347a36: callq  0x00007fc4c3961460  ;   {runtime_call}
  0x00007fc4ad347a3b: hlt    
[Deopt Handler Code]
  0x00007fc4ad347a3c: movabs $0x7fc4ad347a3c,%r10  ;   {section_word}
  0x00007fc4ad347a46: push   %r10
  0x00007fc4ad347a48: jmpq   0x00007fc4ad046e40  ;   {runtime_call}
  0x00007fc4ad347a4d: hlt    
  0x00007fc4ad347a4e: hlt    
  0x00007fc4ad347a4f: hlt    
Decoding compiled method 0x00007fc4ad347b50:
Code:
[Entry Point]
[Verified Entry Point]
[Constants]
  # {method} {0x00007fc4a9934de8} 'loadBarrierBeforeLoadOfVolatileVariable' '()V' in 'com/chenluo/jvm/learn/TestVolatile'
  #           [sp+0x40]  (sp of caller)
  0x00007fc4ad347ca0: mov    %eax,-0x14000(%rsp)
  0x00007fc4ad347ca7: push   %rbp
  0x00007fc4ad347ca8: sub    $0x30,%rsp
  0x00007fc4ad347cac: movabs $0x7fc4a9935488,%rsi  ;   {metadata(method data for {method} {0x00007fc4a9934de8} 'loadBarrierBeforeLoadOfVolatileVariable' '()V' in 'com/chenluo/jvm/learn/TestVolatile')}
  0x00007fc4ad347cb6: mov    0xdc(%rsi),%edi
  0x00007fc4ad347cbc: add    $0x8,%edi
  0x00007fc4ad347cbf: mov    %edi,0xdc(%rsi)
  0x00007fc4ad347cc5: movabs $0x7fc4a9934de8,%rsi  ;   {metadata({method} {0x00007fc4a9934de8} 'loadBarrierBeforeLoadOfVolatileVariable' '()V' in 'com/chenluo/jvm/learn/TestVolatile')}
  0x00007fc4ad347ccf: and    $0x1ff8,%edi
  0x00007fc4ad347cd5: cmp    $0x0,%edi
  0x00007fc4ad347cd8: je     0x00007fc4ad347d09
  0x00007fc4ad347cde: movabs $0x6b4a39ee0,%rsi  ;   {oop(a 'java/lang/Class' = 'com/chenluo/jvm/learn/TestVolatile')}
  0x00007fc4ad347ce8: mov    0x68(%rsi),%edi    ;*getstatic int1
                                                ; - com.chenluo.java.learn.TestVolatile::loadBarrierBeforeLoadOfVolatileVariable@0 (line 42)

  0x00007fc4ad347ceb: mov    0x6c(%rsi),%edi    ;*getstatic int2
                                                ; - com.chenluo.java.learn.TestVolatile::loadBarrierBeforeLoadOfVolatileVariable@4 (line 43)

  0x00007fc4ad347cee: mov    0x70(%rsi),%edi    ;*getstatic int3_volatile
                                                ; - com.chenluo.java.learn.TestVolatile::loadBarrierBeforeLoadOfVolatileVariable@8 (line 44)

  0x00007fc4ad347cf1: mov    0x78(%rsi),%ebx    ;*getstatic int4
                                                ; - com.chenluo.java.learn.TestVolatile::loadBarrierBeforeLoadOfVolatileVariable@12 (line 45)

  0x00007fc4ad347cf4: mov    0x7c(%rsi),%ebx    ;*getstatic int5
                                                ; - com.chenluo.java.learn.TestVolatile::loadBarrierBeforeLoadOfVolatileVariable@16 (line 46)

  0x00007fc4ad347cf7: mov    %edi,0x80(%rsi)    ;*putstatic dummy
                                                ; - com.chenluo.java.learn.TestVolatile::loadBarrierBeforeLoadOfVolatileVariable@22 (line 47)

  0x00007fc4ad347cfd: add    $0x30,%rsp
  0x00007fc4ad347d01: pop    %rbp
  0x00007fc4ad347d02: test   %eax,0x16e053f8(%rip)        # 0x00007fc4c414d100
                                                ;   {poll_return}
  0x00007fc4ad347d08: retq   
  0x00007fc4ad347d09: mov    %rsi,0x8(%rsp)
  0x00007fc4ad347d0e: movq   $0xffffffffffffffff,(%rsp)
  0x00007fc4ad347d16: callq  0x00007fc4ad18f560  ; OopMap{off=123}
                                                ;*synchronization entry
                                                ; - com.chenluo.java.learn.TestVolatile::loadBarrierBeforeLoadOfVolatileVariable@-1 (line 42)
                                                ;   {runtime_call}
  0x00007fc4ad347d1b: jmp    0x00007fc4ad347cde
  0x00007fc4ad347d1d: nop
  0x00007fc4ad347d1e: nop
  0x00007fc4ad347d1f: mov    0x300(%r15),%rax
  0x00007fc4ad347d26: movabs $0x0,%r10
  0x00007fc4ad347d30: mov    %r10,0x300(%r15)
  0x00007fc4ad347d37: movabs $0x0,%r10
  0x00007fc4ad347d41: mov    %r10,0x308(%r15)
  0x00007fc4ad347d48: add    $0x30,%rsp
  0x00007fc4ad347d4c: pop    %rbp
  0x00007fc4ad347d4d: jmpq   0x00007fc4ad070820  ;   {runtime_call}
  0x00007fc4ad347d52: hlt    
  0x00007fc4ad347d53: hlt    
  0x00007fc4ad347d54: hlt    
  0x00007fc4ad347d55: hlt    
  0x00007fc4ad347d56: hlt    
  0x00007fc4ad347d57: hlt    
  0x00007fc4ad347d58: hlt    
  0x00007fc4ad347d59: hlt    
  0x00007fc4ad347d5a: hlt    
  0x00007fc4ad347d5b: hlt    
  0x00007fc4ad347d5c: hlt    
  0x00007fc4ad347d5d: hlt    
  0x00007fc4ad347d5e: hlt    
  0x00007fc4ad347d5f: hlt    
[Exception Handler]
[Stub Code]
  0x00007fc4ad347d60: callq  0x00007fc4ad070160  ;   {no_reloc}
  0x00007fc4ad347d65: mov    %rsp,-0x28(%rsp)
  0x00007fc4ad347d6a: sub    $0x80,%rsp
  0x00007fc4ad347d71: mov    %rax,0x78(%rsp)
  0x00007fc4ad347d76: mov    %rcx,0x70(%rsp)
  0x00007fc4ad347d7b: mov    %rdx,0x68(%rsp)
  0x00007fc4ad347d80: mov    %rbx,0x60(%rsp)
  0x00007fc4ad347d85: mov    %rbp,0x50(%rsp)
  0x00007fc4ad347d8a: mov    %rsi,0x48(%rsp)
  0x00007fc4ad347d8f: mov    %rdi,0x40(%rsp)
  0x00007fc4ad347d94: mov    %r8,0x38(%rsp)
  0x00007fc4ad347d99: mov    %r9,0x30(%rsp)
  0x00007fc4ad347d9e: mov    %r10,0x28(%rsp)
  0x00007fc4ad347da3: mov    %r11,0x20(%rsp)
  0x00007fc4ad347da8: mov    %r12,0x18(%rsp)
  0x00007fc4ad347dad: mov    %r13,0x10(%rsp)
  0x00007fc4ad347db2: mov    %r14,0x8(%rsp)
  0x00007fc4ad347db7: mov    %r15,(%rsp)
  0x00007fc4ad347dbb: movabs $0x7fc4c3c3b49e,%rdi  ;   {external_word}
  0x00007fc4ad347dc5: movabs $0x7fc4ad347d65,%rsi  ;   {internal_word}
  0x00007fc4ad347dcf: mov    %rsp,%rdx
  0x00007fc4ad347dd2: and    $0xfffffffffffffff0,%rsp
  0x00007fc4ad347dd6: callq  0x00007fc4c3961460  ;   {runtime_call}
  0x00007fc4ad347ddb: hlt    
[Deopt Handler Code]
  0x00007fc4ad347ddc: movabs $0x7fc4ad347ddc,%r10  ;   {section_word}
  0x00007fc4ad347de6: push   %r10
  0x00007fc4ad347de8: jmpq   0x00007fc4ad046e40  ;   {runtime_call}
  0x00007fc4ad347ded: hlt    
  0x00007fc4ad347dee: hlt    
  0x00007fc4ad347def: hlt    
Decoding compiled method 0x00007fc4ad348110:
Code:
[Entry Point]
[Verified Entry Point]
[Constants]
  # {method} {0x00007fc4a9934f80} 'loadBarrierBeforeLoadOfVolatileVariable_compare' '()V' in 'com/chenluo/jvm/learn/TestVolatile'
  #           [sp+0x40]  (sp of caller)
  0x00007fc4ad348260: mov    %eax,-0x14000(%rsp)
  0x00007fc4ad348267: push   %rbp
  0x00007fc4ad348268: sub    $0x30,%rsp
  0x00007fc4ad34826c: movabs $0x7fc4a99356b8,%rsi  ;   {metadata(method data for {method} {0x00007fc4a9934f80} 'loadBarrierBeforeLoadOfVolatileVariable_compare' '()V' in 'com/chenluo/jvm/learn/TestVolatile')}
  0x00007fc4ad348276: mov    0xdc(%rsi),%edi
  0x00007fc4ad34827c: add    $0x8,%edi
  0x00007fc4ad34827f: mov    %edi,0xdc(%rsi)
  0x00007fc4ad348285: movabs $0x7fc4a9934f80,%rsi  ;   {metadata({method} {0x00007fc4a9934f80} 'loadBarrierBeforeLoadOfVolatileVariable_compare' '()V' in 'com/chenluo/jvm/learn/TestVolatile')}
  0x00007fc4ad34828f: and    $0x1ff8,%edi
  0x00007fc4ad348295: cmp    $0x0,%edi
  0x00007fc4ad348298: je     0x00007fc4ad3482c9
  0x00007fc4ad34829e: movabs $0x6b4a39ee0,%rsi  ;   {oop(a 'java/lang/Class' = 'com/chenluo/jvm/learn/TestVolatile')}
  0x00007fc4ad3482a8: mov    0x68(%rsi),%edi    ;*getstatic int1
                                                ; - com.chenluo.java.learn.TestVolatile::loadBarrierBeforeLoadOfVolatileVariable_compare@0 (line 59)

  0x00007fc4ad3482ab: mov    0x6c(%rsi),%edi    ;*getstatic int2
                                                ; - com.chenluo.java.learn.TestVolatile::loadBarrierBeforeLoadOfVolatileVariable_compare@4 (line 60)

  0x00007fc4ad3482ae: mov    0x74(%rsi),%edi    ;*getstatic int3_normal
                                                ; - com.chenluo.java.learn.TestVolatile::loadBarrierBeforeLoadOfVolatileVariable_compare@8 (line 61)

  0x00007fc4ad3482b1: mov    0x78(%rsi),%ebx    ;*getstatic int4
                                                ; - com.chenluo.java.learn.TestVolatile::loadBarrierBeforeLoadOfVolatileVariable_compare@12 (line 62)

  0x00007fc4ad3482b4: mov    0x7c(%rsi),%ebx    ;*getstatic int5
                                                ; - com.chenluo.java.learn.TestVolatile::loadBarrierBeforeLoadOfVolatileVariable_compare@16 (line 63)

  0x00007fc4ad3482b7: mov    %edi,0x80(%rsi)    ;*putstatic dummy
                                                ; - com.chenluo.java.learn.TestVolatile::loadBarrierBeforeLoadOfVolatileVariable_compare@22 (line 64)

  0x00007fc4ad3482bd: add    $0x30,%rsp
  0x00007fc4ad3482c1: pop    %rbp
  0x00007fc4ad3482c2: test   %eax,0x16e04e38(%rip)        # 0x00007fc4c414d100
                                                ;   {poll_return}
  0x00007fc4ad3482c8: retq   
  0x00007fc4ad3482c9: mov    %rsi,0x8(%rsp)
  0x00007fc4ad3482ce: movq   $0xffffffffffffffff,(%rsp)
  0x00007fc4ad3482d6: callq  0x00007fc4ad18f560  ; OopMap{off=123}
                                                ;*synchronization entry
                                                ; - com.chenluo.java.learn.TestVolatile::loadBarrierBeforeLoadOfVolatileVariable_compare@-1 (line 59)
                                                ;   {runtime_call}
  0x00007fc4ad3482db: jmp    0x00007fc4ad34829e
  0x00007fc4ad3482dd: nop
  0x00007fc4ad3482de: nop
  0x00007fc4ad3482df: mov    0x300(%r15),%rax
  0x00007fc4ad3482e6: movabs $0x0,%r10
  0x00007fc4ad3482f0: mov    %r10,0x300(%r15)
  0x00007fc4ad3482f7: movabs $0x0,%r10
  0x00007fc4ad348301: mov    %r10,0x308(%r15)
  0x00007fc4ad348308: add    $0x30,%rsp
  0x00007fc4ad34830c: pop    %rbp
  0x00007fc4ad34830d: jmpq   0x00007fc4ad070820  ;   {runtime_call}
  0x00007fc4ad348312: hlt    
  0x00007fc4ad348313: hlt    
  0x00007fc4ad348314: hlt    
  0x00007fc4ad348315: hlt    
  0x00007fc4ad348316: hlt    
  0x00007fc4ad348317: hlt    
  0x00007fc4ad348318: hlt    
  0x00007fc4ad348319: hlt    
  0x00007fc4ad34831a: hlt    
  0x00007fc4ad34831b: hlt    
  0x00007fc4ad34831c: hlt    
  0x00007fc4ad34831d: hlt    
  0x00007fc4ad34831e: hlt    
  0x00007fc4ad34831f: hlt    
[Exception Handler]
[Stub Code]
  0x00007fc4ad348320: callq  0x00007fc4ad070160  ;   {no_reloc}
  0x00007fc4ad348325: mov    %rsp,-0x28(%rsp)
  0x00007fc4ad34832a: sub    $0x80,%rsp
  0x00007fc4ad348331: mov    %rax,0x78(%rsp)
  0x00007fc4ad348336: mov    %rcx,0x70(%rsp)
  0x00007fc4ad34833b: mov    %rdx,0x68(%rsp)
  0x00007fc4ad348340: mov    %rbx,0x60(%rsp)
  0x00007fc4ad348345: mov    %rbp,0x50(%rsp)
  0x00007fc4ad34834a: mov    %rsi,0x48(%rsp)
  0x00007fc4ad34834f: mov    %rdi,0x40(%rsp)
  0x00007fc4ad348354: mov    %r8,0x38(%rsp)
  0x00007fc4ad348359: mov    %r9,0x30(%rsp)
  0x00007fc4ad34835e: mov    %r10,0x28(%rsp)
  0x00007fc4ad348363: mov    %r11,0x20(%rsp)
  0x00007fc4ad348368: mov    %r12,0x18(%rsp)
  0x00007fc4ad34836d: mov    %r13,0x10(%rsp)
  0x00007fc4ad348372: mov    %r14,0x8(%rsp)
  0x00007fc4ad348377: mov    %r15,(%rsp)
  0x00007fc4ad34837b: movabs $0x7fc4c3c3b49e,%rdi  ;   {external_word}
  0x00007fc4ad348385: movabs $0x7fc4ad348325,%rsi  ;   {internal_word}
  0x00007fc4ad34838f: mov    %rsp,%rdx
  0x00007fc4ad348392: and    $0xfffffffffffffff0,%rsp
  0x00007fc4ad348396: callq  0x00007fc4c3961460  ;   {runtime_call}
  0x00007fc4ad34839b: hlt    
[Deopt Handler Code]
  0x00007fc4ad34839c: movabs $0x7fc4ad34839c,%r10  ;   {section_word}
  0x00007fc4ad3483a6: push   %r10
  0x00007fc4ad3483a8: jmpq   0x00007fc4ad046e40  ;   {runtime_call}
  0x00007fc4ad3483ad: hlt    
  0x00007fc4ad3483ae: hlt    
  0x00007fc4ad3483af: hlt    
Decoding compiled method 0x00007fc4ad3484d0:
Code:
[Entry Point]
[Verified Entry Point]
[Constants]
  # {method} {0x00007fc4a9934e90} 'storeBarrierAfterStoreOfVolatileVariable_compare' '()V' in 'com/chenluo/jvm/learn/TestVolatile'
  #           [sp+0x40]  (sp of caller)
  0x00007fc4ad348620: mov    %eax,-0x14000(%rsp)
  0x00007fc4ad348627: push   %rbp
  0x00007fc4ad348628: sub    $0x30,%rsp
  0x00007fc4ad34862c: movabs $0x7fc4a99355a0,%rsi  ;   {metadata(method data for {method} {0x00007fc4a9934e90} 'storeBarrierAfterStoreOfVolatileVariable_compare' '()V' in 'com/chenluo/jvm/learn/TestVolatile')}
  0x00007fc4ad348636: mov    0xdc(%rsi),%edi
  0x00007fc4ad34863c: add    $0x8,%edi
  0x00007fc4ad34863f: mov    %edi,0xdc(%rsi)
  0x00007fc4ad348645: movabs $0x7fc4a9934e90,%rsi  ;   {metadata({method} {0x00007fc4a9934e90} 'storeBarrierAfterStoreOfVolatileVariable_compare' '()V' in 'com/chenluo/jvm/learn/TestVolatile')}
  0x00007fc4ad34864f: and    $0x1ff8,%edi
  0x00007fc4ad348655: cmp    $0x0,%edi
  0x00007fc4ad348658: je     0x00007fc4ad348697  ;*iconst_1
                                                ; - com.chenluo.java.learn.TestVolatile::storeBarrierAfterStoreOfVolatileVariable_compare@0 (line 51)

  0x00007fc4ad34865e: movabs $0x6b4a39ee0,%rsi  ;   {oop(a 'java/lang/Class' = 'com/chenluo/jvm/learn/TestVolatile')}
  0x00007fc4ad348668: movl   $0x1,0x68(%rsi)    ;*putstatic int1
                                                ; - com.chenluo.java.learn.TestVolatile::storeBarrierAfterStoreOfVolatileVariable_compare@1 (line 51)

  0x00007fc4ad34866f: movl   $0x2,0x6c(%rsi)    ;*putstatic int2
                                                ; - com.chenluo.java.learn.TestVolatile::storeBarrierAfterStoreOfVolatileVariable_compare@5 (line 52)

  0x00007fc4ad348676: movl   $0x3,0x74(%rsi)    ;*putstatic int3_normal
                                                ; - com.chenluo.java.learn.TestVolatile::storeBarrierAfterStoreOfVolatileVariable_compare@9 (line 53)

  0x00007fc4ad34867d: movl   $0x4,0x78(%rsi)    ;*putstatic int4
                                                ; - com.chenluo.java.learn.TestVolatile::storeBarrierAfterStoreOfVolatileVariable_compare@13 (line 54)

  0x00007fc4ad348684: movl   $0x5,0x7c(%rsi)    ;*putstatic int5
                                                ; - com.chenluo.java.learn.TestVolatile::storeBarrierAfterStoreOfVolatileVariable_compare@17 (line 55)

  0x00007fc4ad34868b: add    $0x30,%rsp
  0x00007fc4ad34868f: pop    %rbp
  0x00007fc4ad348690: test   %eax,0x16e04a6a(%rip)        # 0x00007fc4c414d100
                                                ;   {poll_return}
  0x00007fc4ad348696: retq   
  0x00007fc4ad348697: mov    %rsi,0x8(%rsp)
  0x00007fc4ad34869c: movq   $0xffffffffffffffff,(%rsp)
  0x00007fc4ad3486a4: callq  0x00007fc4ad18f560  ; OopMap{off=137}
                                                ;*synchronization entry
                                                ; - com.chenluo.java.learn.TestVolatile::storeBarrierAfterStoreOfVolatileVariable_compare@-1 (line 51)
                                                ;   {runtime_call}
  0x00007fc4ad3486a9: jmp    0x00007fc4ad34865e
  0x00007fc4ad3486ab: nop
  0x00007fc4ad3486ac: nop
  0x00007fc4ad3486ad: mov    0x300(%r15),%rax
  0x00007fc4ad3486b4: movabs $0x0,%r10
  0x00007fc4ad3486be: mov    %r10,0x300(%r15)
  0x00007fc4ad3486c5: movabs $0x0,%r10
  0x00007fc4ad3486cf: mov    %r10,0x308(%r15)
  0x00007fc4ad3486d6: add    $0x30,%rsp
  0x00007fc4ad3486da: pop    %rbp
  0x00007fc4ad3486db: jmpq   0x00007fc4ad070820  ;   {runtime_call}
[Exception Handler]
[Stub Code]
  0x00007fc4ad3486e0: callq  0x00007fc4ad070160  ;   {no_reloc}
  0x00007fc4ad3486e5: mov    %rsp,-0x28(%rsp)
  0x00007fc4ad3486ea: sub    $0x80,%rsp
  0x00007fc4ad3486f1: mov    %rax,0x78(%rsp)
  0x00007fc4ad3486f6: mov    %rcx,0x70(%rsp)
  0x00007fc4ad3486fb: mov    %rdx,0x68(%rsp)
  0x00007fc4ad348700: mov    %rbx,0x60(%rsp)
  0x00007fc4ad348705: mov    %rbp,0x50(%rsp)
  0x00007fc4ad34870a: mov    %rsi,0x48(%rsp)
  0x00007fc4ad34870f: mov    %rdi,0x40(%rsp)
  0x00007fc4ad348714: mov    %r8,0x38(%rsp)
  0x00007fc4ad348719: mov    %r9,0x30(%rsp)
  0x00007fc4ad34871e: mov    %r10,0x28(%rsp)
  0x00007fc4ad348723: mov    %r11,0x20(%rsp)
  0x00007fc4ad348728: mov    %r12,0x18(%rsp)
  0x00007fc4ad34872d: mov    %r13,0x10(%rsp)
  0x00007fc4ad348732: mov    %r14,0x8(%rsp)
  0x00007fc4ad348737: mov    %r15,(%rsp)
  0x00007fc4ad34873b: movabs $0x7fc4c3c3b49e,%rdi  ;   {external_word}
  0x00007fc4ad348745: movabs $0x7fc4ad3486e5,%rsi  ;   {internal_word}
  0x00007fc4ad34874f: mov    %rsp,%rdx
  0x00007fc4ad348752: and    $0xfffffffffffffff0,%rsp
  0x00007fc4ad348756: callq  0x00007fc4c3961460  ;   {runtime_call}
  0x00007fc4ad34875b: hlt    
[Deopt Handler Code]
  0x00007fc4ad34875c: movabs $0x7fc4ad34875c,%r10  ;   {section_word}
  0x00007fc4ad348766: push   %r10
  0x00007fc4ad348768: jmpq   0x00007fc4ad046e40  ;   {runtime_call}
  0x00007fc4ad34876d: hlt    
  0x00007fc4ad34876e: hlt    
  0x00007fc4ad34876f: hlt    
Decoding compiled method 0x00007fc4ad34b510:
Code:
[Entry Point]
[Verified Entry Point]
[Constants]
  # {method} {0x00007fc4a9934cf8} 'storeBarrierAfterStoreOfVolatileVariable' '()V' in 'com/chenluo/jvm/learn/TestVolatile'
  #           [sp+0x20]  (sp of caller)
  0x00007fc4ad34b660: sub    $0x18,%rsp
  0x00007fc4ad34b667: mov    %rbp,0x10(%rsp)    ;*synchronization entry
                                                ; - com.chenluo.java.learn.TestVolatile::storeBarrierAfterStoreOfVolatileVariable@-1 (line 34)

  0x00007fc4ad34b66c: movabs $0x6b4a39ee0,%r10  ;   {oop(a 'java/lang/Class' = 'com/chenluo/jvm/learn/TestVolatile')}
  0x00007fc4ad34b676: movl   $0x1,0x68(%r10)    ;*putstatic int1
                                                ; - com.chenluo.java.learn.TestVolatile::storeBarrierAfterStoreOfVolatileVariable@1 (line 34)

  0x00007fc4ad34b67e: movl   $0x2,0x6c(%r10)
  0x00007fc4ad34b686: movl   $0x3,0x70(%r10)
  0x00007fc4ad34b68e: lock addl $0x0,(%rsp)     ;*putstatic int3_volatile
                                                ; - com.chenluo.java.learn.TestVolatile::storeBarrierAfterStoreOfVolatileVariable@9 (line 36)

  0x00007fc4ad34b693: movl   $0x4,0x78(%r10)    ;*putstatic int4
                                                ; - com.chenluo.java.learn.TestVolatile::storeBarrierAfterStoreOfVolatileVariable@13 (line 37)

  0x00007fc4ad34b69b: movl   $0x5,0x7c(%r10)    ;*putstatic int3_volatile
                                                ; - com.chenluo.java.learn.TestVolatile::storeBarrierAfterStoreOfVolatileVariable@9 (line 36)

  0x00007fc4ad34b6a3: add    $0x10,%rsp
  0x00007fc4ad34b6a7: pop    %rbp
  0x00007fc4ad34b6a8: test   %eax,0x16e01952(%rip)        # 0x00007fc4c414d000
                                                ;   {poll_return}
  0x00007fc4ad34b6ae: retq   
  0x00007fc4ad34b6af: hlt    
  0x00007fc4ad34b6b0: hlt    
  0x00007fc4ad34b6b1: hlt    
  0x00007fc4ad34b6b2: hlt    
  0x00007fc4ad34b6b3: hlt    
  0x00007fc4ad34b6b4: hlt    
  0x00007fc4ad34b6b5: hlt    
  0x00007fc4ad34b6b6: hlt    
  0x00007fc4ad34b6b7: hlt    
  0x00007fc4ad34b6b8: hlt    
  0x00007fc4ad34b6b9: hlt    
  0x00007fc4ad34b6ba: hlt    
  0x00007fc4ad34b6bb: hlt    
  0x00007fc4ad34b6bc: hlt    
  0x00007fc4ad34b6bd: hlt    
  0x00007fc4ad34b6be: hlt    
  0x00007fc4ad34b6bf: hlt    
[Exception Handler]
[Stub Code]
  0x00007fc4ad34b6c0: jmpq   0x00007fc4ad070ae0  ;   {no_reloc}
[Deopt Handler Code]
  0x00007fc4ad34b6c5: callq  0x00007fc4ad34b6ca
  0x00007fc4ad34b6ca: subq   $0x5,(%rsp)
  0x00007fc4ad34b6cf: jmpq   0x00007fc4ad046e40  ;   {runtime_call}
  0x00007fc4ad34b6d4: hlt    
  0x00007fc4ad34b6d5: hlt    
  0x00007fc4ad34b6d6: hlt    
  0x00007fc4ad34b6d7: hlt    
Decoding compiled method 0x00007fc4ad34cc90:
Code:
[Entry Point]
[Verified Entry Point]
[Constants]
  # {method} {0x00007fc4a9934f80} 'loadBarrierBeforeLoadOfVolatileVariable_compare' '()V' in 'com/chenluo/jvm/learn/TestVolatile'
  #           [sp+0x20]  (sp of caller)
  0x00007fc4ad34cde0: sub    $0x18,%rsp
  0x00007fc4ad34cde7: mov    %rbp,0x10(%rsp)    ;*synchronization entry
                                                ; - com.chenluo.java.learn.TestVolatile::loadBarrierBeforeLoadOfVolatileVariable_compare@-1 (line 59)

  0x00007fc4ad34cdec: movabs $0x6b4a39ee0,%r10  ;   {oop(a 'java/lang/Class' = 'com/chenluo/jvm/learn/TestVolatile')}
  0x00007fc4ad34cdf6: mov    0x74(%r10),%r8d
  0x00007fc4ad34cdfa: mov    %r8d,0x80(%r10)    ;*putstatic dummy
                                                ; - com.chenluo.java.learn.TestVolatile::loadBarrierBeforeLoadOfVolatileVariable_compare@22 (line 64)

  0x00007fc4ad34ce01: add    $0x10,%rsp
  0x00007fc4ad34ce05: pop    %rbp
  0x00007fc4ad34ce06: test   %eax,0x16e001f4(%rip)        # 0x00007fc4c414d000
                                                ;   {poll_return}
  0x00007fc4ad34ce0c: retq   
  0x00007fc4ad34ce0d: hlt    
  0x00007fc4ad34ce0e: hlt    
  0x00007fc4ad34ce0f: hlt    
  0x00007fc4ad34ce10: hlt    
  0x00007fc4ad34ce11: hlt    
  0x00007fc4ad34ce12: hlt    
  0x00007fc4ad34ce13: hlt    
  0x00007fc4ad34ce14: hlt    
  0x00007fc4ad34ce15: hlt    
  0x00007fc4ad34ce16: hlt    
  0x00007fc4ad34ce17: hlt    
  0x00007fc4ad34ce18: hlt    
  0x00007fc4ad34ce19: hlt    
  0x00007fc4ad34ce1a: hlt    
  0x00007fc4ad34ce1b: hlt    
  0x00007fc4ad34ce1c: hlt    
  0x00007fc4ad34ce1d: hlt    
  0x00007fc4ad34ce1e: hlt    
  0x00007fc4ad34ce1f: hlt    
[Exception Handler]
[Stub Code]
  0x00007fc4ad34ce20: jmpq   0x00007fc4ad070ae0  ;   {no_reloc}
[Deopt Handler Code]
  0x00007fc4ad34ce25: callq  0x00007fc4ad34ce2a
  0x00007fc4ad34ce2a: subq   $0x5,(%rsp)
  0x00007fc4ad34ce2f: jmpq   0x00007fc4ad046e40  ;   {runtime_call}
  0x00007fc4ad34ce34: hlt    
  0x00007fc4ad34ce35: hlt    
  0x00007fc4ad34ce36: hlt    
  0x00007fc4ad34ce37: hlt    
Decoding compiled method 0x00007fc4ad348890:
Code:
[Entry Point]
[Verified Entry Point]
[Constants]
  # {method} {0x00007fc4a9934de8} 'loadBarrierBeforeLoadOfVolatileVariable' '()V' in 'com/chenluo/jvm/learn/TestVolatile'
  #           [sp+0x20]  (sp of caller)
  0x00007fc4ad3489e0: sub    $0x18,%rsp
  0x00007fc4ad3489e7: mov    %rbp,0x10(%rsp)    ;*synchronization entry
                                                ; - com.chenluo.java.learn.TestVolatile::loadBarrierBeforeLoadOfVolatileVariable@-1 (line 42)

  0x00007fc4ad3489ec: movabs $0x6b4a39ee0,%r10  ;   {oop(a 'java/lang/Class' = 'com/chenluo/jvm/learn/TestVolatile')}
  0x00007fc4ad3489f6: mov    0x70(%r10),%r8d    ;*getstatic int3_volatile
                                                ; - com.chenluo.java.learn.TestVolatile::loadBarrierBeforeLoadOfVolatileVariable@8 (line 44)

  0x00007fc4ad3489fa: mov    %r8d,0x80(%r10)    ;*putstatic dummy
                                                ; - com.chenluo.java.learn.TestVolatile::loadBarrierBeforeLoadOfVolatileVariable@22 (line 47)

  0x00007fc4ad348a01: add    $0x10,%rsp
  0x00007fc4ad348a05: pop    %rbp
  0x00007fc4ad348a06: test   %eax,0x16e045f4(%rip)        # 0x00007fc4c414d000
                                                ;   {poll_return}
  0x00007fc4ad348a0c: retq   
  0x00007fc4ad348a0d: hlt    
  0x00007fc4ad348a0e: hlt    
  0x00007fc4ad348a0f: hlt    
  0x00007fc4ad348a10: hlt    
  0x00007fc4ad348a11: hlt    
  0x00007fc4ad348a12: hlt    
  0x00007fc4ad348a13: hlt    
  0x00007fc4ad348a14: hlt    
  0x00007fc4ad348a15: hlt    
  0x00007fc4ad348a16: hlt    
  0x00007fc4ad348a17: hlt    
  0x00007fc4ad348a18: hlt    
  0x00007fc4ad348a19: hlt    
  0x00007fc4ad348a1a: hlt    
  0x00007fc4ad348a1b: hlt    
  0x00007fc4ad348a1c: hlt    
  0x00007fc4ad348a1d: hlt    
  0x00007fc4ad348a1e: hlt    
  0x00007fc4ad348a1f: hlt    
[Exception Handler]
[Stub Code]
  0x00007fc4ad348a20: jmpq   0x00007fc4ad070ae0  ;   {no_reloc}
[Deopt Handler Code]
  0x00007fc4ad348a25: callq  0x00007fc4ad348a2a
  0x00007fc4ad348a2a: subq   $0x5,(%rsp)
  0x00007fc4ad348a2f: jmpq   0x00007fc4ad046e40  ;   {runtime_call}
  0x00007fc4ad348a34: hlt    
  0x00007fc4ad348a35: hlt    
  0x00007fc4ad348a36: hlt    
  0x00007fc4ad348a37: hlt    
Decoding compiled method 0x00007fc4ad34e250:
Code:
[Entry Point]
[Verified Entry Point]
[Constants]
  # {method} {0x00007fc4a9935090} 'storeBarrierAfterInitOfFinalVariable' '(I)V' in 'com/chenluo/jvm/learn/TestVolatile'
  # parm0:    rsi       = int
  #           [sp+0x40]  (sp of caller)
  0x00007fc4ad34e3c0: mov    %eax,-0x14000(%rsp)
  0x00007fc4ad34e3c7: push   %rbp
  0x00007fc4ad34e3c8: sub    $0x30,%rsp
  0x00007fc4ad34e3cc: movabs $0x7fc4a99357d0,%rdi  ;   {metadata(method data for {method} {0x00007fc4a9935090} 'storeBarrierAfterInitOfFinalVariable' '(I)V' in 'com/chenluo/jvm/learn/TestVolatile')}
  0x00007fc4ad34e3d6: mov    0xdc(%rdi),%ebx
  0x00007fc4ad34e3dc: add    $0x8,%ebx
  0x00007fc4ad34e3df: mov    %ebx,0xdc(%rdi)
  0x00007fc4ad34e3e5: movabs $0x7fc4a9935090,%rdi  ;   {metadata({method} {0x00007fc4a9935090} 'storeBarrierAfterInitOfFinalVariable' '(I)V' in 'com/chenluo/jvm/learn/TestVolatile')}
  0x00007fc4ad34e3ef: and    $0x1ff8,%ebx
  0x00007fc4ad34e3f5: cmp    $0x0,%ebx
  0x00007fc4ad34e3f8: je     0x00007fc4ad34e46f  ;*iload_0
                                                ; - com.chenluo.java.learn.TestVolatile::storeBarrierAfterInitOfFinalVariable@0 (line 68)

  0x00007fc4ad34e3fe: inc    %esi
  0x00007fc4ad34e400: cmp    $0x64,%esi
  0x00007fc4ad34e403: movabs $0x7fc4a99357d0,%rdi  ;   {metadata(method data for {method} {0x00007fc4a9935090} 'storeBarrierAfterInitOfFinalVariable' '(I)V' in 'com/chenluo/jvm/learn/TestVolatile')}
  0x00007fc4ad34e40d: movabs $0x108,%rbx
  0x00007fc4ad34e417: jle    0x00007fc4ad34e427
  0x00007fc4ad34e41d: movabs $0x118,%rbx
  0x00007fc4ad34e427: mov    (%rdi,%rbx,1),%rax
  0x00007fc4ad34e42b: lea    0x1(%rax),%rax
  0x00007fc4ad34e42f: mov    %rax,(%rdi,%rbx,1)
  0x00007fc4ad34e433: jle    0x00007fc4ad34e44e  ;*if_icmple
                                                ; - com.chenluo.java.learn.TestVolatile::storeBarrierAfterInitOfFinalVariable@7 (line 69)

  0x00007fc4ad34e439: movabs $0x7fc4a99357d0,%rdi  ;   {metadata(method data for {method} {0x00007fc4a9935090} 'storeBarrierAfterInitOfFinalVariable' '(I)V' in 'com/chenluo/jvm/learn/TestVolatile')}
  0x00007fc4ad34e443: incl   0x128(%rdi)
  0x00007fc4ad34e449: jmpq   0x00007fc4ad34e453  ;*goto
                                                ; - com.chenluo.java.learn.TestVolatile::storeBarrierAfterInitOfFinalVariable@11 (line 69)

  0x00007fc4ad34e44e: mov    $0x0,%esi
  0x00007fc4ad34e453: movabs $0x6b4a39ee0,%rdi  ;   {oop(a 'java/lang/Class' = 'com/chenluo/jvm/learn/TestVolatile')}
  0x00007fc4ad34e45d: mov    %esi,0x80(%rdi)    ;*putstatic dummy
                                                ; - com.chenluo.java.learn.TestVolatile::storeBarrierAfterInitOfFinalVariable@15 (line 69)

  0x00007fc4ad34e463: add    $0x30,%rsp
  0x00007fc4ad34e467: pop    %rbp
  0x00007fc4ad34e468: test   %eax,0x16dfec92(%rip)        # 0x00007fc4c414d100
                                                ;   {poll_return}
  0x00007fc4ad34e46e: retq   
  0x00007fc4ad34e46f: mov    %rdi,0x8(%rsp)
  0x00007fc4ad34e474: movq   $0xffffffffffffffff,(%rsp)
  0x00007fc4ad34e47c: callq  0x00007fc4ad18f560  ; OopMap{off=193}
                                                ;*synchronization entry
                                                ; - com.chenluo.java.learn.TestVolatile::storeBarrierAfterInitOfFinalVariable@-1 (line 68)
                                                ;   {runtime_call}
  0x00007fc4ad34e481: jmpq   0x00007fc4ad34e3fe
  0x00007fc4ad34e486: nop
  0x00007fc4ad34e487: nop
  0x00007fc4ad34e488: mov    0x300(%r15),%rax
  0x00007fc4ad34e48f: movabs $0x0,%r10
  0x00007fc4ad34e499: mov    %r10,0x300(%r15)
  0x00007fc4ad34e4a0: movabs $0x0,%r10
  0x00007fc4ad34e4aa: mov    %r10,0x308(%r15)
  0x00007fc4ad34e4b1: add    $0x30,%rsp
  0x00007fc4ad34e4b5: pop    %rbp
  0x00007fc4ad34e4b6: jmpq   0x00007fc4ad070820  ;   {runtime_call}
  0x00007fc4ad34e4bb: hlt    
  0x00007fc4ad34e4bc: hlt    
  0x00007fc4ad34e4bd: hlt    
  0x00007fc4ad34e4be: hlt    
  0x00007fc4ad34e4bf: hlt    
[Exception Handler]
[Stub Code]
  0x00007fc4ad34e4c0: callq  0x00007fc4ad070160  ;   {no_reloc}
  0x00007fc4ad34e4c5: mov    %rsp,-0x28(%rsp)
  0x00007fc4ad34e4ca: sub    $0x80,%rsp
  0x00007fc4ad34e4d1: mov    %rax,0x78(%rsp)
  0x00007fc4ad34e4d6: mov    %rcx,0x70(%rsp)
  0x00007fc4ad34e4db: mov    %rdx,0x68(%rsp)
  0x00007fc4ad34e4e0: mov    %rbx,0x60(%rsp)
  0x00007fc4ad34e4e5: mov    %rbp,0x50(%rsp)
  0x00007fc4ad34e4ea: mov    %rsi,0x48(%rsp)
  0x00007fc4ad34e4ef: mov    %rdi,0x40(%rsp)
  0x00007fc4ad34e4f4: mov    %r8,0x38(%rsp)
  0x00007fc4ad34e4f9: mov    %r9,0x30(%rsp)
  0x00007fc4ad34e4fe: mov    %r10,0x28(%rsp)
  0x00007fc4ad34e503: mov    %r11,0x20(%rsp)
  0x00007fc4ad34e508: mov    %r12,0x18(%rsp)
  0x00007fc4ad34e50d: mov    %r13,0x10(%rsp)
  0x00007fc4ad34e512: mov    %r14,0x8(%rsp)
  0x00007fc4ad34e517: mov    %r15,(%rsp)
  0x00007fc4ad34e51b: movabs $0x7fc4c3c3b49e,%rdi  ;   {external_word}
  0x00007fc4ad34e525: movabs $0x7fc4ad34e4c5,%rsi  ;   {internal_word}
  0x00007fc4ad34e52f: mov    %rsp,%rdx
  0x00007fc4ad34e532: and    $0xfffffffffffffff0,%rsp
  0x00007fc4ad34e536: callq  0x00007fc4c3961460  ;   {runtime_call}
  0x00007fc4ad34e53b: hlt    
[Deopt Handler Code]
  0x00007fc4ad34e53c: movabs $0x7fc4ad34e53c,%r10  ;   {section_word}
  0x00007fc4ad34e546: push   %r10
  0x00007fc4ad34e548: jmpq   0x00007fc4ad046e40  ;   {runtime_call}
  0x00007fc4ad34e54d: hlt    
  0x00007fc4ad34e54e: hlt    
  0x00007fc4ad34e54f: hlt    
Decoding compiled method 0x00007fc4ad34df90:
Code:
[Entry Point]
[Verified Entry Point]
[Constants]
  # {method} {0x00007fc4a9934e90} 'storeBarrierAfterStoreOfVolatileVariable_compare' '()V' in 'com/chenluo/jvm/learn/TestVolatile'
  #           [sp+0x20]  (sp of caller)
  0x00007fc4ad34e0e0: sub    $0x18,%rsp
  0x00007fc4ad34e0e7: mov    %rbp,0x10(%rsp)    ;*synchronization entry
                                                ; - com.chenluo.java.learn.TestVolatile::storeBarrierAfterStoreOfVolatileVariable_compare@-1 (line 51)

  0x00007fc4ad34e0ec: movabs $0x6b4a39ee0,%r10  ;   {oop(a 'java/lang/Class' = 'com/chenluo/jvm/learn/TestVolatile')}
  0x00007fc4ad34e0f6: movl   $0x1,0x68(%r10)    ;*putstatic int1
                                                ; - com.chenluo.java.learn.TestVolatile::storeBarrierAfterStoreOfVolatileVariable_compare@1 (line 51)

  0x00007fc4ad34e0fe: movl   $0x5,0x7c(%r10)    ;*putstatic int5
                                                ; - com.chenluo.java.learn.TestVolatile::storeBarrierAfterStoreOfVolatileVariable_compare@17 (line 55)

  0x00007fc4ad34e106: movl   $0x4,0x78(%r10)    ;*putstatic int4
                                                ; - com.chenluo.java.learn.TestVolatile::storeBarrierAfterStoreOfVolatileVariable_compare@13 (line 54)

  0x00007fc4ad34e10e: movl   $0x3,0x74(%r10)    ;*putstatic int3_normal
                                                ; - com.chenluo.java.learn.TestVolatile::storeBarrierAfterStoreOfVolatileVariable_compare@9 (line 53)

  0x00007fc4ad34e116: movl   $0x2,0x6c(%r10)    ;*putstatic int2
                                                ; - com.chenluo.java.learn.TestVolatile::storeBarrierAfterStoreOfVolatileVariable_compare@5 (line 52)

  0x00007fc4ad34e11e: add    $0x10,%rsp
  0x00007fc4ad34e122: pop    %rbp
  0x00007fc4ad34e123: test   %eax,0x16dfeed7(%rip)        # 0x00007fc4c414d000
                                                ;   {poll_return}
  0x00007fc4ad34e129: retq   
  0x00007fc4ad34e12a: hlt    
  0x00007fc4ad34e12b: hlt    
  0x00007fc4ad34e12c: hlt    
  0x00007fc4ad34e12d: hlt    
  0x00007fc4ad34e12e: hlt    
  0x00007fc4ad34e12f: hlt    
  0x00007fc4ad34e130: hlt    
  0x00007fc4ad34e131: hlt    
  0x00007fc4ad34e132: hlt    
  0x00007fc4ad34e133: hlt    
  0x00007fc4ad34e134: hlt    
  0x00007fc4ad34e135: hlt    
  0x00007fc4ad34e136: hlt    
  0x00007fc4ad34e137: hlt    
  0x00007fc4ad34e138: hlt    
  0x00007fc4ad34e139: hlt    
  0x00007fc4ad34e13a: hlt    
  0x00007fc4ad34e13b: hlt    
  0x00007fc4ad34e13c: hlt    
  0x00007fc4ad34e13d: hlt    
  0x00007fc4ad34e13e: hlt    
  0x00007fc4ad34e13f: hlt    
[Exception Handler]
[Stub Code]
  0x00007fc4ad34e140: jmpq   0x00007fc4ad070ae0  ;   {no_reloc}
[Deopt Handler Code]
  0x00007fc4ad34e145: callq  0x00007fc4ad34e14a
  0x00007fc4ad34e14a: subq   $0x5,(%rsp)
  0x00007fc4ad34e14f: jmpq   0x00007fc4ad046e40  ;   {runtime_call}
  0x00007fc4ad34e154: hlt    
  0x00007fc4ad34e155: hlt    
  0x00007fc4ad34e156: hlt    
  0x00007fc4ad34e157: hlt    
Decoding compiled method 0x00007fc4ad34dcd0:
Code:
[Entry Point]
[Verified Entry Point]
[Constants]
  # {method} {0x00007fc4a9935090} 'storeBarrierAfterInitOfFinalVariable' '(I)V' in 'com/chenluo/jvm/learn/TestVolatile'
  # parm0:    rsi       = int
  #           [sp+0x30]  (sp of caller)
  0x00007fc4ad34de20: mov    %eax,-0x14000(%rsp)
  0x00007fc4ad34de27: push   %rbp
  0x00007fc4ad34de28: sub    $0x20,%rsp         ;*synchronization entry
                                                ; - com.chenluo.java.learn.TestVolatile::storeBarrierAfterInitOfFinalVariable@-1 (line 68)

  0x00007fc4ad34de2c: inc    %esi               ;*iadd
                                                ; - com.chenluo.java.learn.TestVolatile::storeBarrierAfterInitOfFinalVariable@2 (line 68)

  0x00007fc4ad34de2e: cmp    $0x64,%esi
  0x00007fc4ad34de31: jle    0x00007fc4ad34de50  ;*if_icmple
                                                ; - com.chenluo.java.learn.TestVolatile::storeBarrierAfterInitOfFinalVariable@7 (line 69)

  0x00007fc4ad34de33: movabs $0x6b4a39ee0,%r10  ;   {oop(a 'java/lang/Class' = 'com/chenluo/jvm/learn/TestVolatile')}
  0x00007fc4ad34de3d: mov    %esi,0x80(%r10)    ;*synchronization entry
                                                ; - com.chenluo.java.learn.TestVolatile::storeBarrierAfterInitOfFinalVariable@-1 (line 68)

  0x00007fc4ad34de44: add    $0x20,%rsp
  0x00007fc4ad34de48: pop    %rbp
  0x00007fc4ad34de49: test   %eax,0x16dff1b1(%rip)        # 0x00007fc4c414d000
                                                ;   {poll_return}
  0x00007fc4ad34de4f: retq   
  0x00007fc4ad34de50: mov    %esi,(%rsp)
  0x00007fc4ad34de53: mov    $0xffffff65,%esi
  0x00007fc4ad34de58: data16 xchg %ax,%ax
  0x00007fc4ad34de5b: callq  0x00007fc4ad0453e0  ; OopMap{off=64}
                                                ;*if_icmple
                                                ; - com.chenluo.java.learn.TestVolatile::storeBarrierAfterInitOfFinalVariable@7 (line 69)
                                                ;   {runtime_call}
  0x00007fc4ad34de60: callq  0x00007fc4c3a462e0  ;*if_icmple
                                                ; - com.chenluo.java.learn.TestVolatile::storeBarrierAfterInitOfFinalVariable@7 (line 69)
                                                ;   {runtime_call}
  0x00007fc4ad34de65: hlt    
  0x00007fc4ad34de66: hlt    
  0x00007fc4ad34de67: hlt    
  0x00007fc4ad34de68: hlt    
  0x00007fc4ad34de69: hlt    
  0x00007fc4ad34de6a: hlt    
  0x00007fc4ad34de6b: hlt    
  0x00007fc4ad34de6c: hlt    
  0x00007fc4ad34de6d: hlt    
  0x00007fc4ad34de6e: hlt    
  0x00007fc4ad34de6f: hlt    
  0x00007fc4ad34de70: hlt    
  0x00007fc4ad34de71: hlt    
  0x00007fc4ad34de72: hlt    
  0x00007fc4ad34de73: hlt    
  0x00007fc4ad34de74: hlt    
  0x00007fc4ad34de75: hlt    
  0x00007fc4ad34de76: hlt    
  0x00007fc4ad34de77: hlt    
  0x00007fc4ad34de78: hlt    
  0x00007fc4ad34de79: hlt    
  0x00007fc4ad34de7a: hlt    
  0x00007fc4ad34de7b: hlt    
  0x00007fc4ad34de7c: hlt    
  0x00007fc4ad34de7d: hlt    
  0x00007fc4ad34de7e: hlt    
  0x00007fc4ad34de7f: hlt    
[Exception Handler]
[Stub Code]
  0x00007fc4ad34de80: jmpq   0x00007fc4ad070ae0  ;   {no_reloc}
[Deopt Handler Code]
  0x00007fc4ad34de85: callq  0x00007fc4ad34de8a
  0x00007fc4ad34de8a: subq   $0x5,(%rsp)
  0x00007fc4ad34de8f: jmpq   0x00007fc4ad046e40  ;   {runtime_call}
  0x00007fc4ad34de94: hlt    
  0x00007fc4ad34de95: hlt    
  0x00007fc4ad34de96: hlt    
  0x00007fc4ad34de97: hlt    
