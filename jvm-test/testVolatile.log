OpenJDK 64-Bit Server VM warning: PrintAssembly is enabled; turning on DebugNonSafepoints to gain additional output
Loaded disassembler from hsdis-amd64.so
Decoding compiled method 0x00007f15f5070310:
Code:
[Disassembling for mach='i386:x86-64']
[Entry Point]
  # {method} {0x00007f15f0b40898} 'arraycopy' '(Ljava/lang/Object;ILjava/lang/Object;II)V' in 'java/lang/System'
  # parm0:    rsi:rsi   = 'java/lang/Object'
  # parm1:    rdx       = int
  # parm2:    rcx:rcx   = 'java/lang/Object'
  # parm3:    r8        = int
  # parm4:    r9        = int
  #           [sp+0x60]  (sp of caller)
  0x00007f15f5070480: mov    0x8(%rsi),%r10d
  0x00007f15f5070484: shl    $0x3,%r10
  0x00007f15f5070488: cmp    %r10,%rax
  0x00007f15f507048b: je     0x00007f15f5070498
  0x00007f15f5070491: jmpq   0x00007f15f5045ba0  ;   {runtime_call}
  0x00007f15f5070496: xchg   %ax,%ax
[Verified Entry Point]
  0x00007f15f5070498: mov    %eax,-0x14000(%rsp)
  0x00007f15f507049f: push   %rbp
  0x00007f15f50704a0: mov    %rsp,%rbp
  0x00007f15f50704a3: sub    $0x50,%rsp
  0x00007f15f50704a7: mov    %r9,(%rsp)
  0x00007f15f50704ab: mov    %r8,%r9
  0x00007f15f50704ae: mov    %rcx,0x18(%rsp)
  0x00007f15f50704b3: cmp    $0x0,%rcx
  0x00007f15f50704b7: lea    0x18(%rsp),%r8
  0x00007f15f50704bc: cmove  0x18(%rsp),%r8
  0x00007f15f50704c2: mov    %rdx,%rcx
  0x00007f15f50704c5: mov    %rsi,0x8(%rsp)
  0x00007f15f50704ca: cmp    $0x0,%rsi
  0x00007f15f50704ce: lea    0x8(%rsp),%rdx
  0x00007f15f50704d3: cmove  0x8(%rsp),%rdx
  0x00007f15f50704d9: movabs $0x6b4900c78,%r14  ;   {oop(a 'java/lang/Class' = 'java/lang/System')}
  0x00007f15f50704e3: mov    %r14,0x38(%rsp)
  0x00007f15f50704e8: lea    0x38(%rsp),%r14
  0x00007f15f50704ed: mov    %r14,%rsi          ; OopMap{[24]=Oop [8]=Oop [56]=Oop off=112}
  0x00007f15f50704f0: movabs $0x7f15f50704f0,%r10  ;   {section_word}
  0x00007f15f50704fa: mov    %r10,0x238(%r15)
  0x00007f15f5070501: mov    %rsp,0x230(%r15)
  0x00007f15f5070508: cmpb   $0x0,0x14bb377d(%rip)        # 0x00007f1609c23c8c
                                                ;   {external_word}
  0x00007f15f507050f: je     0x00007f15f5070553
  0x00007f15f5070515: push   %rsi
  0x00007f15f5070516: push   %rdx
  0x00007f15f5070517: push   %rcx
  0x00007f15f5070518: push   %r8
  0x00007f15f507051a: push   %r9
  0x00007f15f507051c: movabs $0x7f15f0b40898,%rsi  ;   {metadata({method} {0x00007f15f0b40898} 'arraycopy' '(Ljava/lang/Object;ILjava/lang/Object;II)V' in 'java/lang/System')}
  0x00007f15f5070526: mov    %r15,%rdi
  0x00007f15f5070529: test   $0xf,%esp
  0x00007f15f507052f: je     0x00007f15f5070547
  0x00007f15f5070535: sub    $0x8,%rsp
  0x00007f15f5070539: callq  0x00007f16098750d0  ;   {runtime_call}
  0x00007f15f507053e: add    $0x8,%rsp
  0x00007f15f5070542: jmpq   0x00007f15f507054c
  0x00007f15f5070547: callq  0x00007f16098750d0  ;   {runtime_call}
  0x00007f15f507054c: pop    %r9
  0x00007f15f507054e: pop    %r8
  0x00007f15f5070550: pop    %rcx
  0x00007f15f5070551: pop    %rdx
  0x00007f15f5070552: pop    %rsi
  0x00007f15f5070553: lea    0x250(%r15),%rdi
  0x00007f15f507055a: movl   $0x4,0x2c8(%r15)
  0x00007f15f5070565: callq  0x00007f1609594220  ;   {runtime_call}
  0x00007f15f507056a: vzeroupper 
  0x00007f15f507056d: movl   $0x5,0x2c8(%r15)
  0x00007f15f5070578: mov    %r15d,%ecx
  0x00007f15f507057b: shr    $0x4,%ecx
  0x00007f15f507057e: and    $0xffc,%ecx
  0x00007f15f5070584: movabs $0x7f1609e8f000,%r10  ;   {external_word}
  0x00007f15f507058e: mov    %ecx,(%r10,%rcx,1)
  0x00007f15f5070592: cmpl   $0x0,0x14bc0af0(%rip)        # 0x00007f1609c3108c
                                                ;   {external_word}
  0x00007f15f507059c: jne    0x00007f15f50705b0
  0x00007f15f50705a2: cmpl   $0x0,0x30(%r15)
  0x00007f15f50705aa: je     0x00007f15f50705c9
  0x00007f15f50705b0: mov    %r15,%rdi
  0x00007f15f50705b3: mov    %rsp,%r12
  0x00007f15f50705b6: sub    $0x0,%rsp
  0x00007f15f50705ba: and    $0xfffffffffffffff0,%rsp
  0x00007f15f50705be: callq  0x00007f160991ee60  ;   {runtime_call}
  0x00007f15f50705c3: mov    %r12,%rsp
  0x00007f15f50705c6: xor    %r12,%r12
  0x00007f15f50705c9: movl   $0x8,0x2c8(%r15)
  0x00007f15f50705d4: cmpl   $0x1,0x2f4(%r15)
  0x00007f15f50705df: je     0x00007f15f5070667
  0x00007f15f50705e5: cmpb   $0x0,0x14bb36a0(%rip)        # 0x00007f1609c23c8c
                                                ;   {external_word}
  0x00007f15f50705ec: je     0x00007f15f5070622
  0x00007f15f50705f2: movabs $0x7f15f0b40898,%rsi  ;   {metadata({method} {0x00007f15f0b40898} 'arraycopy' '(Ljava/lang/Object;ILjava/lang/Object;II)V' in 'java/lang/System')}
  0x00007f15f50705fc: mov    %r15,%rdi
  0x00007f15f50705ff: test   $0xf,%esp
  0x00007f15f5070605: je     0x00007f15f507061d
  0x00007f15f507060b: sub    $0x8,%rsp
  0x00007f15f507060f: callq  0x00007f1609875180  ;   {runtime_call}
  0x00007f15f5070614: add    $0x8,%rsp
  0x00007f15f5070618: jmpq   0x00007f15f5070622
  0x00007f15f507061d: callq  0x00007f1609875180  ;   {runtime_call}
  0x00007f15f5070622: movabs $0x0,%r10
  0x00007f15f507062c: mov    %r10,0x230(%r15)
  0x00007f15f5070633: movabs $0x0,%r10
  0x00007f15f507063d: mov    %r10,0x238(%r15)
  0x00007f15f5070644: mov    0x38(%r15),%rcx
  0x00007f15f5070648: movl   $0x0,0x100(%rcx)
  0x00007f15f5070652: leaveq 
  0x00007f15f5070653: cmpq   $0x0,0x8(%r15)
  0x00007f15f507065b: jne    0x00007f15f5070662
  0x00007f15f5070661: retq   
  0x00007f15f5070662: jmpq   Stub::forward exception  ;   {runtime_call}
  0x00007f15f5070667: mov    %rsp,%r12
  0x00007f15f507066a: sub    $0x0,%rsp
  0x00007f15f507066e: and    $0xfffffffffffffff0,%rsp
  0x00007f15f5070672: callq  0x00007f1609875720  ;   {runtime_call}
  0x00007f15f5070677: mov    %r12,%rsp
  0x00007f15f507067a: xor    %r12,%r12
  0x00007f15f507067d: jmpq   0x00007f15f50705e5
  0x00007f15f5070682: hlt    
  0x00007f15f5070683: hlt    
  0x00007f15f5070684: hlt    
  0x00007f15f5070685: hlt    
  0x00007f15f5070686: hlt    
  0x00007f15f5070687: hlt    
Decoding compiled method 0x00007f15f521d990:
Code:
[Entry Point]
[Constants]
  # {method} {0x00007f15f0b27480} '<init>' '()V' in 'java/lang/Object'
  #           [sp+0x40]  (sp of caller)
  0x00007f15f521db00: mov    0x8(%rsi),%r10d
  0x00007f15f521db04: shl    $0x3,%r10
  0x00007f15f521db08: cmp    %rax,%r10
  0x00007f15f521db0b: jne    0x00007f15f5045ba0  ;   {runtime_call}
  0x00007f15f521db11: nopl   0x0(%rax,%rax,1)
  0x00007f15f521db19: nopl   0x0(%rax)
[Verified Entry Point]
  0x00007f15f521db20: mov    %eax,-0x14000(%rsp)
  0x00007f15f521db27: push   %rbp
  0x00007f15f521db28: sub    $0x30,%rsp
  0x00007f15f521db2c: movabs $0x7f15f0c9fad8,%rdi  ;   {metadata(method data for {method} {0x00007f15f0b27480} '<init>' '()V' in 'java/lang/Object')}
  0x00007f15f521db36: mov    0xdc(%rdi),%ebx
  0x00007f15f521db3c: add    $0x8,%ebx
  0x00007f15f521db3f: mov    %ebx,0xdc(%rdi)
  0x00007f15f521db45: movabs $0x7f15f0b27480,%rdi  ;   {metadata({method} {0x00007f15f0b27480} '<init>' '()V' in 'java/lang/Object')}
  0x00007f15f521db4f: and    $0x1ff8,%ebx
  0x00007f15f521db55: cmp    $0x0,%ebx
  0x00007f15f521db58: je     0x00007f15f521db77
  0x00007f15f521db5e: mov    %rsi,%rdi          ;*return
                                                ; - java.lang.Object::<init>@0 (line 37)

  0x00007f15f521db61: mov    %rsi,0x20(%rsp)
  0x00007f15f521db66: callq  0x00007f15f50726a0  ; OopMap{[32]=Oop off=107}
                                                ;*return
                                                ; - java.lang.Object::<init>@0 (line 37)
                                                ;   {runtime_call}
  0x00007f15f521db6b: add    $0x30,%rsp
  0x00007f15f521db6f: pop    %rbp
  0x00007f15f521db70: test   %eax,0x14cb258a(%rip)        # 0x00007f1609ed0100
                                                ;   {poll_return}
  0x00007f15f521db76: retq   
  0x00007f15f521db77: mov    %rdi,0x8(%rsp)
  0x00007f15f521db7c: movq   $0xffffffffffffffff,(%rsp)
  0x00007f15f521db84: callq  0x00007f15f518d220  ; OopMap{rsi=Oop off=137}
                                                ;*synchronization entry
                                                ; - java.lang.Object::<init>@-1 (line 37)
                                                ;   {runtime_call}
  0x00007f15f521db89: jmp    0x00007f15f521db5e
  0x00007f15f521db8b: nop
  0x00007f15f521db8c: nop
  0x00007f15f521db8d: mov    0x300(%r15),%rax
  0x00007f15f521db94: movabs $0x0,%r10
  0x00007f15f521db9e: mov    %r10,0x300(%r15)
  0x00007f15f521dba5: movabs $0x0,%r10
  0x00007f15f521dbaf: mov    %r10,0x308(%r15)
  0x00007f15f521dbb6: add    $0x30,%rsp
  0x00007f15f521dbba: pop    %rbp
  0x00007f15f521dbbb: jmpq   0x00007f15f506ff20  ;   {runtime_call}
[Exception Handler]
[Stub Code]
  0x00007f15f521dbc0: callq  0x00007f15f50709e0  ;   {no_reloc}
  0x00007f15f521dbc5: mov    %rsp,-0x28(%rsp)
  0x00007f15f521dbca: sub    $0x80,%rsp
  0x00007f15f521dbd1: mov    %rax,0x78(%rsp)
  0x00007f15f521dbd6: mov    %rcx,0x70(%rsp)
  0x00007f15f521dbdb: mov    %rdx,0x68(%rsp)
  0x00007f15f521dbe0: mov    %rbx,0x60(%rsp)
  0x00007f15f521dbe5: mov    %rbp,0x50(%rsp)
  0x00007f15f521dbea: mov    %rsi,0x48(%rsp)
  0x00007f15f521dbef: mov    %rdi,0x40(%rsp)
  0x00007f15f521dbf4: mov    %r8,0x38(%rsp)
  0x00007f15f521dbf9: mov    %r9,0x30(%rsp)
  0x00007f15f521dbfe: mov    %r10,0x28(%rsp)
  0x00007f15f521dc03: mov    %r11,0x20(%rsp)
  0x00007f15f521dc08: mov    %r12,0x18(%rsp)
  0x00007f15f521dc0d: mov    %r13,0x10(%rsp)
  0x00007f15f521dc12: mov    %r14,0x8(%rsp)
  0x00007f15f521dc17: mov    %r15,(%rsp)
  0x00007f15f521dc1b: movabs $0x7f16099be49e,%rdi  ;   {external_word}
  0x00007f15f521dc25: movabs $0x7f15f521dbc5,%rsi  ;   {internal_word}
  0x00007f15f521dc2f: mov    %rsp,%rdx
  0x00007f15f521dc32: and    $0xfffffffffffffff0,%rsp
  0x00007f15f521dc36: callq  0x00007f16096e4460  ;   {runtime_call}
  0x00007f15f521dc3b: hlt    
[Deopt Handler Code]
  0x00007f15f521dc3c: movabs $0x7f15f521dc3c,%r10  ;   {section_word}
  0x00007f15f521dc46: push   %r10
  0x00007f15f521dc48: jmpq   0x00007f15f5046e40  ;   {runtime_call}
  0x00007f15f521dc4d: hlt    
  0x00007f15f521dc4e: hlt    
  0x00007f15f521dc4f: hlt    
Decoding compiled method 0x00007f15f521f010:
Code:
[Entry Point]
[Constants]
  # {method} {0x00007f15f0cf2a38} 'getSnapshotTransformerList' '()[Lsun/instrument/TransformerManager$TransformerInfo;' in 'sun/instrument/TransformerManager'
  #           [sp+0x40]  (sp of caller)
  0x00007f15f521f160: mov    0x8(%rsi),%r10d
  0x00007f15f521f164: shl    $0x3,%r10
  0x00007f15f521f168: cmp    %rax,%r10
  0x00007f15f521f16b: jne    0x00007f15f5045ba0  ;   {runtime_call}
  0x00007f15f521f171: nopl   0x0(%rax,%rax,1)
  0x00007f15f521f179: nopl   0x0(%rax)
[Verified Entry Point]
  0x00007f15f521f180: mov    %eax,-0x14000(%rsp)
  0x00007f15f521f187: push   %rbp
  0x00007f15f521f188: sub    $0x30,%rsp         ;*aload_0
                                                ; - sun.instrument.TransformerManager::getSnapshotTransformerList@0 (line 166)

  0x00007f15f521f18c: mov    0x10(%rsi),%eax
  0x00007f15f521f18f: shl    $0x3,%rax          ;*getfield mTransformerList
                                                ; - sun.instrument.TransformerManager::getSnapshotTransformerList@1 (line 166)

  0x00007f15f521f193: add    $0x30,%rsp
  0x00007f15f521f197: pop    %rbp
  0x00007f15f521f198: test   %eax,0x14cb0f62(%rip)        # 0x00007f1609ed0100
                                                ;   {poll_return}
  0x00007f15f521f19e: retq   
  0x00007f15f521f19f: nop
  0x00007f15f521f1a0: nop
  0x00007f15f521f1a1: mov    0x300(%r15),%rax
  0x00007f15f521f1a8: movabs $0x0,%r10
  0x00007f15f521f1b2: mov    %r10,0x300(%r15)
  0x00007f15f521f1b9: movabs $0x0,%r10
  0x00007f15f521f1c3: mov    %r10,0x308(%r15)
  0x00007f15f521f1ca: add    $0x30,%rsp
  0x00007f15f521f1ce: pop    %rbp
  0x00007f15f521f1cf: jmpq   0x00007f15f506ff20  ;   {runtime_call}
  0x00007f15f521f1d4: hlt    
  0x00007f15f521f1d5: hlt    
  0x00007f15f521f1d6: hlt    
  0x00007f15f521f1d7: hlt    
  0x00007f15f521f1d8: hlt    
  0x00007f15f521f1d9: hlt    
  0x00007f15f521f1da: hlt    
  0x00007f15f521f1db: hlt    
  0x00007f15f521f1dc: hlt    
  0x00007f15f521f1dd: hlt    
  0x00007f15f521f1de: hlt    
  0x00007f15f521f1df: hlt    
[Exception Handler]
[Stub Code]
  0x00007f15f521f1e0: callq  0x00007f15f50709e0  ;   {no_reloc}
  0x00007f15f521f1e5: mov    %rsp,-0x28(%rsp)
  0x00007f15f521f1ea: sub    $0x80,%rsp
  0x00007f15f521f1f1: mov    %rax,0x78(%rsp)
  0x00007f15f521f1f6: mov    %rcx,0x70(%rsp)
  0x00007f15f521f1fb: mov    %rdx,0x68(%rsp)
  0x00007f15f521f200: mov    %rbx,0x60(%rsp)
  0x00007f15f521f205: mov    %rbp,0x50(%rsp)
  0x00007f15f521f20a: mov    %rsi,0x48(%rsp)
  0x00007f15f521f20f: mov    %rdi,0x40(%rsp)
  0x00007f15f521f214: mov    %r8,0x38(%rsp)
  0x00007f15f521f219: mov    %r9,0x30(%rsp)
  0x00007f15f521f21e: mov    %r10,0x28(%rsp)
  0x00007f15f521f223: mov    %r11,0x20(%rsp)
  0x00007f15f521f228: mov    %r12,0x18(%rsp)
  0x00007f15f521f22d: mov    %r13,0x10(%rsp)
  0x00007f15f521f232: mov    %r14,0x8(%rsp)
  0x00007f15f521f237: mov    %r15,(%rsp)
  0x00007f15f521f23b: movabs $0x7f16099be49e,%rdi  ;   {external_word}
  0x00007f15f521f245: movabs $0x7f15f521f1e5,%rsi  ;   {internal_word}
  0x00007f15f521f24f: mov    %rsp,%rdx
  0x00007f15f521f252: and    $0xfffffffffffffff0,%rsp
  0x00007f15f521f256: callq  0x00007f16096e4460  ;   {runtime_call}
  0x00007f15f521f25b: hlt    
[Deopt Handler Code]
  0x00007f15f521f25c: movabs $0x7f15f521f25c,%r10  ;   {section_word}
  0x00007f15f521f266: push   %r10
  0x00007f15f521f268: jmpq   0x00007f15f5046e40  ;   {runtime_call}
  0x00007f15f521f26d: hlt    
  0x00007f15f521f26e: hlt    
  0x00007f15f521f26f: hlt    
Decoding compiled method 0x00007f15f521e150:
Code:
[Entry Point]
[Constants]
  # {method} {0x00007f15f0b4fda0} 'get' '()Ljava/lang/Object;' in 'java/lang/ref/SoftReference'
  #           [sp+0x50]  (sp of caller)
  0x00007f15f521e2c0: mov    0x8(%rsi),%r10d
  0x00007f15f521e2c4: shl    $0x3,%r10
  0x00007f15f521e2c8: cmp    %rax,%r10
  0x00007f15f521e2cb: jne    0x00007f15f5045ba0  ;   {runtime_call}
  0x00007f15f521e2d1: nopl   0x0(%rax,%rax,1)
  0x00007f15f521e2d9: nopl   0x0(%rax)
[Verified Entry Point]
  0x00007f15f521e2e0: mov    %eax,-0x14000(%rsp)
  0x00007f15f521e2e7: push   %rbp
  0x00007f15f521e2e8: sub    $0x40,%rsp
  0x00007f15f521e2ec: movabs $0x7f15f0db8698,%rdi  ;   {metadata(method data for {method} {0x00007f15f0b4fda0} 'get' '()Ljava/lang/Object;' in 'java/lang/ref/SoftReference')}
  0x00007f15f521e2f6: mov    0xdc(%rdi),%ebx
  0x00007f15f521e2fc: add    $0x8,%ebx
  0x00007f15f521e2ff: mov    %ebx,0xdc(%rdi)
  0x00007f15f521e305: movabs $0x7f15f0b4fda0,%rdi  ;   {metadata({method} {0x00007f15f0b4fda0} 'get' '()Ljava/lang/Object;' in 'java/lang/ref/SoftReference')}
  0x00007f15f521e30f: and    $0x1ff8,%ebx
  0x00007f15f521e315: cmp    $0x0,%ebx
  0x00007f15f521e318: je     0x00007f15f521e3de  ;*aload_0
                                                ; - java.lang.ref.SoftReference::get@0 (line 112)

  0x00007f15f521e31e: mov    %rsi,%rdi
  0x00007f15f521e321: movabs $0x7f15f0db8698,%rbx  ;   {metadata(method data for {method} {0x00007f15f0b4fda0} 'get' '()Ljava/lang/Object;' in 'java/lang/ref/SoftReference')}
  0x00007f15f521e32b: addq   $0x1,0x108(%rbx)
  0x00007f15f521e333: mov    %rsi,%rdi
  0x00007f15f521e336: mov    %rdi,%rsi          ;*invokespecial get
                                                ; - java.lang.ref.SoftReference::get@1 (line 112)

  0x00007f15f521e339: mov    %rdi,0x28(%rsp)
  0x00007f15f521e33e: nop
  0x00007f15f521e33f: callq  0x00007f15f5045de0  ; OopMap{[40]=Oop off=132}
                                                ;*invokespecial get
                                                ; - java.lang.ref.SoftReference::get@1 (line 112)
                                                ;   {optimized virtual_call}
  0x00007f15f521e344: cmp    $0x0,%rax
  0x00007f15f521e348: movabs $0x7f15f0db8698,%rsi  ;   {metadata(method data for {method} {0x00007f15f0b4fda0} 'get' '()Ljava/lang/Object;' in 'java/lang/ref/SoftReference')}
  0x00007f15f521e352: movabs $0x118,%rdi
  0x00007f15f521e35c: je     0x00007f15f521e36c
  0x00007f15f521e362: movabs $0x128,%rdi
  0x00007f15f521e36c: mov    (%rsi,%rdi,1),%rbx
  0x00007f15f521e370: lea    0x1(%rbx),%rbx
  0x00007f15f521e374: mov    %rbx,(%rsi,%rdi,1)
  0x00007f15f521e378: je     0x00007f15f521e3d2  ;*ifnull
                                                ; - java.lang.ref.SoftReference::get@6 (line 113)

  0x00007f15f521e37e: mov    0x28(%rsp),%rsi
  0x00007f15f521e383: mov    0x20(%rsi),%rdi    ;*getfield timestamp
                                                ; - java.lang.ref.SoftReference::get@10 (line 113)

  0x00007f15f521e387: movabs $0x6b49018a0,%rbx  ;   {oop(a 'java/lang/Class' = 'java/lang/ref/SoftReference')}
  0x00007f15f521e391: mov    0x68(%rbx),%rdx    ;*getstatic clock
                                                ; - java.lang.ref.SoftReference::get@13 (line 113)

  0x00007f15f521e395: cmp    %rdx,%rdi
  0x00007f15f521e398: movabs $0x7f15f0db8698,%rdi  ;   {metadata(method data for {method} {0x00007f15f0b4fda0} 'get' '()Ljava/lang/Object;' in 'java/lang/ref/SoftReference')}
  0x00007f15f521e3a2: movabs $0x148,%rbx
  0x00007f15f521e3ac: jne    0x00007f15f521e3bc
  0x00007f15f521e3b2: movabs $0x138,%rbx
  0x00007f15f521e3bc: mov    (%rdi,%rbx,1),%rcx
  0x00007f15f521e3c0: lea    0x1(%rcx),%rcx
  0x00007f15f521e3c4: mov    %rcx,(%rdi,%rbx,1)
  0x00007f15f521e3c8: je     0x00007f15f521e3d2  ;*lcmp
                                                ; - java.lang.ref.SoftReference::get@16 (line 113)

  0x00007f15f521e3ce: mov    %rdx,0x20(%rsi)    ;*putfield timestamp
                                                ; - java.lang.ref.SoftReference::get@24 (line 114)

  0x00007f15f521e3d2: add    $0x40,%rsp
  0x00007f15f521e3d6: pop    %rbp
  0x00007f15f521e3d7: test   %eax,0x14cb1d23(%rip)        # 0x00007f1609ed0100
                                                ;   {poll_return}
  0x00007f15f521e3dd: retq   
  0x00007f15f521e3de: mov    %rdi,0x8(%rsp)
  0x00007f15f521e3e3: movq   $0xffffffffffffffff,(%rsp)
  0x00007f15f521e3eb: callq  0x00007f15f518d220  ; OopMap{rsi=Oop off=304}
                                                ;*synchronization entry
                                                ; - java.lang.ref.SoftReference::get@-1 (line 112)
                                                ;   {runtime_call}
  0x00007f15f521e3f0: jmpq   0x00007f15f521e31e
  0x00007f15f521e3f5: nop
  0x00007f15f521e3f6: nop
  0x00007f15f521e3f7: mov    0x300(%r15),%rax
  0x00007f15f521e3fe: movabs $0x0,%r10
  0x00007f15f521e408: mov    %r10,0x300(%r15)
  0x00007f15f521e40f: movabs $0x0,%r10
  0x00007f15f521e419: mov    %r10,0x308(%r15)
  0x00007f15f521e420: add    $0x40,%rsp
  0x00007f15f521e424: pop    %rbp
  0x00007f15f521e425: jmpq   0x00007f15f506ff20  ;   {runtime_call}
  0x00007f15f521e42a: hlt    
  0x00007f15f521e42b: hlt    
  0x00007f15f521e42c: hlt    
  0x00007f15f521e42d: hlt    
  0x00007f15f521e42e: hlt    
  0x00007f15f521e42f: hlt    
  0x00007f15f521e430: hlt    
  0x00007f15f521e431: hlt    
  0x00007f15f521e432: hlt    
  0x00007f15f521e433: hlt    
  0x00007f15f521e434: hlt    
  0x00007f15f521e435: hlt    
  0x00007f15f521e436: hlt    
  0x00007f15f521e437: hlt    
  0x00007f15f521e438: hlt    
  0x00007f15f521e439: hlt    
  0x00007f15f521e43a: hlt    
  0x00007f15f521e43b: hlt    
  0x00007f15f521e43c: hlt    
  0x00007f15f521e43d: hlt    
  0x00007f15f521e43e: hlt    
  0x00007f15f521e43f: hlt    
[Stub Code]
  0x00007f15f521e440: nop                       ;   {no_reloc}
  0x00007f15f521e441: nop
  0x00007f15f521e442: nop
  0x00007f15f521e443: nop
  0x00007f15f521e444: nop
  0x00007f15f521e445: movabs $0x0,%rbx          ;   {static_stub}
  0x00007f15f521e44f: jmpq   0x00007f15f521e44f  ;   {runtime_call}
[Exception Handler]
  0x00007f15f521e454: callq  0x00007f15f50709e0  ;   {runtime_call}
  0x00007f15f521e459: mov    %rsp,-0x28(%rsp)
  0x00007f15f521e45e: sub    $0x80,%rsp
  0x00007f15f521e465: mov    %rax,0x78(%rsp)
  0x00007f15f521e46a: mov    %rcx,0x70(%rsp)
  0x00007f15f521e46f: mov    %rdx,0x68(%rsp)
  0x00007f15f521e474: mov    %rbx,0x60(%rsp)
  0x00007f15f521e479: mov    %rbp,0x50(%rsp)
  0x00007f15f521e47e: mov    %rsi,0x48(%rsp)
  0x00007f15f521e483: mov    %rdi,0x40(%rsp)
  0x00007f15f521e488: mov    %r8,0x38(%rsp)
  0x00007f15f521e48d: mov    %r9,0x30(%rsp)
  0x00007f15f521e492: mov    %r10,0x28(%rsp)
  0x00007f15f521e497: mov    %r11,0x20(%rsp)
  0x00007f15f521e49c: mov    %r12,0x18(%rsp)
  0x00007f15f521e4a1: mov    %r13,0x10(%rsp)
  0x00007f15f521e4a6: mov    %r14,0x8(%rsp)
  0x00007f15f521e4ab: mov    %r15,(%rsp)
  0x00007f15f521e4af: movabs $0x7f16099be49e,%rdi  ;   {external_word}
  0x00007f15f521e4b9: movabs $0x7f15f521e459,%rsi  ;   {internal_word}
  0x00007f15f521e4c3: mov    %rsp,%rdx
  0x00007f15f521e4c6: and    $0xfffffffffffffff0,%rsp
  0x00007f15f521e4ca: callq  0x00007f16096e4460  ;   {runtime_call}
  0x00007f15f521e4cf: hlt    
[Deopt Handler Code]
  0x00007f15f521e4d0: movabs $0x7f15f521e4d0,%r10  ;   {section_word}
  0x00007f15f521e4da: push   %r10
  0x00007f15f521e4dc: jmpq   0x00007f15f5046e40  ;   {runtime_call}
  0x00007f15f521e4e1: hlt    
  0x00007f15f521e4e2: hlt    
  0x00007f15f521e4e3: hlt    
  0x00007f15f521e4e4: hlt    
  0x00007f15f521e4e5: hlt    
  0x00007f15f521e4e6: hlt    
  0x00007f15f521e4e7: hlt    
Decoding compiled method 0x00007f15f533a6d0:
Code:
[Entry Point]
[Constants]
  # {method} {0x00007f15f0b2adb0} 'charAt' '(I)C' in 'java/lang/String'
  # this:     rsi:rsi   = 'java/lang/String'
  # parm0:    rdx       = int
  #           [sp+0x30]  (sp of caller)
  0x00007f15f533a820: mov    0x8(%rsi),%r10d
  0x00007f15f533a824: shl    $0x3,%r10
  0x00007f15f533a828: cmp    %r10,%rax
  0x00007f15f533a82b: jne    0x00007f15f5045ba0  ;   {runtime_call}
  0x00007f15f533a831: data16 xchg %ax,%ax
  0x00007f15f533a834: nopw   0x0(%rax,%rax,1)
  0x00007f15f533a83a: nopw   0x0(%rax,%rax,1)
[Verified Entry Point]
  0x00007f15f533a840: mov    %eax,-0x14000(%rsp)
  0x00007f15f533a847: push   %rbp
  0x00007f15f533a848: sub    $0x20,%rsp         ;*synchronization entry
                                                ; - java.lang.String::charAt@-1 (line 657)

  0x00007f15f533a84c: test   %edx,%edx
  0x00007f15f533a84e: jl     0x00007f15f533a88d  ;*iflt
                                                ; - java.lang.String::charAt@1 (line 657)

  0x00007f15f533a850: mov    0xc(%rsi),%r10d    ;*getfield value
                                                ; - java.lang.String::charAt@6 (line 657)

  0x00007f15f533a854: mov    0xc(%r12,%r10,8),%ebp  ;*arraylength
                                                ; - java.lang.String::charAt@9 (line 657)
                                                ; implicit exception: dispatches to 0x00007f15f533a8bd
  0x00007f15f533a859: cmp    %ebp,%edx
  0x00007f15f533a85b: jge    0x00007f15f533a8a5  ;*if_icmplt
                                                ; - java.lang.String::charAt@10 (line 657)

  0x00007f15f533a85d: cmp    %ebp,%edx
  0x00007f15f533a85f: jae    0x00007f15f533a877
  0x00007f15f533a861: shl    $0x3,%r10
  0x00007f15f533a865: movzwl 0x10(%r10,%rdx,2),%eax
  0x00007f15f533a86b: add    $0x20,%rsp
  0x00007f15f533a86f: pop    %rbp
  0x00007f15f533a870: test   %eax,0x14b9578a(%rip)        # 0x00007f1609ed0000
                                                ;   {poll_return}
  0x00007f15f533a876: retq   
  0x00007f15f533a877: mov    $0xffffffe4,%esi
  0x00007f15f533a87c: mov    %edx,%ebp
  0x00007f15f533a87e: mov    %r10d,(%rsp)
  0x00007f15f533a882: nop
  0x00007f15f533a883: callq  0x00007f15f50453e0  ; OopMap{[0]=NarrowOop off=104}
                                                ;*caload
                                                ; - java.lang.String::charAt@27 (line 660)
                                                ;   {runtime_call}
  0x00007f15f533a888: callq  0x00007f16097c92e0  ;*caload
                                                ; - java.lang.String::charAt@27 (line 660)
                                                ;   {runtime_call}
  0x00007f15f533a88d: mov    %rsi,%rbp
  0x00007f15f533a890: mov    %edx,0x4(%rsp)
  0x00007f15f533a894: mov    $0xffffff65,%esi
  0x00007f15f533a899: xchg   %ax,%ax
  0x00007f15f533a89b: callq  0x00007f15f50453e0  ; OopMap{rbp=Oop off=128}
                                                ;*iflt
                                                ; - java.lang.String::charAt@1 (line 657)
                                                ;   {runtime_call}
  0x00007f15f533a8a0: callq  0x00007f16097c92e0  ;*iflt
                                                ; - java.lang.String::charAt@1 (line 657)
                                                ;   {runtime_call}
  0x00007f15f533a8a5: mov    %rsi,(%rsp)
  0x00007f15f533a8a9: mov    %edx,0xc(%rsp)
  0x00007f15f533a8ad: mov    $0xffffff65,%esi
  0x00007f15f533a8b2: nop
  0x00007f15f533a8b3: callq  0x00007f15f50453e0  ; OopMap{[0]=Oop off=152}
                                                ;*if_icmplt
                                                ; - java.lang.String::charAt@10 (line 657)
                                                ;   {runtime_call}
  0x00007f15f533a8b8: callq  0x00007f16097c92e0  ;*if_icmplt
                                                ; - java.lang.String::charAt@10 (line 657)
                                                ;   {runtime_call}
  0x00007f15f533a8bd: mov    $0xfffffff6,%esi
  0x00007f15f533a8c2: nop
  0x00007f15f533a8c3: callq  0x00007f15f50453e0  ; OopMap{off=168}
                                                ;*arraylength
                                                ; - java.lang.String::charAt@9 (line 657)
                                                ;   {runtime_call}
  0x00007f15f533a8c8: callq  0x00007f16097c92e0  ;*arraylength
                                                ; - java.lang.String::charAt@9 (line 657)
                                                ;   {runtime_call}
  0x00007f15f533a8cd: hlt    
  0x00007f15f533a8ce: hlt    
  0x00007f15f533a8cf: hlt    
  0x00007f15f533a8d0: hlt    
  0x00007f15f533a8d1: hlt    
  0x00007f15f533a8d2: hlt    
  0x00007f15f533a8d3: hlt    
  0x00007f15f533a8d4: hlt    
  0x00007f15f533a8d5: hlt    
  0x00007f15f533a8d6: hlt    
  0x00007f15f533a8d7: hlt    
  0x00007f15f533a8d8: hlt    
  0x00007f15f533a8d9: hlt    
  0x00007f15f533a8da: hlt    
  0x00007f15f533a8db: hlt    
  0x00007f15f533a8dc: hlt    
  0x00007f15f533a8dd: hlt    
  0x00007f15f533a8de: hlt    
  0x00007f15f533a8df: hlt    
[Exception Handler]
[Stub Code]
  0x00007f15f533a8e0: jmpq   0x00007f15f5070720  ;   {no_reloc}
[Deopt Handler Code]
  0x00007f15f533a8e5: callq  0x00007f15f533a8ea
  0x00007f15f533a8ea: subq   $0x5,(%rsp)
  0x00007f15f533a8ef: jmpq   0x00007f15f5046e40  ;   {runtime_call}
  0x00007f15f533a8f4: hlt    
  0x00007f15f533a8f5: hlt    
  0x00007f15f533a8f6: hlt    
  0x00007f15f533a8f7: hlt    
Decoding compiled method 0x00007f15f533a0d0:
Code:
[Entry Point]
[Constants]
  # {method} {0x00007f15f0b2ac60} 'length' '()I' in 'java/lang/String'
  #           [sp+0x40]  (sp of caller)
  0x00007f15f533a240: mov    0x8(%rsi),%r10d
  0x00007f15f533a244: shl    $0x3,%r10
  0x00007f15f533a248: cmp    %rax,%r10
  0x00007f15f533a24b: jne    0x00007f15f5045ba0  ;   {runtime_call}
  0x00007f15f533a251: nopl   0x0(%rax,%rax,1)
  0x00007f15f533a259: nopl   0x0(%rax)
[Verified Entry Point]
  0x00007f15f533a260: mov    %eax,-0x14000(%rsp)
  0x00007f15f533a267: push   %rbp
  0x00007f15f533a268: sub    $0x30,%rsp
  0x00007f15f533a26c: movabs $0x7f15f0cf20c8,%rax  ;   {metadata(method data for {method} {0x00007f15f0b2ac60} 'length' '()I' in 'java/lang/String')}
  0x00007f15f533a276: mov    0xdc(%rax),%edi
  0x00007f15f533a27c: add    $0x8,%edi
  0x00007f15f533a27f: mov    %edi,0xdc(%rax)
  0x00007f15f533a285: movabs $0x7f15f0b2ac60,%rax  ;   {metadata({method} {0x00007f15f0b2ac60} 'length' '()I' in 'java/lang/String')}
  0x00007f15f533a28f: and    $0x1ff8,%edi
  0x00007f15f533a295: cmp    $0x0,%edi
  0x00007f15f533a298: je     0x00007f15f533a2b4  ;*aload_0
                                                ; - java.lang.String::length@0 (line 623)

  0x00007f15f533a29e: mov    0xc(%rsi),%eax
  0x00007f15f533a2a1: shl    $0x3,%rax          ;*getfield value
                                                ; - java.lang.String::length@1 (line 623)

  0x00007f15f533a2a5: mov    0xc(%rax),%eax     ;*arraylength
                                                ; - java.lang.String::length@4 (line 623)
                                                ; implicit exception: dispatches to 0x00007f15f533a2c8
  0x00007f15f533a2a8: add    $0x30,%rsp
  0x00007f15f533a2ac: pop    %rbp
  0x00007f15f533a2ad: test   %eax,0x14b95e4d(%rip)        # 0x00007f1609ed0100
                                                ;   {poll_return}
  0x00007f15f533a2b3: retq   
  0x00007f15f533a2b4: mov    %rax,0x8(%rsp)
  0x00007f15f533a2b9: movq   $0xffffffffffffffff,(%rsp)
  0x00007f15f533a2c1: callq  0x00007f15f518d220  ; OopMap{rsi=Oop off=134}
                                                ;*synchronization entry
                                                ; - java.lang.String::length@-1 (line 623)
                                                ;   {runtime_call}
  0x00007f15f533a2c6: jmp    0x00007f15f533a29e
  0x00007f15f533a2c8: callq  0x00007f15f5072940  ; OopMap{off=141}
                                                ;*arraylength
                                                ; - java.lang.String::length@4 (line 623)
                                                ;   {runtime_call}
  0x00007f15f533a2cd: nop
  0x00007f15f533a2ce: nop
  0x00007f15f533a2cf: mov    0x300(%r15),%rax
  0x00007f15f533a2d6: movabs $0x0,%r10
  0x00007f15f533a2e0: mov    %r10,0x300(%r15)
  0x00007f15f533a2e7: movabs $0x0,%r10
  0x00007f15f533a2f1: mov    %r10,0x308(%r15)
  0x00007f15f533a2f8: add    $0x30,%rsp
  0x00007f15f533a2fc: pop    %rbp
  0x00007f15f533a2fd: jmpq   0x00007f15f506ff20  ;   {runtime_call}
  0x00007f15f533a302: hlt    
  0x00007f15f533a303: hlt    
  0x00007f15f533a304: hlt    
  0x00007f15f533a305: hlt    
  0x00007f15f533a306: hlt    
  0x00007f15f533a307: hlt    
  0x00007f15f533a308: hlt    
  0x00007f15f533a309: hlt    
  0x00007f15f533a30a: hlt    
  0x00007f15f533a30b: hlt    
  0x00007f15f533a30c: hlt    
  0x00007f15f533a30d: hlt    
  0x00007f15f533a30e: hlt    
  0x00007f15f533a30f: hlt    
  0x00007f15f533a310: hlt    
  0x00007f15f533a311: hlt    
  0x00007f15f533a312: hlt    
  0x00007f15f533a313: hlt    
  0x00007f15f533a314: hlt    
  0x00007f15f533a315: hlt    
  0x00007f15f533a316: hlt    
  0x00007f15f533a317: hlt    
  0x00007f15f533a318: hlt    
  0x00007f15f533a319: hlt    
  0x00007f15f533a31a: hlt    
  0x00007f15f533a31b: hlt    
  0x00007f15f533a31c: hlt    
  0x00007f15f533a31d: hlt    
  0x00007f15f533a31e: hlt    
  0x00007f15f533a31f: hlt    
[Exception Handler]
[Stub Code]
  0x00007f15f533a320: callq  0x00007f15f50709e0  ;   {no_reloc}
  0x00007f15f533a325: mov    %rsp,-0x28(%rsp)
  0x00007f15f533a32a: sub    $0x80,%rsp
  0x00007f15f533a331: mov    %rax,0x78(%rsp)
  0x00007f15f533a336: mov    %rcx,0x70(%rsp)
  0x00007f15f533a33b: mov    %rdx,0x68(%rsp)
  0x00007f15f533a340: mov    %rbx,0x60(%rsp)
  0x00007f15f533a345: mov    %rbp,0x50(%rsp)
  0x00007f15f533a34a: mov    %rsi,0x48(%rsp)
  0x00007f15f533a34f: mov    %rdi,0x40(%rsp)
  0x00007f15f533a354: mov    %r8,0x38(%rsp)
  0x00007f15f533a359: mov    %r9,0x30(%rsp)
  0x00007f15f533a35e: mov    %r10,0x28(%rsp)
  0x00007f15f533a363: mov    %r11,0x20(%rsp)
  0x00007f15f533a368: mov    %r12,0x18(%rsp)
  0x00007f15f533a36d: mov    %r13,0x10(%rsp)
  0x00007f15f533a372: mov    %r14,0x8(%rsp)
  0x00007f15f533a377: mov    %r15,(%rsp)
  0x00007f15f533a37b: movabs $0x7f16099be49e,%rdi  ;   {external_word}
  0x00007f15f533a385: movabs $0x7f15f533a325,%rsi  ;   {internal_word}
  0x00007f15f533a38f: mov    %rsp,%rdx
  0x00007f15f533a392: and    $0xfffffffffffffff0,%rsp
  0x00007f15f533a396: callq  0x00007f16096e4460  ;   {runtime_call}
  0x00007f15f533a39b: hlt    
[Deopt Handler Code]
  0x00007f15f533a39c: movabs $0x7f15f533a39c,%r10  ;   {section_word}
  0x00007f15f533a3a6: push   %r10
  0x00007f15f533a3a8: jmpq   0x00007f15f5046e40  ;   {runtime_call}
  0x00007f15f533a3ad: hlt    
  0x00007f15f533a3ae: hlt    
  0x00007f15f533a3af: hlt    
Decoding compiled method 0x00007f15f5339950:
Code:
[Entry Point]
[Constants]
  # {method} {0x00007f15f0b2c180} 'indexOf' '(II)I' in 'java/lang/String'
  # this:     rsi:rsi   = 'java/lang/String'
  # parm0:    rdx       = int
  # parm1:    rcx       = int
  #           [sp+0x40]  (sp of caller)
  0x00007f15f5339ae0: mov    0x8(%rsi),%r10d
  0x00007f15f5339ae4: shl    $0x3,%r10
  0x00007f15f5339ae8: cmp    %rax,%r10
  0x00007f15f5339aeb: jne    0x00007f15f5045ba0  ;   {runtime_call}
  0x00007f15f5339af1: nopl   0x0(%rax,%rax,1)
  0x00007f15f5339af9: nopl   0x0(%rax)
[Verified Entry Point]
  0x00007f15f5339b00: mov    %eax,-0x14000(%rsp)
  0x00007f15f5339b07: push   %rbp
  0x00007f15f5339b08: sub    $0x30,%rsp
  0x00007f15f5339b0c: movabs $0x7f15f0ceeb98,%rax  ;   {metadata(method data for {method} {0x00007f15f0b2c180} 'indexOf' '(II)I' in 'java/lang/String')}
  0x00007f15f5339b16: mov    0xdc(%rax),%edi
  0x00007f15f5339b1c: add    $0x8,%edi
  0x00007f15f5339b1f: mov    %edi,0xdc(%rax)
  0x00007f15f5339b25: movabs $0x7f15f0b2c180,%rax  ;   {metadata({method} {0x00007f15f0b2c180} 'indexOf' '(II)I' in 'java/lang/String')}
  0x00007f15f5339b2f: and    $0x1ff8,%edi
  0x00007f15f5339b35: cmp    $0x0,%edi
  0x00007f15f5339b38: je     0x00007f15f5339d41  ;*aload_0
                                                ; - java.lang.String::indexOf@0 (line 1546)

  0x00007f15f5339b3e: mov    0xc(%rsi),%eax
  0x00007f15f5339b41: shl    $0x3,%rax          ;*getfield value
                                                ; - java.lang.String::indexOf@1 (line 1546)

  0x00007f15f5339b45: mov    0xc(%rax),%edi     ;*arraylength
                                                ; - java.lang.String::indexOf@4 (line 1546)
                                                ; implicit exception: dispatches to 0x00007f15f5339d58
  0x00007f15f5339b48: cmp    $0x0,%ecx
  0x00007f15f5339b4b: movabs $0x7f15f0ceeb98,%rbx  ;   {metadata(method data for {method} {0x00007f15f0b2c180} 'indexOf' '(II)I' in 'java/lang/String')}
  0x00007f15f5339b55: movabs $0x108,%r8
  0x00007f15f5339b5f: jge    0x00007f15f5339b6f
  0x00007f15f5339b65: movabs $0x118,%r8
  0x00007f15f5339b6f: mov    (%rbx,%r8,1),%r9
  0x00007f15f5339b73: lea    0x1(%r9),%r9
  0x00007f15f5339b77: mov    %r9,(%rbx,%r8,1)
  0x00007f15f5339b7b: jge    0x00007f15f5339b9b  ;*ifge
                                                ; - java.lang.String::indexOf@7 (line 1547)

  0x00007f15f5339b81: movabs $0x7f15f0ceeb98,%rcx  ;   {metadata(method data for {method} {0x00007f15f0b2c180} 'indexOf' '(II)I' in 'java/lang/String')}
  0x00007f15f5339b8b: incl   0x128(%rcx)
  0x00007f15f5339b91: mov    $0x0,%ecx
  0x00007f15f5339b96: jmpq   0x00007f15f5339bd3  ;*goto
                                                ; - java.lang.String::indexOf@12 (line 1548)

  0x00007f15f5339b9b: cmp    %edi,%ecx
  0x00007f15f5339b9d: movabs $0x7f15f0ceeb98,%rbx  ;   {metadata(method data for {method} {0x00007f15f0b2c180} 'indexOf' '(II)I' in 'java/lang/String')}
  0x00007f15f5339ba7: movabs $0x140,%r8
  0x00007f15f5339bb1: jl     0x00007f15f5339bc1
  0x00007f15f5339bb7: movabs $0x150,%r8
  0x00007f15f5339bc1: mov    (%rbx,%r8,1),%r9
  0x00007f15f5339bc5: lea    0x1(%r9),%r9
  0x00007f15f5339bc9: mov    %r9,(%rbx,%r8,1)
  0x00007f15f5339bcd: jge    0x00007f15f5339d30  ;*if_icmplt
                                                ; - java.lang.String::indexOf@17 (line 1549)

  0x00007f15f5339bd3: cmp    $0x10000,%edx
  0x00007f15f5339bd9: movabs $0x7f15f0ceeb98,%rbx  ;   {metadata(method data for {method} {0x00007f15f0b2c180} 'indexOf' '(II)I' in 'java/lang/String')}
  0x00007f15f5339be3: movabs $0x160,%r8
  0x00007f15f5339bed: jge    0x00007f15f5339bfd
  0x00007f15f5339bf3: movabs $0x170,%r8
  0x00007f15f5339bfd: mov    (%rbx,%r8,1),%r9
  0x00007f15f5339c01: lea    0x1(%r9),%r9
  0x00007f15f5339c05: mov    %r9,(%rbx,%r8,1)
  0x00007f15f5339c09: jge    0x00007f15f5339d08
  0x00007f15f5339c0f: jmpq   0x00007f15f5339cab  ;*if_icmpge
                                                ; - java.lang.String::indexOf@25 (line 1554)

  0x00007f15f5339c14: nopl   0x0(%rax)
  0x00007f15f5339c18: movslq %ecx,%rsi
  0x00007f15f5339c1b: cmp    0xc(%rax),%ecx
  0x00007f15f5339c1e: jae    0x00007f15f5339d5d
  0x00007f15f5339c24: movzwl 0x10(%rax,%rsi,2),%esi  ;*caload
                                                ; - java.lang.String::indexOf@47 (line 1559)

  0x00007f15f5339c29: cmp    %edx,%esi
  0x00007f15f5339c2b: movabs $0x7f15f0ceeb98,%rsi  ;   {metadata(method data for {method} {0x00007f15f0b2c180} 'indexOf' '(II)I' in 'java/lang/String')}
  0x00007f15f5339c35: movabs $0x1a0,%rbx
  0x00007f15f5339c3f: jne    0x00007f15f5339c4f
  0x00007f15f5339c45: movabs $0x1b0,%rbx
  0x00007f15f5339c4f: mov    (%rsi,%rbx,1),%r8
  0x00007f15f5339c53: lea    0x1(%r8),%r8
  0x00007f15f5339c57: mov    %r8,(%rsi,%rbx,1)
  0x00007f15f5339c5b: je     0x00007f15f5339ce8  ;*if_icmpne
                                                ; - java.lang.String::indexOf@49 (line 1559)

  0x00007f15f5339c61: inc    %ecx
  0x00007f15f5339c63: movabs $0x7f15f0ceeb98,%rsi  ;   {metadata(method data for {method} {0x00007f15f0b2c180} 'indexOf' '(II)I' in 'java/lang/String')}
  0x00007f15f5339c6d: mov    0xe0(%rsi),%ebx
  0x00007f15f5339c73: add    $0x8,%ebx
  0x00007f15f5339c76: mov    %ebx,0xe0(%rsi)
  0x00007f15f5339c7c: movabs $0x7f15f0b2c180,%rsi  ;   {metadata({method} {0x00007f15f0b2c180} 'indexOf' '(II)I' in 'java/lang/String')}
  0x00007f15f5339c86: and    $0xfff8,%ebx
  0x00007f15f5339c8c: cmp    $0x0,%ebx
  0x00007f15f5339c8f: je     0x00007f15f5339d66  ; OopMap{rax=Oop off=437}
                                                ;*goto
                                                ; - java.lang.String::indexOf@58 (line 1558)

  0x00007f15f5339c95: test   %eax,0x14b96465(%rip)        # 0x00007f1609ed0100
                                                ;   {poll}
  0x00007f15f5339c9b: movabs $0x7f15f0ceeb98,%rsi  ;   {metadata(method data for {method} {0x00007f15f0b2c180} 'indexOf' '(II)I' in 'java/lang/String')}
  0x00007f15f5339ca5: incl   0x1c0(%rsi)        ;*goto
                                                ; - java.lang.String::indexOf@58 (line 1558)

  0x00007f15f5339cab: cmp    %edi,%ecx
  0x00007f15f5339cad: movabs $0x7f15f0ceeb98,%rsi  ;   {metadata(method data for {method} {0x00007f15f0b2c180} 'indexOf' '(II)I' in 'java/lang/String')}
  0x00007f15f5339cb7: movabs $0x180,%rbx
  0x00007f15f5339cc1: jge    0x00007f15f5339cd1
  0x00007f15f5339cc7: movabs $0x190,%rbx
  0x00007f15f5339cd1: mov    (%rsi,%rbx,1),%r8
  0x00007f15f5339cd5: lea    0x1(%r8),%r8
  0x00007f15f5339cd9: mov    %r8,(%rsi,%rbx,1)
  0x00007f15f5339cdd: jge    0x00007f15f5339cf7
  0x00007f15f5339ce3: jmpq   0x00007f15f5339c18  ;*if_icmpge
                                                ; - java.lang.String::indexOf@40 (line 1558)

  0x00007f15f5339ce8: mov    %rcx,%rax
  0x00007f15f5339ceb: add    $0x30,%rsp
  0x00007f15f5339cef: pop    %rbp
  0x00007f15f5339cf0: test   %eax,0x14b9640a(%rip)        # 0x00007f1609ed0100
                                                ;   {poll_return}
  0x00007f15f5339cf6: retq                      ;*ireturn
                                                ; - java.lang.String::indexOf@54 (line 1560)

  0x00007f15f5339cf7: mov    $0xffffffff,%eax
  0x00007f15f5339cfc: add    $0x30,%rsp
  0x00007f15f5339d00: pop    %rbp
  0x00007f15f5339d01: test   %eax,0x14b963f9(%rip)        # 0x00007f1609ed0100
                                                ;   {poll_return}
  0x00007f15f5339d07: retq                      ;*ireturn
                                                ; - java.lang.String::indexOf@62 (line 1563)

  0x00007f15f5339d08: mov    %rsi,%rdi
  0x00007f15f5339d0b: movabs $0x7f15f0ceeb98,%rbx  ;   {metadata(method data for {method} {0x00007f15f0b2c180} 'indexOf' '(II)I' in 'java/lang/String')}
  0x00007f15f5339d15: addq   $0x1,0x1d8(%rbx)
  0x00007f15f5339d1d: nop
  0x00007f15f5339d1e: nop
  0x00007f15f5339d1f: callq  0x00007f15f5045de0  ; OopMap{off=580}
                                                ;*invokespecial indexOfSupplementary
                                                ; - java.lang.String::indexOf@66 (line 1565)
                                                ;   {optimized virtual_call}
  0x00007f15f5339d24: add    $0x30,%rsp
  0x00007f15f5339d28: pop    %rbp
  0x00007f15f5339d29: test   %eax,0x14b963d1(%rip)        # 0x00007f1609ed0100
                                                ;   {poll_return}
  0x00007f15f5339d2f: retq                      ;*ireturn
                                                ; - java.lang.String::indexOf@69 (line 1565)

  0x00007f15f5339d30: mov    $0xffffffff,%eax
  0x00007f15f5339d35: add    $0x30,%rsp
  0x00007f15f5339d39: pop    %rbp
  0x00007f15f5339d3a: test   %eax,0x14b963c0(%rip)        # 0x00007f1609ed0100
                                                ;   {poll_return}
  0x00007f15f5339d40: retq   
  0x00007f15f5339d41: mov    %rax,0x8(%rsp)
  0x00007f15f5339d46: movq   $0xffffffffffffffff,(%rsp)
  0x00007f15f5339d4e: callq  0x00007f15f518d220  ; OopMap{rsi=Oop off=627}
                                                ;*synchronization entry
                                                ; - java.lang.String::indexOf@-1 (line 1546)
                                                ;   {runtime_call}
  0x00007f15f5339d53: jmpq   0x00007f15f5339b3e
  0x00007f15f5339d58: callq  0x00007f15f5072940  ; OopMap{rsi=Oop rax=Oop off=637}
                                                ;*arraylength
                                                ; - java.lang.String::indexOf@4 (line 1546)
                                                ;   {runtime_call}
  0x00007f15f5339d5d: mov    %rcx,(%rsp)
  0x00007f15f5339d61: callq  0x00007f15f5073000  ; OopMap{rax=Oop off=646}
                                                ;*caload
                                                ; - java.lang.String::indexOf@47 (line 1559)
                                                ;   {runtime_call}
  0x00007f15f5339d66: mov    %rsi,0x8(%rsp)
  0x00007f15f5339d6b: movq   $0x3a,(%rsp)
  0x00007f15f5339d73: callq  0x00007f15f518d220  ; OopMap{rax=Oop off=664}
                                                ;*goto
                                                ; - java.lang.String::indexOf@58 (line 1558)
                                                ;   {runtime_call}
  0x00007f15f5339d78: jmpq   0x00007f15f5339c95
  0x00007f15f5339d7d: nop
  0x00007f15f5339d7e: nop
  0x00007f15f5339d7f: mov    0x300(%r15),%rax
  0x00007f15f5339d86: movabs $0x0,%r10
  0x00007f15f5339d90: mov    %r10,0x300(%r15)
  0x00007f15f5339d97: movabs $0x0,%r10
  0x00007f15f5339da1: mov    %r10,0x308(%r15)
  0x00007f15f5339da8: add    $0x30,%rsp
  0x00007f15f5339dac: pop    %rbp
  0x00007f15f5339dad: jmpq   0x00007f15f506ff20  ;   {runtime_call}
  0x00007f15f5339db2: hlt    
  0x00007f15f5339db3: hlt    
  0x00007f15f5339db4: hlt    
  0x00007f15f5339db5: hlt    
  0x00007f15f5339db6: hlt    
  0x00007f15f5339db7: hlt    
  0x00007f15f5339db8: hlt    
  0x00007f15f5339db9: hlt    
  0x00007f15f5339dba: hlt    
  0x00007f15f5339dbb: hlt    
  0x00007f15f5339dbc: hlt    
  0x00007f15f5339dbd: hlt    
  0x00007f15f5339dbe: hlt    
  0x00007f15f5339dbf: hlt    
[Stub Code]
  0x00007f15f5339dc0: nop                       ;   {no_reloc}
  0x00007f15f5339dc1: nop
  0x00007f15f5339dc2: nop
  0x00007f15f5339dc3: nop
  0x00007f15f5339dc4: nop
  0x00007f15f5339dc5: movabs $0x0,%rbx          ;   {static_stub}
  0x00007f15f5339dcf: jmpq   0x00007f15f5339dcf  ;   {runtime_call}
[Exception Handler]
  0x00007f15f5339dd4: callq  0x00007f15f50709e0  ;   {runtime_call}
  0x00007f15f5339dd9: mov    %rsp,-0x28(%rsp)
  0x00007f15f5339dde: sub    $0x80,%rsp
  0x00007f15f5339de5: mov    %rax,0x78(%rsp)
  0x00007f15f5339dea: mov    %rcx,0x70(%rsp)
  0x00007f15f5339def: mov    %rdx,0x68(%rsp)
  0x00007f15f5339df4: mov    %rbx,0x60(%rsp)
  0x00007f15f5339df9: mov    %rbp,0x50(%rsp)
  0x00007f15f5339dfe: mov    %rsi,0x48(%rsp)
  0x00007f15f5339e03: mov    %rdi,0x40(%rsp)
  0x00007f15f5339e08: mov    %r8,0x38(%rsp)
  0x00007f15f5339e0d: mov    %r9,0x30(%rsp)
  0x00007f15f5339e12: mov    %r10,0x28(%rsp)
  0x00007f15f5339e17: mov    %r11,0x20(%rsp)
  0x00007f15f5339e1c: mov    %r12,0x18(%rsp)
  0x00007f15f5339e21: mov    %r13,0x10(%rsp)
  0x00007f15f5339e26: mov    %r14,0x8(%rsp)
  0x00007f15f5339e2b: mov    %r15,(%rsp)
  0x00007f15f5339e2f: movabs $0x7f16099be49e,%rdi  ;   {external_word}
  0x00007f15f5339e39: movabs $0x7f15f5339dd9,%rsi  ;   {internal_word}
  0x00007f15f5339e43: mov    %rsp,%rdx
  0x00007f15f5339e46: and    $0xfffffffffffffff0,%rsp
  0x00007f15f5339e4a: callq  0x00007f16096e4460  ;   {runtime_call}
  0x00007f15f5339e4f: hlt    
[Deopt Handler Code]
  0x00007f15f5339e50: movabs $0x7f15f5339e50,%r10  ;   {section_word}
  0x00007f15f5339e5a: push   %r10
  0x00007f15f5339e5c: jmpq   0x00007f15f5046e40  ;   {runtime_call}
  0x00007f15f5339e61: hlt    
  0x00007f15f5339e62: hlt    
  0x00007f15f5339e63: hlt    
  0x00007f15f5339e64: hlt    
  0x00007f15f5339e65: hlt    
  0x00007f15f5339e66: hlt    
  0x00007f15f5339e67: hlt    
Decoding compiled method 0x00007f15f5339310:
Code:
[Entry Point]
[Constants]
  # {method} {0x00007f15f0b2c000} 'hashCode' '()I' in 'java/lang/String'
  #           [sp+0x40]  (sp of caller)
  0x00007f15f5339480: mov    0x8(%rsi),%r10d
  0x00007f15f5339484: shl    $0x3,%r10
  0x00007f15f5339488: cmp    %rax,%r10
  0x00007f15f533948b: jne    0x00007f15f5045ba0  ;   {runtime_call}
  0x00007f15f5339491: nopl   0x0(%rax,%rax,1)
  0x00007f15f5339499: nopl   0x0(%rax)
[Verified Entry Point]
  0x00007f15f53394a0: mov    %eax,-0x14000(%rsp)
  0x00007f15f53394a7: push   %rbp
  0x00007f15f53394a8: sub    $0x30,%rsp
  0x00007f15f53394ac: movabs $0x7f15f0ceb9c0,%rax  ;   {metadata(method data for {method} {0x00007f15f0b2c000} 'hashCode' '()I' in 'java/lang/String')}
  0x00007f15f53394b6: mov    0xdc(%rax),%edi
  0x00007f15f53394bc: add    $0x8,%edi
  0x00007f15f53394bf: mov    %edi,0xdc(%rax)
  0x00007f15f53394c5: movabs $0x7f15f0b2c000,%rax  ;   {metadata({method} {0x00007f15f0b2c000} 'hashCode' '()I' in 'java/lang/String')}
  0x00007f15f53394cf: and    $0x1ff8,%edi
  0x00007f15f53394d5: cmp    $0x0,%edi
  0x00007f15f53394d8: je     0x00007f15f5339611  ;*aload_0
                                                ; - java.lang.String::hashCode@0 (line 1466)

  0x00007f15f53394de: mov    0x10(%rsi),%eax    ;*getfield hash
                                                ; - java.lang.String::hashCode@1 (line 1466)

  0x00007f15f53394e1: cmp    $0x0,%eax
  0x00007f15f53394e4: movabs $0x7f15f0ceb9c0,%rdi  ;   {metadata(method data for {method} {0x00007f15f0b2c000} 'hashCode' '()I' in 'java/lang/String')}
  0x00007f15f53394ee: movabs $0x108,%rbx
  0x00007f15f53394f8: jne    0x00007f15f5339508
  0x00007f15f53394fe: movabs $0x118,%rbx
  0x00007f15f5339508: mov    (%rdi,%rbx,1),%rdx
  0x00007f15f533950c: lea    0x1(%rdx),%rdx
  0x00007f15f5339510: mov    %rdx,(%rdi,%rbx,1)
  0x00007f15f5339514: jne    0x00007f15f5339605  ;*ifne
                                                ; - java.lang.String::hashCode@6 (line 1467)

  0x00007f15f533951a: mov    0xc(%rsi),%edi
  0x00007f15f533951d: shl    $0x3,%rdi          ;*getfield value
                                                ; - java.lang.String::hashCode@10 (line 1467)

  0x00007f15f5339521: mov    0xc(%rdi),%ebx     ;*arraylength
                                                ; - java.lang.String::hashCode@13 (line 1467)
                                                ; implicit exception: dispatches to 0x00007f15f5339628
  0x00007f15f5339524: cmp    $0x0,%ebx
  0x00007f15f5339527: movabs $0x7f15f0ceb9c0,%rdx  ;   {metadata(method data for {method} {0x00007f15f0b2c000} 'hashCode' '()I' in 'java/lang/String')}
  0x00007f15f5339531: movabs $0x128,%rcx
  0x00007f15f533953b: jle    0x00007f15f533954b
  0x00007f15f5339541: movabs $0x138,%rcx
  0x00007f15f533954b: mov    (%rdx,%rcx,1),%r8
  0x00007f15f533954f: lea    0x1(%r8),%r8
  0x00007f15f5339553: mov    %r8,(%rdx,%rcx,1)
  0x00007f15f5339557: jle    0x00007f15f5339605  ;*ifle
                                                ; - java.lang.String::hashCode@14 (line 1467)

  0x00007f15f533955d: mov    $0x0,%edx
  0x00007f15f5339562: jmpq   0x00007f15f53395ca  ;*iload_3
                                                ; - java.lang.String::hashCode@24 (line 1470)

  0x00007f15f5339567: nop
  0x00007f15f5339568: movslq %edx,%rcx
  0x00007f15f533956b: movzwl 0x10(%rdi,%rcx,2),%ecx  ;*caload
                                                ; - java.lang.String::hashCode@39 (line 1471)

  0x00007f15f5339570: mov    %rax,%r8
  0x00007f15f5339573: shl    $0x5,%eax
  0x00007f15f5339576: sub    %r8d,%eax
  0x00007f15f5339579: add    %ecx,%eax
  0x00007f15f533957b: inc    %edx
  0x00007f15f533957d: movabs $0x7f15f0ceb9c0,%rcx  ;   {metadata(method data for {method} {0x00007f15f0b2c000} 'hashCode' '()I' in 'java/lang/String')}
  0x00007f15f5339587: mov    0xe0(%rcx),%r8d
  0x00007f15f533958e: add    $0x8,%r8d
  0x00007f15f5339592: mov    %r8d,0xe0(%rcx)
  0x00007f15f5339599: movabs $0x7f15f0b2c000,%rcx  ;   {metadata({method} {0x00007f15f0b2c000} 'hashCode' '()I' in 'java/lang/String')}
  0x00007f15f53395a3: and    $0xfff8,%r8d
  0x00007f15f53395aa: cmp    $0x0,%r8d
  0x00007f15f53395ae: je     0x00007f15f533962d  ; OopMap{rdi=Oop rsi=Oop off=308}
                                                ;*goto
                                                ; - java.lang.String::hashCode@45 (line 1470)

  0x00007f15f53395b4: test   %eax,0x14b96b46(%rip)        # 0x00007f1609ed0100
                                                ;   {poll}
  0x00007f15f53395ba: movabs $0x7f15f0ceb9c0,%rcx  ;   {metadata(method data for {method} {0x00007f15f0b2c000} 'hashCode' '()I' in 'java/lang/String')}
  0x00007f15f53395c4: incl   0x168(%rcx)        ;*goto
                                                ; - java.lang.String::hashCode@45 (line 1470)

  0x00007f15f53395ca: cmp    %ebx,%edx
  0x00007f15f53395cc: movabs $0x7f15f0ceb9c0,%rcx  ;   {metadata(method data for {method} {0x00007f15f0b2c000} 'hashCode' '()I' in 'java/lang/String')}
  0x00007f15f53395d6: movabs $0x148,%r8
  0x00007f15f53395e0: jge    0x00007f15f53395f0
  0x00007f15f53395e6: movabs $0x158,%r8
  0x00007f15f53395f0: mov    (%rcx,%r8,1),%r9
  0x00007f15f53395f4: lea    0x1(%r9),%r9
  0x00007f15f53395f8: mov    %r9,(%rcx,%r8,1)
  0x00007f15f53395fc: jl     0x00007f15f5339568  ;*if_icmpge
                                                ; - java.lang.String::hashCode@30 (line 1470)

  0x00007f15f5339602: mov    %eax,0x10(%rsi)    ;*putfield hash
                                                ; - java.lang.String::hashCode@50 (line 1473)

  0x00007f15f5339605: add    $0x30,%rsp
  0x00007f15f5339609: pop    %rbp
  0x00007f15f533960a: test   %eax,0x14b96af0(%rip)        # 0x00007f1609ed0100
                                                ;   {poll_return}
  0x00007f15f5339610: retq   
  0x00007f15f5339611: mov    %rax,0x8(%rsp)
  0x00007f15f5339616: movq   $0xffffffffffffffff,(%rsp)
  0x00007f15f533961e: callq  0x00007f15f518d220  ; OopMap{rsi=Oop off=419}
                                                ;*synchronization entry
                                                ; - java.lang.String::hashCode@-1 (line 1466)
                                                ;   {runtime_call}
  0x00007f15f5339623: jmpq   0x00007f15f53394de
  0x00007f15f5339628: callq  0x00007f15f5072940  ; OopMap{rsi=Oop rdi=Oop off=429}
                                                ;*arraylength
                                                ; - java.lang.String::hashCode@13 (line 1467)
                                                ;   {runtime_call}
  0x00007f15f533962d: mov    %rcx,0x8(%rsp)
  0x00007f15f5339632: movq   $0x2d,(%rsp)
  0x00007f15f533963a: callq  0x00007f15f518d220  ; OopMap{rdi=Oop rsi=Oop off=447}
                                                ;*goto
                                                ; - java.lang.String::hashCode@45 (line 1470)
                                                ;   {runtime_call}
  0x00007f15f533963f: jmpq   0x00007f15f53395b4
  0x00007f15f5339644: nop
  0x00007f15f5339645: nop
  0x00007f15f5339646: mov    0x300(%r15),%rax
  0x00007f15f533964d: movabs $0x0,%r10
  0x00007f15f5339657: mov    %r10,0x300(%r15)
  0x00007f15f533965e: movabs $0x0,%r10
  0x00007f15f5339668: mov    %r10,0x308(%r15)
  0x00007f15f533966f: add    $0x30,%rsp
  0x00007f15f5339673: pop    %rbp
  0x00007f15f5339674: jmpq   0x00007f15f506ff20  ;   {runtime_call}
  0x00007f15f5339679: hlt    
  0x00007f15f533967a: hlt    
  0x00007f15f533967b: hlt    
  0x00007f15f533967c: hlt    
  0x00007f15f533967d: hlt    
  0x00007f15f533967e: hlt    
  0x00007f15f533967f: hlt    
[Exception Handler]
[Stub Code]
  0x00007f15f5339680: callq  0x00007f15f50709e0  ;   {no_reloc}
  0x00007f15f5339685: mov    %rsp,-0x28(%rsp)
  0x00007f15f533968a: sub    $0x80,%rsp
  0x00007f15f5339691: mov    %rax,0x78(%rsp)
  0x00007f15f5339696: mov    %rcx,0x70(%rsp)
  0x00007f15f533969b: mov    %rdx,0x68(%rsp)
  0x00007f15f53396a0: mov    %rbx,0x60(%rsp)
  0x00007f15f53396a5: mov    %rbp,0x50(%rsp)
  0x00007f15f53396aa: mov    %rsi,0x48(%rsp)
  0x00007f15f53396af: mov    %rdi,0x40(%rsp)
  0x00007f15f53396b4: mov    %r8,0x38(%rsp)
  0x00007f15f53396b9: mov    %r9,0x30(%rsp)
  0x00007f15f53396be: mov    %r10,0x28(%rsp)
  0x00007f15f53396c3: mov    %r11,0x20(%rsp)
  0x00007f15f53396c8: mov    %r12,0x18(%rsp)
  0x00007f15f53396cd: mov    %r13,0x10(%rsp)
  0x00007f15f53396d2: mov    %r14,0x8(%rsp)
  0x00007f15f53396d7: mov    %r15,(%rsp)
  0x00007f15f53396db: movabs $0x7f16099be49e,%rdi  ;   {external_word}
  0x00007f15f53396e5: movabs $0x7f15f5339685,%rsi  ;   {internal_word}
  0x00007f15f53396ef: mov    %rsp,%rdx
  0x00007f15f53396f2: and    $0xfffffffffffffff0,%rsp
  0x00007f15f53396f6: callq  0x00007f16096e4460  ;   {runtime_call}
  0x00007f15f53396fb: hlt    
[Deopt Handler Code]
  0x00007f15f53396fc: movabs $0x7f15f53396fc,%r10  ;   {section_word}
  0x00007f15f5339706: push   %r10
  0x00007f15f5339708: jmpq   0x00007f15f5046e40  ;   {runtime_call}
  0x00007f15f533970d: hlt    
  0x00007f15f533970e: hlt    
  0x00007f15f533970f: hlt    
Decoding compiled method 0x00007f15f533b7d0:
Code:
[Entry Point]
[Verified Entry Point]
[Constants]
  # {method} {0x00007f15f0c1e0a8} 'min' '(II)I' in 'java/lang/Math'
  # parm0:    rsi       = int
  # parm1:    rdx       = int
  #           [sp+0x40]  (sp of caller)
  0x00007f15f533b940: mov    %eax,-0x14000(%rsp)
  0x00007f15f533b947: push   %rbp
  0x00007f15f533b948: sub    $0x30,%rsp
  0x00007f15f533b94c: movabs $0x7f15f0cedca8,%rax  ;   {metadata(method data for {method} {0x00007f15f0c1e0a8} 'min' '(II)I' in 'java/lang/Math')}
  0x00007f15f533b956: mov    0xdc(%rax),%edi
  0x00007f15f533b95c: add    $0x8,%edi
  0x00007f15f533b95f: mov    %edi,0xdc(%rax)
  0x00007f15f533b965: movabs $0x7f15f0c1e0a8,%rax  ;   {metadata({method} {0x00007f15f0c1e0a8} 'min' '(II)I' in 'java/lang/Math')}
  0x00007f15f533b96f: and    $0x1ff8,%edi
  0x00007f15f533b975: cmp    $0x0,%edi
  0x00007f15f533b978: je     0x00007f15f533b9dd  ;*iload_0
                                                ; - java.lang.Math::min@0 (line 1336)

  0x00007f15f533b97e: cmp    %edx,%esi
  0x00007f15f533b980: movabs $0x7f15f0cedca8,%rax  ;   {metadata(method data for {method} {0x00007f15f0c1e0a8} 'min' '(II)I' in 'java/lang/Math')}
  0x00007f15f533b98a: movabs $0x108,%rdi
  0x00007f15f533b994: jg     0x00007f15f533b9a4
  0x00007f15f533b99a: movabs $0x118,%rdi
  0x00007f15f533b9a4: mov    (%rax,%rdi,1),%rbx
  0x00007f15f533b9a8: lea    0x1(%rbx),%rbx
  0x00007f15f533b9ac: mov    %rbx,(%rax,%rdi,1)
  0x00007f15f533b9b0: jg     0x00007f15f533b9cb  ;*if_icmpgt
                                                ; - java.lang.Math::min@2 (line 1336)

  0x00007f15f533b9b6: movabs $0x7f15f0cedca8,%rax  ;   {metadata(method data for {method} {0x00007f15f0c1e0a8} 'min' '(II)I' in 'java/lang/Math')}
  0x00007f15f533b9c0: incl   0x128(%rax)
  0x00007f15f533b9c6: jmpq   0x00007f15f533b9ce  ;*goto
                                                ; - java.lang.Math::min@6 (line 1336)

  0x00007f15f533b9cb: mov    %rdx,%rsi          ;*ireturn
                                                ; - java.lang.Math::min@10 (line 1336)

  0x00007f15f533b9ce: mov    %rsi,%rax
  0x00007f15f533b9d1: add    $0x30,%rsp
  0x00007f15f533b9d5: pop    %rbp
  0x00007f15f533b9d6: test   %eax,0x14b94724(%rip)        # 0x00007f1609ed0100
                                                ;   {poll_return}
  0x00007f15f533b9dc: retq   
  0x00007f15f533b9dd: mov    %rax,0x8(%rsp)
  0x00007f15f533b9e2: movq   $0xffffffffffffffff,(%rsp)
  0x00007f15f533b9ea: callq  0x00007f15f518d220  ; OopMap{off=175}
                                                ;*synchronization entry
                                                ; - java.lang.Math::min@-1 (line 1336)
                                                ;   {runtime_call}
  0x00007f15f533b9ef: jmp    0x00007f15f533b97e
  0x00007f15f533b9f1: nop
  0x00007f15f533b9f2: nop
  0x00007f15f533b9f3: mov    0x300(%r15),%rax
  0x00007f15f533b9fa: movabs $0x0,%r10
  0x00007f15f533ba04: mov    %r10,0x300(%r15)
  0x00007f15f533ba0b: movabs $0x0,%r10
  0x00007f15f533ba15: mov    %r10,0x308(%r15)
  0x00007f15f533ba1c: add    $0x30,%rsp
  0x00007f15f533ba20: pop    %rbp
  0x00007f15f533ba21: jmpq   0x00007f15f506ff20  ;   {runtime_call}
  0x00007f15f533ba26: hlt    
  0x00007f15f533ba27: hlt    
  0x00007f15f533ba28: hlt    
  0x00007f15f533ba29: hlt    
  0x00007f15f533ba2a: hlt    
  0x00007f15f533ba2b: hlt    
  0x00007f15f533ba2c: hlt    
  0x00007f15f533ba2d: hlt    
  0x00007f15f533ba2e: hlt    
  0x00007f15f533ba2f: hlt    
  0x00007f15f533ba30: hlt    
  0x00007f15f533ba31: hlt    
  0x00007f15f533ba32: hlt    
  0x00007f15f533ba33: hlt    
  0x00007f15f533ba34: hlt    
  0x00007f15f533ba35: hlt    
  0x00007f15f533ba36: hlt    
  0x00007f15f533ba37: hlt    
  0x00007f15f533ba38: hlt    
  0x00007f15f533ba39: hlt    
  0x00007f15f533ba3a: hlt    
  0x00007f15f533ba3b: hlt    
  0x00007f15f533ba3c: hlt    
  0x00007f15f533ba3d: hlt    
  0x00007f15f533ba3e: hlt    
  0x00007f15f533ba3f: hlt    
[Exception Handler]
[Stub Code]
  0x00007f15f533ba40: callq  0x00007f15f50709e0  ;   {no_reloc}
  0x00007f15f533ba45: mov    %rsp,-0x28(%rsp)
  0x00007f15f533ba4a: sub    $0x80,%rsp
  0x00007f15f533ba51: mov    %rax,0x78(%rsp)
  0x00007f15f533ba56: mov    %rcx,0x70(%rsp)
  0x00007f15f533ba5b: mov    %rdx,0x68(%rsp)
  0x00007f15f533ba60: mov    %rbx,0x60(%rsp)
  0x00007f15f533ba65: mov    %rbp,0x50(%rsp)
  0x00007f15f533ba6a: mov    %rsi,0x48(%rsp)
  0x00007f15f533ba6f: mov    %rdi,0x40(%rsp)
  0x00007f15f533ba74: mov    %r8,0x38(%rsp)
  0x00007f15f533ba79: mov    %r9,0x30(%rsp)
  0x00007f15f533ba7e: mov    %r10,0x28(%rsp)
  0x00007f15f533ba83: mov    %r11,0x20(%rsp)
  0x00007f15f533ba88: mov    %r12,0x18(%rsp)
  0x00007f15f533ba8d: mov    %r13,0x10(%rsp)
  0x00007f15f533ba92: mov    %r14,0x8(%rsp)
  0x00007f15f533ba97: mov    %r15,(%rsp)
  0x00007f15f533ba9b: movabs $0x7f16099be49e,%rdi  ;   {external_word}
  0x00007f15f533baa5: movabs $0x7f15f533ba45,%rsi  ;   {internal_word}
  0x00007f15f533baaf: mov    %rsp,%rdx
  0x00007f15f533bab2: and    $0xfffffffffffffff0,%rsp
  0x00007f15f533bab6: callq  0x00007f16096e4460  ;   {runtime_call}
  0x00007f15f533babb: hlt    
[Deopt Handler Code]
  0x00007f15f533babc: movabs $0x7f15f533babc,%r10  ;   {section_word}
  0x00007f15f533bac6: push   %r10
  0x00007f15f533bac8: jmpq   0x00007f15f5046e40  ;   {runtime_call}
  0x00007f15f533bacd: hlt    
  0x00007f15f533bace: hlt    
  0x00007f15f533bacf: hlt    
Decoding compiled method 0x00007f15f533b310:
Code:
[Entry Point]
[Constants]
  # {method} {0x00007f15f0b9c338} '<init>' '(I)V' in 'java/lang/AbstractStringBuilder'
  # this:     rsi:rsi   = 'java/lang/AbstractStringBuilder'
  # parm0:    rdx       = int
  #           [sp+0x50]  (sp of caller)
  0x00007f15f533b480: mov    0x8(%rsi),%r10d
  0x00007f15f533b484: shl    $0x3,%r10
  0x00007f15f533b488: cmp    %rax,%r10
  0x00007f15f533b48b: jne    0x00007f15f5045ba0  ;   {runtime_call}
  0x00007f15f533b491: nopl   0x0(%rax,%rax,1)
  0x00007f15f533b499: nopl   0x0(%rax)
[Verified Entry Point]
  0x00007f15f533b4a0: mov    %eax,-0x14000(%rsp)
  0x00007f15f533b4a7: push   %rbp
  0x00007f15f533b4a8: sub    $0x40,%rsp
  0x00007f15f533b4ac: movabs $0x7f15f0dc95b0,%rdi  ;   {metadata(method data for {method} {0x00007f15f0b9c338} '<init>' '(I)V' in 'java/lang/AbstractStringBuilder')}
  0x00007f15f533b4b6: mov    0xdc(%rdi),%ebx
  0x00007f15f533b4bc: add    $0x8,%ebx
  0x00007f15f533b4bf: mov    %ebx,0xdc(%rdi)
  0x00007f15f533b4c5: movabs $0x7f15f0b9c338,%rdi  ;   {metadata({method} {0x00007f15f0b9c338} '<init>' '(I)V' in 'java/lang/AbstractStringBuilder')}
  0x00007f15f533b4cf: and    $0x1ff8,%ebx
  0x00007f15f533b4d5: cmp    $0x0,%ebx
  0x00007f15f533b4d8: je     0x00007f15f533b5b5  ;*aload_0
                                                ; - java.lang.AbstractStringBuilder::<init>@0 (line 67)

  0x00007f15f533b4de: mov    %edx,0x20(%rsp)
  0x00007f15f533b4e2: mov    %rsi,%rdi
  0x00007f15f533b4e5: movabs $0x7f15f0dc95b0,%rbx  ;   {metadata(method data for {method} {0x00007f15f0b9c338} '<init>' '(I)V' in 'java/lang/AbstractStringBuilder')}
  0x00007f15f533b4ef: addq   $0x1,0x108(%rbx)
  0x00007f15f533b4f7: mov    %rsi,%rdi
  0x00007f15f533b4fa: mov    %rdi,%rsi          ;*invokespecial <init>
                                                ; - java.lang.AbstractStringBuilder::<init>@1 (line 67)

  0x00007f15f533b4fd: mov    %rdi,0x28(%rsp)
  0x00007f15f533b502: nop
  0x00007f15f533b503: nop
  0x00007f15f533b504: nop
  0x00007f15f533b505: nop
  0x00007f15f533b506: nop
  0x00007f15f533b507: callq  0x00007f15f5045de0  ; OopMap{[40]=Oop off=140}
                                                ;*invokespecial <init>
                                                ; - java.lang.AbstractStringBuilder::<init>@1 (line 67)
                                                ;   {optimized virtual_call}
  0x00007f15f533b50c: mov    0x20(%rsp),%ebx
  0x00007f15f533b510: movabs $0x7c0000208,%rdx  ;   {metadata({type array char})}
  0x00007f15f533b51a: movslq %ebx,%rbx
  0x00007f15f533b51d: mov    %rbx,%rdi
  0x00007f15f533b520: cmp    $0xffffff,%rbx
  0x00007f15f533b527: ja     0x00007f15f533b5cc
  0x00007f15f533b52d: movabs $0x17,%rsi
  0x00007f15f533b537: lea    (%rsi,%rbx,2),%rsi
  0x00007f15f533b53b: and    $0xfffffffffffffff8,%rsi
  0x00007f15f533b53f: mov    0x60(%r15),%rax
  0x00007f15f533b543: lea    (%rax,%rsi,1),%rsi
  0x00007f15f533b547: cmp    0x70(%r15),%rsi
  0x00007f15f533b54b: ja     0x00007f15f533b5cc
  0x00007f15f533b551: mov    %rsi,0x60(%r15)
  0x00007f15f533b555: sub    %rax,%rsi
  0x00007f15f533b558: movq   $0x1,(%rax)
  0x00007f15f533b55f: mov    %rdx,%rcx
  0x00007f15f533b562: shr    $0x3,%rcx
  0x00007f15f533b566: mov    %ecx,0x8(%rax)
  0x00007f15f533b569: mov    %ebx,0xc(%rax)
  0x00007f15f533b56c: sub    $0x10,%rsi
  0x00007f15f533b570: je     0x00007f15f533b587
  0x00007f15f533b576: xor    %rbx,%rbx
  0x00007f15f533b579: shr    $0x3,%rsi
  0x00007f15f533b57d: mov    %rbx,0x8(%rax,%rsi,8)
  0x00007f15f533b582: dec    %rsi
  0x00007f15f533b585: jne    0x00007f15f533b57d  ;*newarray
                                                ; - java.lang.AbstractStringBuilder::<init>@6 (line 68)

  0x00007f15f533b587: mov    0x28(%rsp),%rsi
  0x00007f15f533b58c: mov    %rax,%r10
  0x00007f15f533b58f: shr    $0x3,%r10
  0x00007f15f533b593: mov    %r10d,0x10(%rsi)
  0x00007f15f533b597: shr    $0x9,%rsi
  0x00007f15f533b59b: movabs $0x7f15f11ff000,%rdi
  0x00007f15f533b5a5: movb   $0x0,(%rsi,%rdi,1)  ;*putfield value
                                                ; - java.lang.AbstractStringBuilder::<init>@8 (line 68)

  0x00007f15f533b5a9: add    $0x40,%rsp
  0x00007f15f533b5ad: pop    %rbp
  0x00007f15f533b5ae: test   %eax,0x14b94b4c(%rip)        # 0x00007f1609ed0100
                                                ;   {poll_return}
  0x00007f15f533b5b4: retq   
  0x00007f15f533b5b5: mov    %rdi,0x8(%rsp)
  0x00007f15f533b5ba: movq   $0xffffffffffffffff,(%rsp)
  0x00007f15f533b5c2: callq  0x00007f15f518d220  ; OopMap{rsi=Oop off=327}
                                                ;*synchronization entry
                                                ; - java.lang.AbstractStringBuilder::<init>@-1 (line 67)
                                                ;   {runtime_call}
  0x00007f15f533b5c7: jmpq   0x00007f15f533b4de
  0x00007f15f533b5cc: callq  0x00007f15f50716a0  ; OopMap{[40]=Oop off=337}
                                                ;*newarray
                                                ; - java.lang.AbstractStringBuilder::<init>@6 (line 68)
                                                ;   {runtime_call}
  0x00007f15f533b5d1: jmp    0x00007f15f533b587
  0x00007f15f533b5d3: nop
  0x00007f15f533b5d4: nop
  0x00007f15f533b5d5: mov    0x300(%r15),%rax
  0x00007f15f533b5dc: movabs $0x0,%r10
  0x00007f15f533b5e6: mov    %r10,0x300(%r15)
  0x00007f15f533b5ed: movabs $0x0,%r10
  0x00007f15f533b5f7: mov    %r10,0x308(%r15)
  0x00007f15f533b5fe: add    $0x40,%rsp
  0x00007f15f533b602: pop    %rbp
  0x00007f15f533b603: jmpq   0x00007f15f506ff20  ;   {runtime_call}
  0x00007f15f533b608: hlt    
  0x00007f15f533b609: hlt    
  0x00007f15f533b60a: hlt    
  0x00007f15f533b60b: hlt    
  0x00007f15f533b60c: hlt    
  0x00007f15f533b60d: hlt    
  0x00007f15f533b60e: hlt    
  0x00007f15f533b60f: hlt    
  0x00007f15f533b610: hlt    
  0x00007f15f533b611: hlt    
  0x00007f15f533b612: hlt    
  0x00007f15f533b613: hlt    
  0x00007f15f533b614: hlt    
  0x00007f15f533b615: hlt    
  0x00007f15f533b616: hlt    
  0x00007f15f533b617: hlt    
  0x00007f15f533b618: hlt    
  0x00007f15f533b619: hlt    
  0x00007f15f533b61a: hlt    
  0x00007f15f533b61b: hlt    
  0x00007f15f533b61c: hlt    
  0x00007f15f533b61d: hlt    
  0x00007f15f533b61e: hlt    
  0x00007f15f533b61f: hlt    
[Stub Code]
  0x00007f15f533b620: nop                       ;   {no_reloc}
  0x00007f15f533b621: nop
  0x00007f15f533b622: nop
  0x00007f15f533b623: nop
  0x00007f15f533b624: nop
  0x00007f15f533b625: movabs $0x0,%rbx          ;   {static_stub}
  0x00007f15f533b62f: jmpq   0x00007f15f533b62f  ;   {runtime_call}
[Exception Handler]
  0x00007f15f533b634: callq  0x00007f15f50709e0  ;   {runtime_call}
  0x00007f15f533b639: mov    %rsp,-0x28(%rsp)
  0x00007f15f533b63e: sub    $0x80,%rsp
  0x00007f15f533b645: mov    %rax,0x78(%rsp)
  0x00007f15f533b64a: mov    %rcx,0x70(%rsp)
  0x00007f15f533b64f: mov    %rdx,0x68(%rsp)
  0x00007f15f533b654: mov    %rbx,0x60(%rsp)
  0x00007f15f533b659: mov    %rbp,0x50(%rsp)
  0x00007f15f533b65e: mov    %rsi,0x48(%rsp)
  0x00007f15f533b663: mov    %rdi,0x40(%rsp)
  0x00007f15f533b668: mov    %r8,0x38(%rsp)
  0x00007f15f533b66d: mov    %r9,0x30(%rsp)
  0x00007f15f533b672: mov    %r10,0x28(%rsp)
  0x00007f15f533b677: mov    %r11,0x20(%rsp)
  0x00007f15f533b67c: mov    %r12,0x18(%rsp)
  0x00007f15f533b681: mov    %r13,0x10(%rsp)
  0x00007f15f533b686: mov    %r14,0x8(%rsp)
  0x00007f15f533b68b: mov    %r15,(%rsp)
  0x00007f15f533b68f: movabs $0x7f16099be49e,%rdi  ;   {external_word}
  0x00007f15f533b699: movabs $0x7f15f533b639,%rsi  ;   {internal_word}
  0x00007f15f533b6a3: mov    %rsp,%rdx
  0x00007f15f533b6a6: and    $0xfffffffffffffff0,%rsp
  0x00007f15f533b6aa: callq  0x00007f16096e4460  ;   {runtime_call}
  0x00007f15f533b6af: hlt    
[Deopt Handler Code]
  0x00007f15f533b6b0: movabs $0x7f15f533b6b0,%r10  ;   {section_word}
  0x00007f15f533b6ba: push   %r10
  0x00007f15f533b6bc: jmpq   0x00007f15f5046e40  ;   {runtime_call}
  0x00007f15f533b6c1: hlt    
  0x00007f15f533b6c2: hlt    
  0x00007f15f533b6c3: hlt    
  0x00007f15f533b6c4: hlt    
  0x00007f15f533b6c5: hlt    
  0x00007f15f533b6c6: hlt    
  0x00007f15f533b6c7: hlt    
Decoding compiled method 0x00007f15f5344ad0:
Code:
[Entry Point]
[Constants]
  # {method} {0x00007f15f0b2b618} 'equals' '(Ljava/lang/Object;)Z' in 'java/lang/String'
  # this:     rsi:rsi   = 'java/lang/String'
  # parm0:    rdx:rdx   = 'java/lang/Object'
  #           [sp+0x40]  (sp of caller)
  0x00007f15f5344c60: mov    0x8(%rsi),%r10d
  0x00007f15f5344c64: shl    $0x3,%r10
  0x00007f15f5344c68: cmp    %rax,%r10
  0x00007f15f5344c6b: jne    0x00007f15f5045ba0  ;   {runtime_call}
  0x00007f15f5344c71: nopl   0x0(%rax,%rax,1)
  0x00007f15f5344c79: nopl   0x0(%rax)
[Verified Entry Point]
  0x00007f15f5344c80: mov    %eax,-0x14000(%rsp)
  0x00007f15f5344c87: push   %rbp
  0x00007f15f5344c88: sub    $0x30,%rsp
  0x00007f15f5344c8c: movabs $0x7f15f0d2da40,%rax  ;   {metadata(method data for {method} {0x00007f15f0b2b618} 'equals' '(Ljava/lang/Object;)Z' in 'java/lang/String')}
  0x00007f15f5344c96: mov    0xdc(%rax),%edi
  0x00007f15f5344c9c: add    $0x8,%edi
  0x00007f15f5344c9f: mov    %edi,0xdc(%rax)
  0x00007f15f5344ca5: movabs $0x7f15f0b2b618,%rax  ;   {metadata({method} {0x00007f15f0b2b618} 'equals' '(Ljava/lang/Object;)Z' in 'java/lang/String')}
  0x00007f15f5344caf: and    $0x1ff8,%edi
  0x00007f15f5344cb5: cmp    $0x0,%edi
  0x00007f15f5344cb8: je     0x00007f15f5345086  ;*aload_0
                                                ; - java.lang.String::equals@0 (line 977)

  0x00007f15f5344cbe: cmp    %rdx,%rsi
  0x00007f15f5344cc1: movabs $0x7f15f0d2da40,%rax  ;   {metadata(method data for {method} {0x00007f15f0b2b618} 'equals' '(Ljava/lang/Object;)Z' in 'java/lang/String')}
  0x00007f15f5344ccb: movabs $0x108,%rdi
  0x00007f15f5344cd5: jne    0x00007f15f5344ce5
  0x00007f15f5344cdb: movabs $0x118,%rdi
  0x00007f15f5344ce5: mov    (%rax,%rdi,1),%rbx
  0x00007f15f5344ce9: lea    0x1(%rbx),%rbx
  0x00007f15f5344ced: mov    %rbx,(%rax,%rdi,1)
  0x00007f15f5344cf1: je     0x00007f15f5345075  ;*if_acmpne
                                                ; - java.lang.String::equals@2 (line 977)

  0x00007f15f5344cf7: cmp    $0x0,%rdx
  0x00007f15f5344cfb: jne    0x00007f15f5344d16
  0x00007f15f5344cfd: movabs $0x7f15f0d2da40,%rbx  ;   {metadata(method data for {method} {0x00007f15f0b2b618} 'equals' '(Ljava/lang/Object;)Z' in 'java/lang/String')}
  0x00007f15f5344d07: orl    $0x100,0x120(%rbx)
  0x00007f15f5344d11: jmpq   0x00007f15f5344dd6
  0x00007f15f5344d16: movabs $0x7c00016d0,%rcx  ;   {metadata('java/lang/String')}
  0x00007f15f5344d20: mov    0x8(%rdx),%edi
  0x00007f15f5344d23: shl    $0x3,%rdi
  0x00007f15f5344d27: cmp    %rdi,%rcx
  0x00007f15f5344d2a: jne    0x00007f15f5344dba
  0x00007f15f5344d30: movabs $0x7f15f0d2da40,%rbx  ;   {metadata(method data for {method} {0x00007f15f0b2b618} 'equals' '(Ljava/lang/Object;)Z' in 'java/lang/String')}
  0x00007f15f5344d3a: mov    0x8(%rdx),%ecx
  0x00007f15f5344d3d: shl    $0x3,%rcx
  0x00007f15f5344d41: cmp    0x130(%rbx),%rcx
  0x00007f15f5344d48: jne    0x00007f15f5344d57
  0x00007f15f5344d4a: addq   $0x1,0x138(%rbx)
  0x00007f15f5344d52: jmpq   0x00007f15f5344ddb
  0x00007f15f5344d57: cmp    0x140(%rbx),%rcx
  0x00007f15f5344d5e: jne    0x00007f15f5344d6d
  0x00007f15f5344d60: addq   $0x1,0x148(%rbx)
  0x00007f15f5344d68: jmpq   0x00007f15f5344ddb
  0x00007f15f5344d6d: cmpq   $0x0,0x130(%rbx)
  0x00007f15f5344d78: jne    0x00007f15f5344d91
  0x00007f15f5344d7a: mov    %rcx,0x130(%rbx)
  0x00007f15f5344d81: movq   $0x1,0x138(%rbx)
  0x00007f15f5344d8c: jmpq   0x00007f15f5344ddb
  0x00007f15f5344d91: cmpq   $0x0,0x140(%rbx)
  0x00007f15f5344d9c: jne    0x00007f15f5344db5
  0x00007f15f5344d9e: mov    %rcx,0x140(%rbx)
  0x00007f15f5344da5: movq   $0x1,0x148(%rbx)
  0x00007f15f5344db0: jmpq   0x00007f15f5344ddb
  0x00007f15f5344db5: jmpq   0x00007f15f5344ddb
  0x00007f15f5344dba: movabs $0x7f15f0d2da40,%rbx  ;   {metadata(method data for {method} {0x00007f15f0b2b618} 'equals' '(Ljava/lang/Object;)Z' in 'java/lang/String')}
  0x00007f15f5344dc4: subq   $0x1,0x128(%rbx)
  0x00007f15f5344dcc: jmpq   0x00007f15f5344dd6
  0x00007f15f5344dd1: jmpq   0x00007f15f5344ddb
  0x00007f15f5344dd6: xor    %rax,%rax
  0x00007f15f5344dd9: jmp    0x00007f15f5344de5
  0x00007f15f5344ddb: movabs $0x1,%rax          ;*instanceof
                                                ; - java.lang.String::equals@8 (line 980)

  0x00007f15f5344de5: cmp    $0x0,%eax
  0x00007f15f5344de8: movabs $0x7f15f0d2da40,%rax  ;   {metadata(method data for {method} {0x00007f15f0b2b618} 'equals' '(Ljava/lang/Object;)Z' in 'java/lang/String')}
  0x00007f15f5344df2: movabs $0x158,%rdi
  0x00007f15f5344dfc: je     0x00007f15f5344e0c
  0x00007f15f5344e02: movabs $0x168,%rdi
  0x00007f15f5344e0c: mov    (%rax,%rdi,1),%rbx
  0x00007f15f5344e10: lea    0x1(%rbx),%rbx
  0x00007f15f5344e14: mov    %rbx,(%rax,%rdi,1)
  0x00007f15f5344e18: je     0x00007f15f5345064  ;*ifeq
                                                ; - java.lang.String::equals@11 (line 980)

  0x00007f15f5344e1e: cmp    $0x0,%rdx
  0x00007f15f5344e22: jne    0x00007f15f5344e3d
  0x00007f15f5344e24: movabs $0x7f15f0d2da40,%rbx  ;   {metadata(method data for {method} {0x00007f15f0b2b618} 'equals' '(Ljava/lang/Object;)Z' in 'java/lang/String')}
  0x00007f15f5344e2e: orl    $0x100,0x170(%rbx)
  0x00007f15f5344e38: jmpq   0x00007f15f5344efd
  0x00007f15f5344e3d: movabs $0x7c00016d0,%rax  ;   {metadata('java/lang/String')}
  0x00007f15f5344e47: mov    0x8(%rdx),%edi
  0x00007f15f5344e4a: shl    $0x3,%rdi
  0x00007f15f5344e4e: cmp    %rdi,%rax
  0x00007f15f5344e51: jne    0x00007f15f5344ee1
  0x00007f15f5344e57: movabs $0x7f15f0d2da40,%rbx  ;   {metadata(method data for {method} {0x00007f15f0b2b618} 'equals' '(Ljava/lang/Object;)Z' in 'java/lang/String')}
  0x00007f15f5344e61: mov    0x8(%rdx),%eax
  0x00007f15f5344e64: shl    $0x3,%rax
  0x00007f15f5344e68: cmp    0x180(%rbx),%rax
  0x00007f15f5344e6f: jne    0x00007f15f5344e7e
  0x00007f15f5344e71: addq   $0x1,0x188(%rbx)
  0x00007f15f5344e79: jmpq   0x00007f15f5344efd
  0x00007f15f5344e7e: cmp    0x190(%rbx),%rax
  0x00007f15f5344e85: jne    0x00007f15f5344e94
  0x00007f15f5344e87: addq   $0x1,0x198(%rbx)
  0x00007f15f5344e8f: jmpq   0x00007f15f5344efd
  0x00007f15f5344e94: cmpq   $0x0,0x180(%rbx)
  0x00007f15f5344e9f: jne    0x00007f15f5344eb8
  0x00007f15f5344ea1: mov    %rax,0x180(%rbx)
  0x00007f15f5344ea8: movq   $0x1,0x188(%rbx)
  0x00007f15f5344eb3: jmpq   0x00007f15f5344efd
  0x00007f15f5344eb8: cmpq   $0x0,0x190(%rbx)
  0x00007f15f5344ec3: jne    0x00007f15f5344edc
  0x00007f15f5344ec5: mov    %rax,0x190(%rbx)
  0x00007f15f5344ecc: movq   $0x1,0x198(%rbx)
  0x00007f15f5344ed7: jmpq   0x00007f15f5344efd
  0x00007f15f5344edc: jmpq   0x00007f15f5344efd
  0x00007f15f5344ee1: movabs $0x7f15f0d2da40,%rbx  ;   {metadata(method data for {method} {0x00007f15f0b2b618} 'equals' '(Ljava/lang/Object;)Z' in 'java/lang/String')}
  0x00007f15f5344eeb: subq   $0x1,0x178(%rbx)
  0x00007f15f5344ef3: jmpq   0x00007f15f534509d
  0x00007f15f5344ef8: jmpq   0x00007f15f5344efd
  0x00007f15f5344efd: mov    %rdx,%rax          ;*checkcast
                                                ; - java.lang.String::equals@15 (line 981)

  0x00007f15f5344f00: mov    0xc(%rsi),%esi
  0x00007f15f5344f03: shl    $0x3,%rsi          ;*getfield value
                                                ; - java.lang.String::equals@20 (line 982)

  0x00007f15f5344f07: mov    0xc(%rsi),%edi     ;*arraylength
                                                ; - java.lang.String::equals@23 (line 982)
                                                ; implicit exception: dispatches to 0x00007f15f53450a6
  0x00007f15f5344f0a: mov    0xc(%rax),%eax     ; implicit exception: dispatches to 0x00007f15f53450ab
  0x00007f15f5344f0d: shl    $0x3,%rax          ;*getfield value
                                                ; - java.lang.String::equals@27 (line 983)

  0x00007f15f5344f11: mov    0xc(%rax),%ebx     ;*arraylength
                                                ; - java.lang.String::equals@30 (line 983)
                                                ; implicit exception: dispatches to 0x00007f15f53450b0
  0x00007f15f5344f14: cmp    %ebx,%edi
  0x00007f15f5344f16: movabs $0x7f15f0d2da40,%rbx  ;   {metadata(method data for {method} {0x00007f15f0b2b618} 'equals' '(Ljava/lang/Object;)Z' in 'java/lang/String')}
  0x00007f15f5344f20: movabs $0x1a8,%rdx
  0x00007f15f5344f2a: jne    0x00007f15f5344f3a
  0x00007f15f5344f30: movabs $0x1b8,%rdx
  0x00007f15f5344f3a: mov    (%rbx,%rdx,1),%rcx
  0x00007f15f5344f3e: lea    0x1(%rcx),%rcx
  0x00007f15f5344f42: mov    %rcx,(%rbx,%rdx,1)
  0x00007f15f5344f46: jne    0x00007f15f5345064  ;*if_icmpne
                                                ; - java.lang.String::equals@31 (line 983)

  0x00007f15f5344f4c: mov    $0x0,%ebx
  0x00007f15f5344f51: jmpq   0x00007f15f5344fff  ;*iload_3
                                                ; - java.lang.String::equals@49 (line 987)

  0x00007f15f5344f56: xchg   %ax,%ax
  0x00007f15f5344f58: movslq %ebx,%rdi
  0x00007f15f5344f5b: cmp    0xc(%rsi),%ebx
  0x00007f15f5344f5e: jae    0x00007f15f53450b5
  0x00007f15f5344f64: movzwl 0x10(%rsi,%rdi,2),%edi  ;*caload
                                                ; - java.lang.String::equals@60 (line 988)

  0x00007f15f5344f69: movslq %ebx,%rcx
  0x00007f15f5344f6c: cmp    0xc(%rax),%ebx
  0x00007f15f5344f6f: jae    0x00007f15f53450be
  0x00007f15f5344f75: movzwl 0x10(%rax,%rcx,2),%ecx  ;*caload
                                                ; - java.lang.String::equals@65 (line 988)

  0x00007f15f5344f7a: cmp    %ecx,%edi
  0x00007f15f5344f7c: movabs $0x7f15f0d2da40,%rdi  ;   {metadata(method data for {method} {0x00007f15f0b2b618} 'equals' '(Ljava/lang/Object;)Z' in 'java/lang/String')}
  0x00007f15f5344f86: movabs $0x1e8,%rcx
  0x00007f15f5344f90: je     0x00007f15f5344fa0
  0x00007f15f5344f96: movabs $0x1f8,%rcx
  0x00007f15f5344fa0: mov    (%rdi,%rcx,1),%r8
  0x00007f15f5344fa4: lea    0x1(%r8),%r8
  0x00007f15f5344fa8: mov    %r8,(%rdi,%rcx,1)
  0x00007f15f5344fac: jne    0x00007f15f5345042  ;*if_icmpeq
                                                ; - java.lang.String::equals@66 (line 988)

  0x00007f15f5344fb2: inc    %ebx
  0x00007f15f5344fb4: movabs $0x7f15f0d2da40,%rdi  ;   {metadata(method data for {method} {0x00007f15f0b2b618} 'equals' '(Ljava/lang/Object;)Z' in 'java/lang/String')}
  0x00007f15f5344fbe: mov    0xe0(%rdi),%ecx
  0x00007f15f5344fc4: add    $0x8,%ecx
  0x00007f15f5344fc7: mov    %ecx,0xe0(%rdi)
  0x00007f15f5344fcd: movabs $0x7f15f0b2b618,%rdi  ;   {metadata({method} {0x00007f15f0b2b618} 'equals' '(Ljava/lang/Object;)Z' in 'java/lang/String')}
  0x00007f15f5344fd7: and    $0xfff8,%ecx
  0x00007f15f5344fdd: cmp    $0x0,%ecx
  0x00007f15f5344fe0: je     0x00007f15f53450c7  ; OopMap{rax=Oop rsi=Oop off=902}
                                                ;*goto
                                                ; - java.lang.String::equals@74 (line 990)

  0x00007f15f5344fe6: test   %eax,0x14b8b114(%rip)        # 0x00007f1609ed0100
                                                ;   {poll}
  0x00007f15f5344fec: movabs $0x7f15f0d2da40,%rdi  ;   {metadata(method data for {method} {0x00007f15f0b2b618} 'equals' '(Ljava/lang/Object;)Z' in 'java/lang/String')}
  0x00007f15f5344ff6: incl   0x208(%rdi)
  0x00007f15f5344ffc: mov    %rdx,%rdi          ;*goto
                                                ; - java.lang.String::equals@74 (line 990)

  0x00007f15f5344fff: mov    %rdi,%rdx
  0x00007f15f5345002: dec    %edx
  0x00007f15f5345004: cmp    $0x0,%edi
  0x00007f15f5345007: movabs $0x7f15f0d2da40,%rdi  ;   {metadata(method data for {method} {0x00007f15f0b2b618} 'equals' '(Ljava/lang/Object;)Z' in 'java/lang/String')}
  0x00007f15f5345011: movabs $0x1c8,%rcx
  0x00007f15f534501b: je     0x00007f15f534502b
  0x00007f15f5345021: movabs $0x1d8,%rcx
  0x00007f15f534502b: mov    (%rdi,%rcx,1),%r8
  0x00007f15f534502f: lea    0x1(%r8),%r8
  0x00007f15f5345033: mov    %r8,(%rdi,%rcx,1)
  0x00007f15f5345037: je     0x00007f15f5345053
  0x00007f15f534503d: jmpq   0x00007f15f5344f58  ;*ifeq
                                                ; - java.lang.String::equals@53 (line 987)

  0x00007f15f5345042: mov    $0x0,%eax
  0x00007f15f5345047: add    $0x30,%rsp
  0x00007f15f534504b: pop    %rbp
  0x00007f15f534504c: test   %eax,0x14b8b0ae(%rip)        # 0x00007f1609ed0100
                                                ;   {poll_return}
  0x00007f15f5345052: retq                      ;*ireturn
                                                ; - java.lang.String::equals@70 (line 989)

  0x00007f15f5345053: mov    $0x1,%eax
  0x00007f15f5345058: add    $0x30,%rsp
  0x00007f15f534505c: pop    %rbp
  0x00007f15f534505d: test   %eax,0x14b8b09d(%rip)        # 0x00007f1609ed0100
                                                ;   {poll_return}
  0x00007f15f5345063: retq                      ;*ireturn
                                                ; - java.lang.String::equals@78 (line 992)

  0x00007f15f5345064: mov    $0x0,%eax
  0x00007f15f5345069: add    $0x30,%rsp
  0x00007f15f534506d: pop    %rbp
  0x00007f15f534506e: test   %eax,0x14b8b08c(%rip)        # 0x00007f1609ed0100
                                                ;   {poll_return}
  0x00007f15f5345074: retq                      ;*ireturn
                                                ; - java.lang.String::equals@80 (line 995)

  0x00007f15f5345075: mov    $0x1,%eax
  0x00007f15f534507a: add    $0x30,%rsp
  0x00007f15f534507e: pop    %rbp
  0x00007f15f534507f: test   %eax,0x14b8b07b(%rip)        # 0x00007f1609ed0100
                                                ;   {poll_return}
  0x00007f15f5345085: retq   
  0x00007f15f5345086: mov    %rax,0x8(%rsp)
  0x00007f15f534508b: movq   $0xffffffffffffffff,(%rsp)
  0x00007f15f5345093: callq  0x00007f15f518d220  ; OopMap{rsi=Oop rdx=Oop off=1080}
                                                ;*synchronization entry
                                                ; - java.lang.String::equals@-1 (line 977)
                                                ;   {runtime_call}
  0x00007f15f5345098: jmpq   0x00007f15f5344cbe
  0x00007f15f534509d: mov    %rdx,(%rsp)
  0x00007f15f53450a1: callq  0x00007f15f518f740  ; OopMap{rsi=Oop off=1094}
                                                ;*checkcast
                                                ; - java.lang.String::equals@15 (line 981)
                                                ;   {runtime_call}
  0x00007f15f53450a6: callq  0x00007f15f5072940  ; OopMap{rax=Oop rsi=Oop off=1099}
                                                ;*arraylength
                                                ; - java.lang.String::equals@23 (line 982)
                                                ;   {runtime_call}
  0x00007f15f53450ab: callq  0x00007f15f5072940  ; OopMap{rsi=Oop off=1104}
                                                ;*getfield value
                                                ; - java.lang.String::equals@27 (line 983)
                                                ;   {runtime_call}
  0x00007f15f53450b0: callq  0x00007f15f5072940  ; OopMap{rsi=Oop rax=Oop off=1109}
                                                ;*arraylength
                                                ; - java.lang.String::equals@30 (line 983)
                                                ;   {runtime_call}
  0x00007f15f53450b5: mov    %rbx,(%rsp)
  0x00007f15f53450b9: callq  0x00007f15f5073000  ; OopMap{rax=Oop rsi=Oop off=1118}
                                                ;*caload
                                                ; - java.lang.String::equals@60 (line 988)
                                                ;   {runtime_call}
  0x00007f15f53450be: mov    %rbx,(%rsp)
  0x00007f15f53450c2: callq  0x00007f15f5073000  ; OopMap{rax=Oop rsi=Oop off=1127}
                                                ;*caload
                                                ; - java.lang.String::equals@65 (line 988)
                                                ;   {runtime_call}
  0x00007f15f53450c7: mov    %rdi,0x8(%rsp)
  0x00007f15f53450cc: movq   $0x4a,(%rsp)
  0x00007f15f53450d4: callq  0x00007f15f518d220  ; OopMap{rax=Oop rsi=Oop off=1145}
                                                ;*goto
                                                ; - java.lang.String::equals@74 (line 990)
                                                ;   {runtime_call}
  0x00007f15f53450d9: jmpq   0x00007f15f5344fe6
  0x00007f15f53450de: nop
  0x00007f15f53450df: nop
  0x00007f15f53450e0: mov    0x300(%r15),%rax
  0x00007f15f53450e7: movabs $0x0,%r10
  0x00007f15f53450f1: mov    %r10,0x300(%r15)
  0x00007f15f53450f8: movabs $0x0,%r10
  0x00007f15f5345102: mov    %r10,0x308(%r15)
  0x00007f15f5345109: add    $0x30,%rsp
  0x00007f15f534510d: pop    %rbp
  0x00007f15f534510e: jmpq   0x00007f15f506ff20  ;   {runtime_call}
  0x00007f15f5345113: hlt    
  0x00007f15f5345114: hlt    
  0x00007f15f5345115: hlt    
  0x00007f15f5345116: hlt    
  0x00007f15f5345117: hlt    
  0x00007f15f5345118: hlt    
  0x00007f15f5345119: hlt    
  0x00007f15f534511a: hlt    
  0x00007f15f534511b: hlt    
  0x00007f15f534511c: hlt    
  0x00007f15f534511d: hlt    
  0x00007f15f534511e: hlt    
  0x00007f15f534511f: hlt    
[Exception Handler]
[Stub Code]
  0x00007f15f5345120: callq  0x00007f15f50709e0  ;   {no_reloc}
  0x00007f15f5345125: mov    %rsp,-0x28(%rsp)
  0x00007f15f534512a: sub    $0x80,%rsp
  0x00007f15f5345131: mov    %rax,0x78(%rsp)
  0x00007f15f5345136: mov    %rcx,0x70(%rsp)
  0x00007f15f534513b: mov    %rdx,0x68(%rsp)
  0x00007f15f5345140: mov    %rbx,0x60(%rsp)
  0x00007f15f5345145: mov    %rbp,0x50(%rsp)
  0x00007f15f534514a: mov    %rsi,0x48(%rsp)
  0x00007f15f534514f: mov    %rdi,0x40(%rsp)
  0x00007f15f5345154: mov    %r8,0x38(%rsp)
  0x00007f15f5345159: mov    %r9,0x30(%rsp)
  0x00007f15f534515e: mov    %r10,0x28(%rsp)
  0x00007f15f5345163: mov    %r11,0x20(%rsp)
  0x00007f15f5345168: mov    %r12,0x18(%rsp)
  0x00007f15f534516d: mov    %r13,0x10(%rsp)
  0x00007f15f5345172: mov    %r14,0x8(%rsp)
  0x00007f15f5345177: mov    %r15,(%rsp)
  0x00007f15f534517b: movabs $0x7f16099be49e,%rdi  ;   {external_word}
  0x00007f15f5345185: movabs $0x7f15f5345125,%rsi  ;   {internal_word}
  0x00007f15f534518f: mov    %rsp,%rdx
  0x00007f15f5345192: and    $0xfffffffffffffff0,%rsp
  0x00007f15f5345196: callq  0x00007f16096e4460  ;   {runtime_call}
  0x00007f15f534519b: hlt    
[Deopt Handler Code]
  0x00007f15f534519c: movabs $0x7f15f534519c,%r10  ;   {section_word}
  0x00007f15f53451a6: push   %r10
  0x00007f15f53451a8: jmpq   0x00007f15f5046e40  ;   {runtime_call}
  0x00007f15f53451ad: hlt    
  0x00007f15f53451ae: hlt    
  0x00007f15f53451af: hlt    
Decoding compiled method 0x00007f15f533add0:
Code:
[Entry Point]
[Verified Entry Point]
[Constants]
  # {method} {0x00007f15f0c42550} 'copyOf' '([BI)[B' in 'java/util/Arrays'
  # parm0:    rsi:rsi   = '[B'
  # parm1:    rdx       = int
  #           [sp+0x60]  (sp of caller)
  0x00007f15f533af40: mov    %eax,-0x14000(%rsp)
  0x00007f15f533af47: push   %rbp
  0x00007f15f533af48: sub    $0x50,%rsp
  0x00007f15f533af4c: mov    %rdx,%r8
  0x00007f15f533af4f: movabs $0x7f15f0dca1d8,%rbx  ;   {metadata(method data for {method} {0x00007f15f0c42550} 'copyOf' '([BI)[B' in 'java/util/Arrays')}
  0x00007f15f533af59: mov    0xdc(%rbx),%edx
  0x00007f15f533af5f: add    $0x8,%edx
  0x00007f15f533af62: mov    %edx,0xdc(%rbx)
  0x00007f15f533af68: movabs $0x7f15f0c42550,%rbx  ;   {metadata({method} {0x00007f15f0c42550} 'copyOf' '([BI)[B' in 'java/util/Arrays')}
  0x00007f15f533af72: and    $0x1ff8,%edx
  0x00007f15f533af78: cmp    $0x0,%edx
  0x00007f15f533af7b: je     0x00007f15f533b06d  ;*iload_1
                                                ; - java.util.Arrays::copyOf@0 (line 3236)

  0x00007f15f533af81: mov    %r8,%rbx
  0x00007f15f533af84: movabs $0x7c00007a8,%rdx  ;   {metadata({type array byte})}
  0x00007f15f533af8e: mov    %rsi,%r9
  0x00007f15f533af91: movslq %ebx,%rbx
  0x00007f15f533af94: mov    %rbx,%rdi
  0x00007f15f533af97: cmp    $0xffffff,%rbx
  0x00007f15f533af9e: ja     0x00007f15f533b084
  0x00007f15f533afa4: movabs $0x17,%rsi
  0x00007f15f533afae: lea    (%rsi,%rbx,1),%rsi
  0x00007f15f533afb2: and    $0xfffffffffffffff8,%rsi
  0x00007f15f533afb6: mov    0x60(%r15),%rax
  0x00007f15f533afba: lea    (%rax,%rsi,1),%rsi
  0x00007f15f533afbe: cmp    0x70(%r15),%rsi
  0x00007f15f533afc2: ja     0x00007f15f533b084
  0x00007f15f533afc8: mov    %rsi,0x60(%r15)
  0x00007f15f533afcc: sub    %rax,%rsi
  0x00007f15f533afcf: movq   $0x1,(%rax)
  0x00007f15f533afd6: mov    %rdx,%rcx
  0x00007f15f533afd9: shr    $0x3,%rcx
  0x00007f15f533afdd: mov    %ecx,0x8(%rax)
  0x00007f15f533afe0: mov    %ebx,0xc(%rax)
  0x00007f15f533afe3: sub    $0x10,%rsi
  0x00007f15f533afe7: je     0x00007f15f533affe
  0x00007f15f533afed: xor    %rbx,%rbx
  0x00007f15f533aff0: shr    $0x3,%rsi
  0x00007f15f533aff4: mov    %rbx,0x8(%rax,%rsi,8)
  0x00007f15f533aff9: dec    %rsi
  0x00007f15f533affc: jne    0x00007f15f533aff4  ;*newarray
                                                ; - java.util.Arrays::copyOf@1 (line 3236)

  0x00007f15f533affe: mov    0xc(%r9),%esi      ;*arraylength
                                                ; - java.util.Arrays::copyOf@9 (line 3237)
                                                ; implicit exception: dispatches to 0x00007f15f533b08e
  0x00007f15f533b002: movabs $0x7f15f0dca1d8,%rdx  ;   {metadata(method data for {method} {0x00007f15f0c42550} 'copyOf' '([BI)[B' in 'java/util/Arrays')}
  0x00007f15f533b00c: addq   $0x1,0x108(%rdx)
  0x00007f15f533b014: mov    %r8,%rdx           ;*invokestatic min
                                                ; - java.util.Arrays::copyOf@11 (line 3238)

  0x00007f15f533b017: mov    %rax,0x40(%rsp)
  0x00007f15f533b01c: mov    %r9,0x38(%rsp)
  0x00007f15f533b021: nop
  0x00007f15f533b022: nop
  0x00007f15f533b023: nop
  0x00007f15f533b024: nop
  0x00007f15f533b025: nop
  0x00007f15f533b026: nop
  0x00007f15f533b027: callq  0x00007f15f5046260  ; OopMap{[64]=Oop [56]=Oop off=236}
                                                ;*invokestatic min
                                                ; - java.util.Arrays::copyOf@11 (line 3238)
                                                ;   {static_call}
  0x00007f15f533b02c: movabs $0x7f15f0dca1d8,%rsi  ;   {metadata(method data for {method} {0x00007f15f0c42550} 'copyOf' '([BI)[B' in 'java/util/Arrays')}
  0x00007f15f533b036: addq   $0x1,0x118(%rsi)
  0x00007f15f533b03e: mov    0x38(%rsp),%rsi
  0x00007f15f533b043: mov    $0x0,%edx
  0x00007f15f533b048: mov    0x40(%rsp),%rcx
  0x00007f15f533b04d: mov    $0x0,%r8d
  0x00007f15f533b053: mov    %rax,%r9           ;*invokestatic arraycopy
                                                ; - java.util.Arrays::copyOf@14 (line 3237)

  0x00007f15f533b056: nop
  0x00007f15f533b057: callq  0x00007f15f5046260  ; OopMap{[64]=Oop off=284}
                                                ;*invokestatic arraycopy
                                                ; - java.util.Arrays::copyOf@14 (line 3237)
                                                ;   {static_call}
  0x00007f15f533b05c: mov    0x40(%rsp),%rax
  0x00007f15f533b061: add    $0x50,%rsp
  0x00007f15f533b065: pop    %rbp
  0x00007f15f533b066: test   %eax,0x14b95094(%rip)        # 0x00007f1609ed0100
                                                ;   {poll_return}
  0x00007f15f533b06c: retq   
  0x00007f15f533b06d: mov    %rbx,0x8(%rsp)
  0x00007f15f533b072: movq   $0xffffffffffffffff,(%rsp)
  0x00007f15f533b07a: callq  0x00007f15f518d220  ; OopMap{rsi=Oop off=319}
                                                ;*synchronization entry
                                                ; - java.util.Arrays::copyOf@-1 (line 3236)
                                                ;   {runtime_call}
  0x00007f15f533b07f: jmpq   0x00007f15f533af81
  0x00007f15f533b084: callq  0x00007f15f50716a0  ; OopMap{r9=Oop off=329}
                                                ;*newarray
                                                ; - java.util.Arrays::copyOf@1 (line 3236)
                                                ;   {runtime_call}
  0x00007f15f533b089: jmpq   0x00007f15f533affe
  0x00007f15f533b08e: callq  0x00007f15f5072940  ; OopMap{r9=Oop rax=Oop off=339}
                                                ;*arraylength
                                                ; - java.util.Arrays::copyOf@9 (line 3237)
                                                ;   {runtime_call}
  0x00007f15f533b093: nop
  0x00007f15f533b094: nop
  0x00007f15f533b095: mov    0x300(%r15),%rax
  0x00007f15f533b09c: movabs $0x0,%r10
  0x00007f15f533b0a6: mov    %r10,0x300(%r15)
  0x00007f15f533b0ad: movabs $0x0,%r10
  0x00007f15f533b0b7: mov    %r10,0x308(%r15)
  0x00007f15f533b0be: add    $0x50,%rsp
  0x00007f15f533b0c2: pop    %rbp
  0x00007f15f533b0c3: jmpq   0x00007f15f506ff20  ;   {runtime_call}
  0x00007f15f533b0c8: hlt    
  0x00007f15f533b0c9: hlt    
  0x00007f15f533b0ca: hlt    
  0x00007f15f533b0cb: hlt    
  0x00007f15f533b0cc: hlt    
  0x00007f15f533b0cd: hlt    
  0x00007f15f533b0ce: hlt    
  0x00007f15f533b0cf: hlt    
  0x00007f15f533b0d0: hlt    
  0x00007f15f533b0d1: hlt    
  0x00007f15f533b0d2: hlt    
  0x00007f15f533b0d3: hlt    
  0x00007f15f533b0d4: hlt    
  0x00007f15f533b0d5: hlt    
  0x00007f15f533b0d6: hlt    
  0x00007f15f533b0d7: hlt    
  0x00007f15f533b0d8: hlt    
  0x00007f15f533b0d9: hlt    
  0x00007f15f533b0da: hlt    
  0x00007f15f533b0db: hlt    
  0x00007f15f533b0dc: hlt    
  0x00007f15f533b0dd: hlt    
  0x00007f15f533b0de: hlt    
  0x00007f15f533b0df: hlt    
[Stub Code]
  0x00007f15f533b0e0: nop                       ;   {no_reloc}
  0x00007f15f533b0e1: nop
  0x00007f15f533b0e2: nop
  0x00007f15f533b0e3: nop
  0x00007f15f533b0e4: nop
  0x00007f15f533b0e5: movabs $0x0,%rbx          ;   {static_stub}
  0x00007f15f533b0ef: jmpq   0x00007f15f533b0ef  ;   {runtime_call}
  0x00007f15f533b0f4: nop
  0x00007f15f533b0f5: movabs $0x0,%rbx          ;   {static_stub}
  0x00007f15f533b0ff: jmpq   0x00007f15f533b0ff  ;   {runtime_call}
[Exception Handler]
  0x00007f15f533b104: callq  0x00007f15f50709e0  ;   {runtime_call}
  0x00007f15f533b109: mov    %rsp,-0x28(%rsp)
  0x00007f15f533b10e: sub    $0x80,%rsp
  0x00007f15f533b115: mov    %rax,0x78(%rsp)
  0x00007f15f533b11a: mov    %rcx,0x70(%rsp)
  0x00007f15f533b11f: mov    %rdx,0x68(%rsp)
  0x00007f15f533b124: mov    %rbx,0x60(%rsp)
  0x00007f15f533b129: mov    %rbp,0x50(%rsp)
  0x00007f15f533b12e: mov    %rsi,0x48(%rsp)
  0x00007f15f533b133: mov    %rdi,0x40(%rsp)
  0x00007f15f533b138: mov    %r8,0x38(%rsp)
  0x00007f15f533b13d: mov    %r9,0x30(%rsp)
  0x00007f15f533b142: mov    %r10,0x28(%rsp)
  0x00007f15f533b147: mov    %r11,0x20(%rsp)
  0x00007f15f533b14c: mov    %r12,0x18(%rsp)
  0x00007f15f533b151: mov    %r13,0x10(%rsp)
  0x00007f15f533b156: mov    %r14,0x8(%rsp)
  0x00007f15f533b15b: mov    %r15,(%rsp)
  0x00007f15f533b15f: movabs $0x7f16099be49e,%rdi  ;   {external_word}
  0x00007f15f533b169: movabs $0x7f15f533b109,%rsi  ;   {internal_word}
  0x00007f15f533b173: mov    %rsp,%rdx
  0x00007f15f533b176: and    $0xfffffffffffffff0,%rsp
  0x00007f15f533b17a: callq  0x00007f16096e4460  ;   {runtime_call}
  0x00007f15f533b17f: hlt    
[Deopt Handler Code]
  0x00007f15f533b180: movabs $0x7f15f533b180,%r10  ;   {section_word}
  0x00007f15f533b18a: push   %r10
  0x00007f15f533b18c: jmpq   0x00007f15f5046e40  ;   {runtime_call}
  0x00007f15f533b191: hlt    
  0x00007f15f533b192: hlt    
  0x00007f15f533b193: hlt    
  0x00007f15f533b194: hlt    
  0x00007f15f533b195: hlt    
  0x00007f15f533b196: hlt    
  0x00007f15f533b197: hlt    
Decoding compiled method 0x00007f15f5344690:
Code:
[Entry Point]
[Constants]
  # {method} {0x00007f15f0b2c098} 'indexOf' '(I)I' in 'java/lang/String'
  # this:     rsi:rsi   = 'java/lang/String'
  # parm0:    rdx       = int
  #           [sp+0x40]  (sp of caller)
  0x00007f15f5344800: mov    0x8(%rsi),%r10d
  0x00007f15f5344804: shl    $0x3,%r10
  0x00007f15f5344808: cmp    %rax,%r10
  0x00007f15f534480b: jne    0x00007f15f5045ba0  ;   {runtime_call}
  0x00007f15f5344811: nopl   0x0(%rax,%rax,1)
  0x00007f15f5344819: nopl   0x0(%rax)
[Verified Entry Point]
  0x00007f15f5344820: mov    %eax,-0x14000(%rsp)
  0x00007f15f5344827: push   %rbp
  0x00007f15f5344828: sub    $0x30,%rsp
  0x00007f15f534482c: movabs $0x7f15f0dca058,%rcx  ;   {metadata(method data for {method} {0x00007f15f0b2c098} 'indexOf' '(I)I' in 'java/lang/String')}
  0x00007f15f5344836: mov    0xdc(%rcx),%edi
  0x00007f15f534483c: add    $0x8,%edi
  0x00007f15f534483f: mov    %edi,0xdc(%rcx)
  0x00007f15f5344845: movabs $0x7f15f0b2c098,%rcx  ;   {metadata({method} {0x00007f15f0b2c098} 'indexOf' '(I)I' in 'java/lang/String')}
  0x00007f15f534484f: and    $0x1ff8,%edi
  0x00007f15f5344855: cmp    $0x0,%edi
  0x00007f15f5344858: je     0x00007f15f5344908  ;*aload_0
                                                ; - java.lang.String::indexOf@0 (line 1503)

  0x00007f15f534485e: mov    %rsi,%rcx
  0x00007f15f5344861: movabs $0x7f15f0dca058,%rdi  ;   {metadata(method data for {method} {0x00007f15f0b2c098} 'indexOf' '(I)I' in 'java/lang/String')}
  0x00007f15f534486b: mov    0x8(%rcx),%ecx
  0x00007f15f534486e: shl    $0x3,%rcx
  0x00007f15f5344872: cmp    0x110(%rdi),%rcx
  0x00007f15f5344879: jne    0x00007f15f5344888
  0x00007f15f534487b: addq   $0x1,0x118(%rdi)
  0x00007f15f5344883: jmpq   0x00007f15f53448ee
  0x00007f15f5344888: cmp    0x120(%rdi),%rcx
  0x00007f15f534488f: jne    0x00007f15f534489e
  0x00007f15f5344891: addq   $0x1,0x128(%rdi)
  0x00007f15f5344899: jmpq   0x00007f15f53448ee
  0x00007f15f534489e: cmpq   $0x0,0x110(%rdi)
  0x00007f15f53448a9: jne    0x00007f15f53448c2
  0x00007f15f53448ab: mov    %rcx,0x110(%rdi)
  0x00007f15f53448b2: movq   $0x1,0x118(%rdi)
  0x00007f15f53448bd: jmpq   0x00007f15f53448ee
  0x00007f15f53448c2: cmpq   $0x0,0x120(%rdi)
  0x00007f15f53448cd: jne    0x00007f15f53448e6
  0x00007f15f53448cf: mov    %rcx,0x120(%rdi)
  0x00007f15f53448d6: movq   $0x1,0x128(%rdi)
  0x00007f15f53448e1: jmpq   0x00007f15f53448ee
  0x00007f15f53448e6: addq   $0x1,0x108(%rdi)
  0x00007f15f53448ee: mov    $0x0,%ecx          ;*invokevirtual indexOf
                                                ; - java.lang.String::indexOf@3 (line 1503)

  0x00007f15f53448f3: nop
  0x00007f15f53448f4: nop
  0x00007f15f53448f5: nop
  0x00007f15f53448f6: nop
  0x00007f15f53448f7: callq  0x00007f15f5045de0  ; OopMap{off=252}
                                                ;*invokevirtual indexOf
                                                ; - java.lang.String::indexOf@3 (line 1503)
                                                ;   {optimized virtual_call}
  0x00007f15f53448fc: add    $0x30,%rsp
  0x00007f15f5344900: pop    %rbp
  0x00007f15f5344901: test   %eax,0x14b8b7f9(%rip)        # 0x00007f1609ed0100
                                                ;   {poll_return}
  0x00007f15f5344907: retq   
  0x00007f15f5344908: mov    %rcx,0x8(%rsp)
  0x00007f15f534490d: movq   $0xffffffffffffffff,(%rsp)
  0x00007f15f5344915: callq  0x00007f15f518d220  ; OopMap{rsi=Oop off=282}
                                                ;*synchronization entry
                                                ; - java.lang.String::indexOf@-1 (line 1503)
                                                ;   {runtime_call}
  0x00007f15f534491a: jmpq   0x00007f15f534485e
  0x00007f15f534491f: nop
  0x00007f15f5344920: nop
  0x00007f15f5344921: mov    0x300(%r15),%rax
  0x00007f15f5344928: movabs $0x0,%r10
  0x00007f15f5344932: mov    %r10,0x300(%r15)
  0x00007f15f5344939: movabs $0x0,%r10
  0x00007f15f5344943: mov    %r10,0x308(%r15)
  0x00007f15f534494a: add    $0x30,%rsp
  0x00007f15f534494e: pop    %rbp
  0x00007f15f534494f: jmpq   0x00007f15f506ff20  ;   {runtime_call}
  0x00007f15f5344954: hlt    
  0x00007f15f5344955: hlt    
  0x00007f15f5344956: hlt    
  0x00007f15f5344957: hlt    
  0x00007f15f5344958: hlt    
  0x00007f15f5344959: hlt    
  0x00007f15f534495a: hlt    
  0x00007f15f534495b: hlt    
  0x00007f15f534495c: hlt    
  0x00007f15f534495d: hlt    
  0x00007f15f534495e: hlt    
  0x00007f15f534495f: hlt    
[Stub Code]
  0x00007f15f5344960: nop                       ;   {no_reloc}
  0x00007f15f5344961: nop
  0x00007f15f5344962: nop
  0x00007f15f5344963: nop
  0x00007f15f5344964: nop
  0x00007f15f5344965: movabs $0x0,%rbx          ;   {static_stub}
  0x00007f15f534496f: jmpq   0x00007f15f534496f  ;   {runtime_call}
[Exception Handler]
  0x00007f15f5344974: callq  0x00007f15f50709e0  ;   {runtime_call}
  0x00007f15f5344979: mov    %rsp,-0x28(%rsp)
  0x00007f15f534497e: sub    $0x80,%rsp
  0x00007f15f5344985: mov    %rax,0x78(%rsp)
  0x00007f15f534498a: mov    %rcx,0x70(%rsp)
  0x00007f15f534498f: mov    %rdx,0x68(%rsp)
  0x00007f15f5344994: mov    %rbx,0x60(%rsp)
  0x00007f15f5344999: mov    %rbp,0x50(%rsp)
  0x00007f15f534499e: mov    %rsi,0x48(%rsp)
  0x00007f15f53449a3: mov    %rdi,0x40(%rsp)
  0x00007f15f53449a8: mov    %r8,0x38(%rsp)
  0x00007f15f53449ad: mov    %r9,0x30(%rsp)
  0x00007f15f53449b2: mov    %r10,0x28(%rsp)
  0x00007f15f53449b7: mov    %r11,0x20(%rsp)
  0x00007f15f53449bc: mov    %r12,0x18(%rsp)
  0x00007f15f53449c1: mov    %r13,0x10(%rsp)
  0x00007f15f53449c6: mov    %r14,0x8(%rsp)
  0x00007f15f53449cb: mov    %r15,(%rsp)
  0x00007f15f53449cf: movabs $0x7f16099be49e,%rdi  ;   {external_word}
  0x00007f15f53449d9: movabs $0x7f15f5344979,%rsi  ;   {internal_word}
  0x00007f15f53449e3: mov    %rsp,%rdx
  0x00007f15f53449e6: and    $0xfffffffffffffff0,%rsp
  0x00007f15f53449ea: callq  0x00007f16096e4460  ;   {runtime_call}
  0x00007f15f53449ef: hlt    
[Deopt Handler Code]
  0x00007f15f53449f0: movabs $0x7f15f53449f0,%r10  ;   {section_word}
  0x00007f15f53449fa: push   %r10
  0x00007f15f53449fc: jmpq   0x00007f15f5046e40  ;   {runtime_call}
  0x00007f15f5344a01: hlt    
  0x00007f15f5344a02: hlt    
  0x00007f15f5344a03: hlt    
  0x00007f15f5344a04: hlt    
  0x00007f15f5344a05: hlt    
  0x00007f15f5344a06: hlt    
  0x00007f15f5344a07: hlt    
Decoding compiled method 0x00007f15f5343f50:
Code:
[Entry Point]
[Constants]
  # {method} {0x00007f15f0b2bdf8} 'startsWith' '(Ljava/lang/String;I)Z' in 'java/lang/String'
  # this:     rsi:rsi   = 'java/lang/String'
  # parm0:    rdx:rdx   = 'java/lang/String'
  # parm1:    rcx       = int
  #           [sp+0x40]  (sp of caller)
  0x00007f15f53440c0: mov    0x8(%rsi),%r10d
  0x00007f15f53440c4: shl    $0x3,%r10
  0x00007f15f53440c8: cmp    %rax,%r10
  0x00007f15f53440cb: jne    0x00007f15f5045ba0  ;   {runtime_call}
  0x00007f15f53440d1: nopl   0x0(%rax,%rax,1)
  0x00007f15f53440d9: nopl   0x0(%rax)
[Verified Entry Point]
  0x00007f15f53440e0: mov    %eax,-0x14000(%rsp)
  0x00007f15f53440e7: push   %rbp
  0x00007f15f53440e8: sub    $0x30,%rsp
  0x00007f15f53440ec: movabs $0x7f15f0dca508,%rax  ;   {metadata(method data for {method} {0x00007f15f0b2bdf8} 'startsWith' '(Ljava/lang/String;I)Z' in 'java/lang/String')}
  0x00007f15f53440f6: mov    0xdc(%rax),%edi
  0x00007f15f53440fc: add    $0x8,%edi
  0x00007f15f53440ff: mov    %edi,0xdc(%rax)
  0x00007f15f5344105: movabs $0x7f15f0b2bdf8,%rax  ;   {metadata({method} {0x00007f15f0b2bdf8} 'startsWith' '(Ljava/lang/String;I)Z' in 'java/lang/String')}
  0x00007f15f534410f: and    $0x1ff8,%edi
  0x00007f15f5344115: cmp    $0x0,%edi
  0x00007f15f5344118: je     0x00007f15f53442cd  ;*aload_0
                                                ; - java.lang.String::startsWith@0 (line 1403)

  0x00007f15f534411e: mov    0xc(%rsi),%eax
  0x00007f15f5344121: shl    $0x3,%rax          ;*getfield value
                                                ; - java.lang.String::startsWith@1 (line 1403)

  0x00007f15f5344125: mov    0xc(%rdx),%esi     ; implicit exception: dispatches to 0x00007f15f53442e4
  0x00007f15f5344128: shl    $0x3,%rsi          ;*getfield value
                                                ; - java.lang.String::startsWith@9 (line 1405)

  0x00007f15f534412c: mov    0xc(%rsi),%edi     ;*arraylength
                                                ; - java.lang.String::startsWith@21 (line 1407)
                                                ; implicit exception: dispatches to 0x00007f15f53442e9
  0x00007f15f534412f: cmp    $0x0,%ecx
  0x00007f15f5344132: movabs $0x7f15f0dca508,%rbx  ;   {metadata(method data for {method} {0x00007f15f0b2bdf8} 'startsWith' '(Ljava/lang/String;I)Z' in 'java/lang/String')}
  0x00007f15f534413c: movabs $0x108,%rdx
  0x00007f15f5344146: jl     0x00007f15f5344156
  0x00007f15f534414c: movabs $0x118,%rdx
  0x00007f15f5344156: mov    (%rbx,%rdx,1),%r8
  0x00007f15f534415a: lea    0x1(%r8),%r8
  0x00007f15f534415e: mov    %r8,(%rbx,%rdx,1)
  0x00007f15f5344162: jl     0x00007f15f534429a  ;*iflt
                                                ; - java.lang.String::startsWith@25 (line 1409)

  0x00007f15f5344168: mov    0xc(%rax),%ebx     ;*arraylength
                                                ; - java.lang.String::startsWith@33 (line 1409)
                                                ; implicit exception: dispatches to 0x00007f15f53442ee
  0x00007f15f534416b: sub    %edi,%ebx
  0x00007f15f534416d: cmp    %ebx,%ecx
  0x00007f15f534416f: movabs $0x7f15f0dca508,%rbx  ;   {metadata(method data for {method} {0x00007f15f0b2bdf8} 'startsWith' '(Ljava/lang/String;I)Z' in 'java/lang/String')}
  0x00007f15f5344179: movabs $0x128,%rdx
  0x00007f15f5344183: jle    0x00007f15f5344193
  0x00007f15f5344189: movabs $0x138,%rdx
  0x00007f15f5344193: mov    (%rbx,%rdx,1),%r8
  0x00007f15f5344197: lea    0x1(%r8),%r8
  0x00007f15f534419b: mov    %r8,(%rbx,%rdx,1)
  0x00007f15f534419f: jg     0x00007f15f534429a  ;*if_icmple
                                                ; - java.lang.String::startsWith@37 (line 1409)

  0x00007f15f53441a5: mov    $0x0,%ebx
  0x00007f15f53441aa: jmpq   0x00007f15f534425a  ;*iinc
                                                ; - java.lang.String::startsWith@42 (line 1412)

  0x00007f15f53441af: nop
  0x00007f15f53441b0: mov    %rcx,%rdx
  0x00007f15f53441b3: inc    %edx
  0x00007f15f53441b5: movslq %ecx,%r8
  0x00007f15f53441b8: cmp    0xc(%rax),%ecx
  0x00007f15f53441bb: jae    0x00007f15f53442f3
  0x00007f15f53441c1: movzwl 0x10(%rax,%r8,2),%ecx  ;*caload
                                                ; - java.lang.String::startsWith@56 (line 1413)

  0x00007f15f53441c7: mov    %rbx,%r8
  0x00007f15f53441ca: inc    %r8d
  0x00007f15f53441cd: movslq %ebx,%r9
  0x00007f15f53441d0: cmp    0xc(%rsi),%ebx
  0x00007f15f53441d3: jae    0x00007f15f53442fc
  0x00007f15f53441d9: movzwl 0x10(%rsi,%r9,2),%ebx  ;*caload
                                                ; - java.lang.String::startsWith@64 (line 1413)

  0x00007f15f53441df: movabs $0x7f15f0dca508,%r9  ;   {metadata(method data for {method} {0x00007f15f0b2bdf8} 'startsWith' '(Ljava/lang/String;I)Z' in 'java/lang/String')}
  0x00007f15f53441e9: mov    0xe0(%r9),%r11d
  0x00007f15f53441f0: add    $0x8,%r11d
  0x00007f15f53441f4: mov    %r11d,0xe0(%r9)
  0x00007f15f53441fb: movabs $0x7f15f0b2bdf8,%r9  ;   {metadata({method} {0x00007f15f0b2bdf8} 'startsWith' '(Ljava/lang/String;I)Z' in 'java/lang/String')}
  0x00007f15f5344205: and    $0xfff8,%r11d
  0x00007f15f534420c: cmp    $0x0,%r11d
  0x00007f15f5344210: je     0x00007f15f5344305  ; OopMap{rsi=Oop rax=Oop off=342}
                                                ;*if_icmpeq
                                                ; - java.lang.String::startsWith@65 (line 1413)

  0x00007f15f5344216: test   %eax,0x14b8bee4(%rip)        # 0x00007f1609ed0100
                                                ;   {poll}
  0x00007f15f534421c: cmp    %ebx,%ecx
  0x00007f15f534421e: movabs $0x7f15f0dca508,%rbx  ;   {metadata(method data for {method} {0x00007f15f0b2bdf8} 'startsWith' '(Ljava/lang/String;I)Z' in 'java/lang/String')}
  0x00007f15f5344228: movabs $0x168,%rcx
  0x00007f15f5344232: je     0x00007f15f5344242
  0x00007f15f5344238: movabs $0x178,%rcx
  0x00007f15f5344242: mov    (%rbx,%rcx,1),%r9
  0x00007f15f5344246: lea    0x1(%r9),%r9
  0x00007f15f534424a: mov    %r9,(%rbx,%rcx,1)
  0x00007f15f534424e: jne    0x00007f15f53442ab  ;*if_icmpeq
                                                ; - java.lang.String::startsWith@65 (line 1413)

  0x00007f15f5344254: mov    %r8,%rbx
  0x00007f15f5344257: mov    %rdx,%rcx          ;*iinc
                                                ; - java.lang.String::startsWith@42 (line 1412)

  0x00007f15f534425a: dec    %edi
  0x00007f15f534425c: cmp    $0x0,%edi
  0x00007f15f534425f: movabs $0x7f15f0dca508,%rdx  ;   {metadata(method data for {method} {0x00007f15f0b2bdf8} 'startsWith' '(Ljava/lang/String;I)Z' in 'java/lang/String')}
  0x00007f15f5344269: movabs $0x148,%r8
  0x00007f15f5344273: jl     0x00007f15f5344283
  0x00007f15f5344279: movabs $0x158,%r8
  0x00007f15f5344283: mov    (%rdx,%r8,1),%r9
  0x00007f15f5344287: lea    0x1(%r9),%r9
  0x00007f15f534428b: mov    %r9,(%rdx,%r8,1)
  0x00007f15f534428f: jl     0x00007f15f53442bc
  0x00007f15f5344295: jmpq   0x00007f15f53441b0  ;*iflt
                                                ; - java.lang.String::startsWith@47 (line 1412)

  0x00007f15f534429a: mov    $0x0,%eax
  0x00007f15f534429f: add    $0x30,%rsp
  0x00007f15f53442a3: pop    %rbp
  0x00007f15f53442a4: test   %eax,0x14b8be56(%rip)        # 0x00007f1609ed0100
                                                ;   {poll_return}
  0x00007f15f53442aa: retq                      ;*ireturn
                                                ; - java.lang.String::startsWith@41 (line 1410)

  0x00007f15f53442ab: mov    $0x0,%eax
  0x00007f15f53442b0: add    $0x30,%rsp
  0x00007f15f53442b4: pop    %rbp
  0x00007f15f53442b5: test   %eax,0x14b8be45(%rip)        # 0x00007f1609ed0100
                                                ;   {poll_return}
  0x00007f15f53442bb: retq                      ;*ireturn
                                                ; - java.lang.String::startsWith@69 (line 1414)

  0x00007f15f53442bc: mov    $0x1,%eax
  0x00007f15f53442c1: add    $0x30,%rsp
  0x00007f15f53442c5: pop    %rbp
  0x00007f15f53442c6: test   %eax,0x14b8be34(%rip)        # 0x00007f1609ed0100
                                                ;   {poll_return}
  0x00007f15f53442cc: retq   
  0x00007f15f53442cd: mov    %rax,0x8(%rsp)
  0x00007f15f53442d2: movq   $0xffffffffffffffff,(%rsp)
  0x00007f15f53442da: callq  0x00007f15f518d220  ; OopMap{rsi=Oop rdx=Oop off=543}
                                                ;*synchronization entry
                                                ; - java.lang.String::startsWith@-1 (line 1403)
                                                ;   {runtime_call}
  0x00007f15f53442df: jmpq   0x00007f15f534411e
  0x00007f15f53442e4: callq  0x00007f15f5072940  ; OopMap{rax=Oop off=553}
                                                ;*getfield value
                                                ; - java.lang.String::startsWith@9 (line 1405)
                                                ;   {runtime_call}
  0x00007f15f53442e9: callq  0x00007f15f5072940  ; OopMap{rax=Oop rsi=Oop off=558}
                                                ;*arraylength
                                                ; - java.lang.String::startsWith@21 (line 1407)
                                                ;   {runtime_call}
  0x00007f15f53442ee: callq  0x00007f15f5072940  ; OopMap{rsi=Oop rax=Oop off=563}
                                                ;*arraylength
                                                ; - java.lang.String::startsWith@33 (line 1409)
                                                ;   {runtime_call}
  0x00007f15f53442f3: mov    %rcx,(%rsp)
  0x00007f15f53442f7: callq  0x00007f15f5073000  ; OopMap{rsi=Oop rax=Oop off=572}
                                                ;*caload
                                                ; - java.lang.String::startsWith@56 (line 1413)
                                                ;   {runtime_call}
  0x00007f15f53442fc: mov    %rbx,(%rsp)
  0x00007f15f5344300: callq  0x00007f15f5073000  ; OopMap{rsi=Oop rax=Oop off=581}
                                                ;*caload
                                                ; - java.lang.String::startsWith@64 (line 1413)
                                                ;   {runtime_call}
  0x00007f15f5344305: mov    %r9,0x8(%rsp)
  0x00007f15f534430a: movq   $0x41,(%rsp)
  0x00007f15f5344312: callq  0x00007f15f518d220  ; OopMap{rsi=Oop rax=Oop off=599}
                                                ;*if_icmpeq
                                                ; - java.lang.String::startsWith@65 (line 1413)
                                                ;   {runtime_call}
  0x00007f15f5344317: jmpq   0x00007f15f5344216
  0x00007f15f534431c: nop
  0x00007f15f534431d: nop
  0x00007f15f534431e: mov    0x300(%r15),%rax
  0x00007f15f5344325: movabs $0x0,%r10
  0x00007f15f534432f: mov    %r10,0x300(%r15)
  0x00007f15f5344336: movabs $0x0,%r10
  0x00007f15f5344340: mov    %r10,0x308(%r15)
  0x00007f15f5344347: add    $0x30,%rsp
  0x00007f15f534434b: pop    %rbp
  0x00007f15f534434c: jmpq   0x00007f15f506ff20  ;   {runtime_call}
  0x00007f15f5344351: hlt    
  0x00007f15f5344352: hlt    
  0x00007f15f5344353: hlt    
  0x00007f15f5344354: hlt    
  0x00007f15f5344355: hlt    
  0x00007f15f5344356: hlt    
  0x00007f15f5344357: hlt    
  0x00007f15f5344358: hlt    
  0x00007f15f5344359: hlt    
  0x00007f15f534435a: hlt    
  0x00007f15f534435b: hlt    
  0x00007f15f534435c: hlt    
  0x00007f15f534435d: hlt    
  0x00007f15f534435e: hlt    
  0x00007f15f534435f: hlt    
[Exception Handler]
[Stub Code]
  0x00007f15f5344360: callq  0x00007f15f50709e0  ;   {no_reloc}
  0x00007f15f5344365: mov    %rsp,-0x28(%rsp)
  0x00007f15f534436a: sub    $0x80,%rsp
  0x00007f15f5344371: mov    %rax,0x78(%rsp)
  0x00007f15f5344376: mov    %rcx,0x70(%rsp)
  0x00007f15f534437b: mov    %rdx,0x68(%rsp)
  0x00007f15f5344380: mov    %rbx,0x60(%rsp)
  0x00007f15f5344385: mov    %rbp,0x50(%rsp)
  0x00007f15f534438a: mov    %rsi,0x48(%rsp)
  0x00007f15f534438f: mov    %rdi,0x40(%rsp)
  0x00007f15f5344394: mov    %r8,0x38(%rsp)
  0x00007f15f5344399: mov    %r9,0x30(%rsp)
  0x00007f15f534439e: mov    %r10,0x28(%rsp)
  0x00007f15f53443a3: mov    %r11,0x20(%rsp)
  0x00007f15f53443a8: mov    %r12,0x18(%rsp)
  0x00007f15f53443ad: mov    %r13,0x10(%rsp)
  0x00007f15f53443b2: mov    %r14,0x8(%rsp)
  0x00007f15f53443b7: mov    %r15,(%rsp)
  0x00007f15f53443bb: movabs $0x7f16099be49e,%rdi  ;   {external_word}
  0x00007f15f53443c5: movabs $0x7f15f5344365,%rsi  ;   {internal_word}
  0x00007f15f53443cf: mov    %rsp,%rdx
  0x00007f15f53443d2: and    $0xfffffffffffffff0,%rsp
  0x00007f15f53443d6: callq  0x00007f16096e4460  ;   {runtime_call}
  0x00007f15f53443db: hlt    
[Deopt Handler Code]
  0x00007f15f53443dc: movabs $0x7f15f53443dc,%r10  ;   {section_word}
  0x00007f15f53443e6: push   %r10
  0x00007f15f53443e8: jmpq   0x00007f15f5046e40  ;   {runtime_call}
  0x00007f15f53443ed: hlt    
  0x00007f15f53443ee: hlt    
  0x00007f15f53443ef: hlt    
Decoding compiled method 0x00007f15f53454d0:
Code:
[Entry Point]
[Constants]
  # {method} {0x00007f15f0c77bd8} 'encode' '([CII[B)I' in 'sun/nio/cs/UTF_8$Encoder'
  # this:     rsi:rsi   = 'sun/nio/cs/UTF_8$Encoder'
  # parm0:    rdx:rdx   = '[C'
  # parm1:    rcx       = int
  # parm2:    r8        = int
  # parm3:    r9:r9     = '[B'
  #           [sp+0x80]  (sp of caller)
  0x00007f15f53456e0: mov    0x8(%rsi),%r10d
  0x00007f15f53456e4: shl    $0x3,%r10
  0x00007f15f53456e8: cmp    %rax,%r10
  0x00007f15f53456eb: jne    0x00007f15f5045ba0  ;   {runtime_call}
  0x00007f15f53456f1: nopl   0x0(%rax,%rax,1)
  0x00007f15f53456f9: nopl   0x0(%rax)
[Verified Entry Point]
  0x00007f15f5345700: mov    %eax,-0x14000(%rsp)
  0x00007f15f5345707: push   %rbp
  0x00007f15f5345708: sub    $0x70,%rsp
  0x00007f15f534570c: mov    %rsi,0x48(%rsp)
  0x00007f15f5345711: mov    %rdx,0x38(%rsp)
  0x00007f15f5345716: mov    %r9,0x40(%rsp)
  0x00007f15f534571b: movabs $0x7f15f0d2dfb8,%rdi  ;   {metadata(method data for {method} {0x00007f15f0c77bd8} 'encode' '([CII[B)I' in 'sun/nio/cs/UTF_8$Encoder')}
  0x00007f15f5345725: mov    0xdc(%rdi),%ebx
  0x00007f15f534572b: add    $0x8,%ebx
  0x00007f15f534572e: mov    %ebx,0xdc(%rdi)
  0x00007f15f5345734: movabs $0x7f15f0c77bd8,%rdi  ;   {metadata({method} {0x00007f15f0c77bd8} 'encode' '([CII[B)I' in 'sun/nio/cs/UTF_8$Encoder')}
  0x00007f15f534573e: and    $0x1ff8,%ebx
  0x00007f15f5345744: cmp    $0x0,%ebx
  0x00007f15f5345747: je     0x00007f15f5345ebd  ;*iload_2
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@0 (line 704)

  0x00007f15f534574d: mov    %rcx,%rdi
  0x00007f15f5345750: add    %r8d,%edi
  0x00007f15f5345753: mov    %edi,0x34(%rsp)
  0x00007f15f5345757: mov    0xc(%r9),%ebx      ;*arraylength
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@13 (line 706)
                                                ; implicit exception: dispatches to 0x00007f15f5345ed4
  0x00007f15f534575b: movabs $0x7f15f0d2dfb8,%rax  ;   {metadata(method data for {method} {0x00007f15f0c77bd8} 'encode' '([CII[B)I' in 'sun/nio/cs/UTF_8$Encoder')}
  0x00007f15f5345765: addq   $0x1,0x108(%rax)
  0x00007f15f534576d: mov    %r8,%rsi
  0x00007f15f5345770: mov    %rbx,%rdx          ;*invokestatic min
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@14 (line 706)

  0x00007f15f5345773: mov    %ecx,0x30(%rsp)
  0x00007f15f5345777: callq  0x00007f15f5046260  ; OopMap{[56]=Oop [72]=Oop [64]=Oop off=156}
                                                ;*invokestatic min
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@14 (line 706)
                                                ;   {static_call}
  0x00007f15f534577c: mov    0x30(%rsp),%ecx
  0x00007f15f5345780: mov    $0x0,%esi
  0x00007f15f5345785: mov    0x40(%rsp),%r9
  0x00007f15f534578a: mov    0x38(%rsp),%rdx
  0x00007f15f534578f: jmpq   0x00007f15f5345849  ;*iload
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@20 (line 709)

  0x00007f15f5345794: nopl   0x0(%rax)
  0x00007f15f5345798: movslq %ecx,%rdi
  0x00007f15f534579b: cmp    0xc(%rdx),%ecx     ; implicit exception: dispatches to 0x00007f15f5345ed9
  0x00007f15f534579e: jae    0x00007f15f5345ee3
  0x00007f15f53457a4: movzwl 0x10(%rdx,%rdi,2),%edi  ;*caload
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@29 (line 709)

  0x00007f15f53457a9: cmp    $0x80,%edi
  0x00007f15f53457af: movabs $0x7f15f0d2dfb8,%rbx  ;   {metadata(method data for {method} {0x00007f15f0c77bd8} 'encode' '([CII[B)I' in 'sun/nio/cs/UTF_8$Encoder')}
  0x00007f15f53457b9: movabs $0x138,%r8
  0x00007f15f53457c3: jge    0x00007f15f53457d3
  0x00007f15f53457c9: movabs $0x148,%r8
  0x00007f15f53457d3: mov    (%rbx,%r8,1),%r11
  0x00007f15f53457d7: lea    0x1(%r11),%r11
  0x00007f15f53457db: mov    %r11,(%rbx,%r8,1)
  0x00007f15f53457df: jge    0x00007f15f5345888  ;*if_icmpge
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@33 (line 709)

  0x00007f15f53457e5: mov    %rsi,%rbx
  0x00007f15f53457e8: inc    %ebx
  0x00007f15f53457ea: inc    %ecx
  0x00007f15f53457ec: movslq %esi,%r8
  0x00007f15f53457ef: cmp    0xc(%r9),%esi
  0x00007f15f53457f3: jae    0x00007f15f5345eec
  0x00007f15f53457f9: mov    %dil,0x10(%r9,%r8,1)  ;*bastore
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@50 (line 710)

  0x00007f15f53457fe: movabs $0x7f15f0d2dfb8,%rsi  ;   {metadata(method data for {method} {0x00007f15f0c77bd8} 'encode' '([CII[B)I' in 'sun/nio/cs/UTF_8$Encoder')}
  0x00007f15f5345808: mov    0xe0(%rsi),%edi
  0x00007f15f534580e: add    $0x8,%edi
  0x00007f15f5345811: mov    %edi,0xe0(%rsi)
  0x00007f15f5345817: movabs $0x7f15f0c77bd8,%rsi  ;   {metadata({method} {0x00007f15f0c77bd8} 'encode' '([CII[B)I' in 'sun/nio/cs/UTF_8$Encoder')}
  0x00007f15f5345821: and    $0xfff8,%edi
  0x00007f15f5345827: cmp    $0x0,%edi
  0x00007f15f534582a: je     0x00007f15f5345ef5  ; OopMap{[72]=Oop r9=Oop [64]=Oop rdx=Oop [56]=Oop off=336}
                                                ;*goto
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@51 (line 710)

  0x00007f15f5345830: test   %eax,0x14b8a8ca(%rip)        # 0x00007f1609ed0100
                                                ;   {poll}
  0x00007f15f5345836: movabs $0x7f15f0d2dfb8,%rsi  ;   {metadata(method data for {method} {0x00007f15f0c77bd8} 'encode' '([CII[B)I' in 'sun/nio/cs/UTF_8$Encoder')}
  0x00007f15f5345840: incl   0x158(%rsi)
  0x00007f15f5345846: mov    %rbx,%rsi          ;*goto
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@51 (line 710)

  0x00007f15f5345849: cmp    %eax,%esi
  0x00007f15f534584b: movabs $0x7f15f0d2dfb8,%rdi  ;   {metadata(method data for {method} {0x00007f15f0c77bd8} 'encode' '([CII[B)I' in 'sun/nio/cs/UTF_8$Encoder')}
  0x00007f15f5345855: movabs $0x118,%rbx
  0x00007f15f534585f: jge    0x00007f15f534586f
  0x00007f15f5345865: movabs $0x128,%rbx
  0x00007f15f534586f: mov    (%rdi,%rbx,1),%r8
  0x00007f15f5345873: lea    0x1(%r8),%r8
  0x00007f15f5345877: mov    %r8,(%rdi,%rbx,1)
  0x00007f15f534587b: jl     0x00007f15f5345798  ;*if_icmpge
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@24 (line 709)

  0x00007f15f5345881: nopl   0x0(%rax)
  0x00007f15f5345888: mov    0x34(%rsp),%edi
  0x00007f15f534588c: cmp    %edi,%ecx
  0x00007f15f534588e: movabs $0x7f15f0d2dfb8,%rax  ;   {metadata(method data for {method} {0x00007f15f0c77bd8} 'encode' '([CII[B)I' in 'sun/nio/cs/UTF_8$Encoder')}
  0x00007f15f5345898: movabs $0x170,%r8
  0x00007f15f53458a2: jge    0x00007f15f53458b2
  0x00007f15f53458a8: movabs $0x180,%r8
  0x00007f15f53458b2: mov    (%rax,%r8,1),%r11
  0x00007f15f53458b6: lea    0x1(%r11),%r11
  0x00007f15f53458ba: mov    %r11,(%rax,%r8,1)
  0x00007f15f53458be: jge    0x00007f15f5345eae  ;*if_icmpge
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@57 (line 712)

  0x00007f15f53458c4: mov    %rcx,%rax
  0x00007f15f53458c7: inc    %eax
  0x00007f15f53458c9: movslq %ecx,%r8
  0x00007f15f53458cc: cmp    0xc(%rdx),%ecx     ; implicit exception: dispatches to 0x00007f15f5345f0c
  0x00007f15f53458cf: jae    0x00007f15f5345f16
  0x00007f15f53458d5: movzwl 0x10(%rdx,%r8,2),%ecx  ;*caload
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@65 (line 713)

  0x00007f15f53458db: cmp    $0x80,%ecx
  0x00007f15f53458e1: movabs $0x7f15f0d2dfb8,%r8  ;   {metadata(method data for {method} {0x00007f15f0c77bd8} 'encode' '([CII[B)I' in 'sun/nio/cs/UTF_8$Encoder')}
  0x00007f15f53458eb: movabs $0x190,%r11
  0x00007f15f53458f5: jge    0x00007f15f5345905
  0x00007f15f53458fb: movabs $0x1a0,%r11
  0x00007f15f5345905: mov    (%r8,%r11,1),%r13
  0x00007f15f5345909: lea    0x1(%r13),%r13
  0x00007f15f534590d: mov    %r13,(%r8,%r11,1)
  0x00007f15f5345911: jge    0x00007f15f5345949  ;*if_icmpge
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@73 (line 714)

  0x00007f15f5345917: mov    %rsi,%r8
  0x00007f15f534591a: inc    %r8d
  0x00007f15f534591d: movslq %esi,%r11
  0x00007f15f5345920: cmp    0xc(%r9),%esi
  0x00007f15f5345924: jae    0x00007f15f5345f1f
  0x00007f15f534592a: mov    %cl,0x10(%r9,%r11,1)  ;*bastore
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@86 (line 716)

  0x00007f15f534592f: movabs $0x7f15f0d2dfb8,%rsi  ;   {metadata(method data for {method} {0x00007f15f0c77bd8} 'encode' '([CII[B)I' in 'sun/nio/cs/UTF_8$Encoder')}
  0x00007f15f5345939: incl   0x1b0(%rsi)
  0x00007f15f534593f: mov    0x48(%rsp),%rdi
  0x00007f15f5345944: jmpq   0x00007f15f5345e45  ;*goto
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@87 (line 716)

  0x00007f15f5345949: cmp    $0x800,%ecx
  0x00007f15f534594f: movabs $0x7f15f0d2dfb8,%r8  ;   {metadata(method data for {method} {0x00007f15f0c77bd8} 'encode' '([CII[B)I' in 'sun/nio/cs/UTF_8$Encoder')}
  0x00007f15f5345959: movabs $0x1c8,%r11
  0x00007f15f5345963: jge    0x00007f15f5345973
  0x00007f15f5345969: movabs $0x1d8,%r11
  0x00007f15f5345973: mov    (%r8,%r11,1),%r13
  0x00007f15f5345977: lea    0x1(%r13),%r13
  0x00007f15f534597b: mov    %r13,(%r8,%r11,1)
  0x00007f15f534597f: jge    0x00007f15f53459e2  ;*if_icmpge
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@95 (line 717)

  0x00007f15f5345985: mov    %rcx,%r8
  0x00007f15f5345988: sar    $0x6,%r8d
  0x00007f15f534598c: or     $0xc0,%r8d
  0x00007f15f5345993: movslq %esi,%r11
  0x00007f15f5345996: cmp    0xc(%r9),%esi
  0x00007f15f534599a: jae    0x00007f15f5345f28
  0x00007f15f53459a0: mov    %r8b,0x10(%r9,%r11,1)  ;*bastore
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@115 (line 719)

  0x00007f15f53459a5: inc    %esi
  0x00007f15f53459a7: mov    %rsi,%r8
  0x00007f15f53459aa: inc    %r8d
  0x00007f15f53459ad: and    $0x3f,%ecx
  0x00007f15f53459b0: or     $0x80,%ecx
  0x00007f15f53459b6: movslq %esi,%r11
  0x00007f15f53459b9: cmp    0xc(%r9),%esi
  0x00007f15f53459bd: jae    0x00007f15f5345f31
  0x00007f15f53459c3: mov    %cl,0x10(%r9,%r11,1)  ;*bastore
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@133 (line 720)

  0x00007f15f53459c8: movabs $0x7f15f0d2dfb8,%rsi  ;   {metadata(method data for {method} {0x00007f15f0c77bd8} 'encode' '([CII[B)I' in 'sun/nio/cs/UTF_8$Encoder')}
  0x00007f15f53459d2: incl   0x1e8(%rsi)
  0x00007f15f53459d8: mov    0x48(%rsp),%rdi
  0x00007f15f53459dd: jmpq   0x00007f15f5345e45  ;*goto
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@134 (line 720)

  0x00007f15f53459e2: mov    %eax,0x50(%rsp)
  0x00007f15f53459e6: mov    %esi,0x58(%rsp)
  0x00007f15f53459ea: movabs $0x7f15f0d2dfb8,%r8  ;   {metadata(method data for {method} {0x00007f15f0c77bd8} 'encode' '([CII[B)I' in 'sun/nio/cs/UTF_8$Encoder')}
  0x00007f15f53459f4: addq   $0x1,0x200(%r8)
  0x00007f15f53459fc: mov    %rcx,%rsi          ;*invokestatic isSurrogate
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@139 (line 721)

  0x00007f15f53459ff: mov    %ecx,0x54(%rsp)
  0x00007f15f5345a03: nop
  0x00007f15f5345a04: nop
  0x00007f15f5345a05: nop
  0x00007f15f5345a06: nop
  0x00007f15f5345a07: callq  0x00007f15f5046260  ; OopMap{[72]=Oop [64]=Oop [56]=Oop off=812}
                                                ;*invokestatic isSurrogate
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@139 (line 721)
                                                ;   {static_call}
  0x00007f15f5345a0c: cmp    $0x0,%eax
  0x00007f15f5345a0f: movabs $0x7f15f0d2dfb8,%rdx  ;   {metadata(method data for {method} {0x00007f15f0c77bd8} 'encode' '([CII[B)I' in 'sun/nio/cs/UTF_8$Encoder')}
  0x00007f15f5345a19: movabs $0x210,%rax
  0x00007f15f5345a23: je     0x00007f15f5345a33
  0x00007f15f5345a29: movabs $0x220,%rax
  0x00007f15f5345a33: mov    (%rdx,%rax,1),%rsi
  0x00007f15f5345a37: lea    0x1(%rsi),%rsi
  0x00007f15f5345a3b: mov    %rsi,(%rdx,%rax,1)
  0x00007f15f5345a3f: je     0x00007f15f5345dc9  ;*ifeq
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@142 (line 721)

  0x00007f15f5345a45: mov    0x48(%rsp),%rsi
  0x00007f15f5345a4a: mov    0x30(%rsi),%edx
  0x00007f15f5345a4d: shl    $0x3,%rdx          ;*getfield sgp
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@146 (line 722)

  0x00007f15f5345a51: cmp    $0x0,%rdx
  0x00007f15f5345a55: movabs $0x7f15f0d2dfb8,%rdx  ;   {metadata(method data for {method} {0x00007f15f0c77bd8} 'encode' '([CII[B)I' in 'sun/nio/cs/UTF_8$Encoder')}
  0x00007f15f5345a5f: movabs $0x230,%rax
  0x00007f15f5345a69: jne    0x00007f15f5345a79
  0x00007f15f5345a6f: movabs $0x240,%rax
  0x00007f15f5345a79: mov    (%rdx,%rax,1),%rdi
  0x00007f15f5345a7d: lea    0x1(%rdi),%rdi
  0x00007f15f5345a81: mov    %rdi,(%rdx,%rax,1)
  0x00007f15f5345a85: jne    0x00007f15f5345aee  ;*ifnonnull
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@149 (line 722)

  0x00007f15f5345a8b: nopl   0x0(%rax,%rax,1)
  0x00007f15f5345a90: jmpq   0x00007f15f5345f49  ;   {no_reloc}
  0x00007f15f5345a95: add    %al,(%rax)
  0x00007f15f5345a97: add    %al,(%rax)
  0x00007f15f5345a99: add    %ch,%cl
  0x00007f15f5345a9b: mov    $0x4,%ah
  0x00007f15f5345a9d: add    %al,(%rax)         ;*new  ; - sun.nio.cs.UTF_8$Encoder::encode@153 (line 723)

  0x00007f15f5345a9f: mov    %rax,%rdi
  0x00007f15f5345aa2: movabs $0x7f15f0d2dfb8,%rbx  ;   {metadata(method data for {method} {0x00007f15f0c77bd8} 'encode' '([CII[B)I' in 'sun/nio/cs/UTF_8$Encoder')}
  0x00007f15f5345aac: addq   $0x1,0x250(%rbx)
  0x00007f15f5345ab4: mov    %rax,%rsi          ;*invokespecial <init>
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@157 (line 723)

  0x00007f15f5345ab7: mov    %rax,0x60(%rsp)
  0x00007f15f5345abc: nop
  0x00007f15f5345abd: nop
  0x00007f15f5345abe: nop
  0x00007f15f5345abf: callq  0x00007f15f5045de0  ; OopMap{[64]=Oop [56]=Oop [72]=Oop [96]=Oop off=996}
                                                ;*invokespecial <init>
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@157 (line 723)
                                                ;   {optimized virtual_call}
  0x00007f15f5345ac4: mov    0x48(%rsp),%rsi
  0x00007f15f5345ac9: mov    0x60(%rsp),%rax
  0x00007f15f5345ace: mov    %rax,%r10
  0x00007f15f5345ad1: shr    $0x3,%r10
  0x00007f15f5345ad5: mov    %r10d,0x30(%rsi)
  0x00007f15f5345ad9: mov    %rsi,%rdx
  0x00007f15f5345adc: shr    $0x9,%rdx
  0x00007f15f5345ae0: movabs $0x7f15f11ff000,%rcx
  0x00007f15f5345aea: movb   $0x0,(%rdx,%rcx,1)  ;*putfield sgp
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@160 (line 723)

  0x00007f15f5345aee: mov    0x30(%rsi),%edi
  0x00007f15f5345af1: shl    $0x3,%rdi          ;*getfield sgp
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@164 (line 724)

  0x00007f15f5345af5: cmp    (%rdi),%rax        ; implicit exception: dispatches to 0x00007f15f5345f60
  0x00007f15f5345af8: mov    %rdi,%rdx
  0x00007f15f5345afb: movabs $0x7f15f0d2dfb8,%rcx  ;   {metadata(method data for {method} {0x00007f15f0c77bd8} 'encode' '([CII[B)I' in 'sun/nio/cs/UTF_8$Encoder')}
  0x00007f15f5345b05: mov    0x8(%rdx),%edx
  0x00007f15f5345b08: shl    $0x3,%rdx
  0x00007f15f5345b0c: cmp    0x268(%rcx),%rdx
  0x00007f15f5345b13: jne    0x00007f15f5345b22
  0x00007f15f5345b15: addq   $0x1,0x270(%rcx)
  0x00007f15f5345b1d: jmpq   0x00007f15f5345b88
  0x00007f15f5345b22: cmp    0x278(%rcx),%rdx
  0x00007f15f5345b29: jne    0x00007f15f5345b38
  0x00007f15f5345b2b: addq   $0x1,0x280(%rcx)
  0x00007f15f5345b33: jmpq   0x00007f15f5345b88
  0x00007f15f5345b38: cmpq   $0x0,0x268(%rcx)
  0x00007f15f5345b43: jne    0x00007f15f5345b5c
  0x00007f15f5345b45: mov    %rdx,0x268(%rcx)
  0x00007f15f5345b4c: movq   $0x1,0x270(%rcx)
  0x00007f15f5345b57: jmpq   0x00007f15f5345b88
  0x00007f15f5345b5c: cmpq   $0x0,0x278(%rcx)
  0x00007f15f5345b67: jne    0x00007f15f5345b80
  0x00007f15f5345b69: mov    %rdx,0x278(%rcx)
  0x00007f15f5345b70: movq   $0x1,0x280(%rcx)
  0x00007f15f5345b7b: jmpq   0x00007f15f5345b88
  0x00007f15f5345b80: addq   $0x1,0x260(%rcx)
  0x00007f15f5345b88: mov    0x50(%rsp),%eax
  0x00007f15f5345b8c: dec    %eax
  0x00007f15f5345b8e: mov    0x54(%rsp),%edx
  0x00007f15f5345b92: mov    0x38(%rsp),%rcx
  0x00007f15f5345b97: mov    %rax,%r8
  0x00007f15f5345b9a: mov    0x34(%rsp),%r9d
  0x00007f15f5345b9f: mov    %rdi,%rsi          ;*invokevirtual parse
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@175 (line 724)

  0x00007f15f5345ba2: nop
  0x00007f15f5345ba3: nop
  0x00007f15f5345ba4: nop
  0x00007f15f5345ba5: movabs $0xffffffffffffffff,%rax
  0x00007f15f5345baf: callq  0x00007f15f5046020  ; OopMap{[64]=Oop [56]=Oop [72]=Oop off=1236}
                                                ;*invokevirtual parse
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@175 (line 724)
                                                ;   {virtual_call}
  0x00007f15f5345bb4: cmp    $0x0,%eax
  0x00007f15f5345bb7: movabs $0x7f15f0d2dfb8,%rsi  ;   {metadata(method data for {method} {0x00007f15f0c77bd8} 'encode' '([CII[B)I' in 'sun/nio/cs/UTF_8$Encoder')}
  0x00007f15f5345bc1: movabs $0x290,%rdi
  0x00007f15f5345bcb: jge    0x00007f15f5345bdb
  0x00007f15f5345bd1: movabs $0x2a0,%rdi
  0x00007f15f5345bdb: mov    (%rsi,%rdi,1),%rbx
  0x00007f15f5345bdf: lea    0x1(%rbx),%rbx
  0x00007f15f5345be3: mov    %rbx,(%rsi,%rdi,1)
  0x00007f15f5345be7: jge    0x00007f15f5345d11  ;*ifge
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@182 (line 725)

  0x00007f15f5345bed: mov    0x48(%rsp),%rsi
  0x00007f15f5345bf2: movabs $0x7f15f0d2dfb8,%rdi  ;   {metadata(method data for {method} {0x00007f15f0c77bd8} 'encode' '([CII[B)I' in 'sun/nio/cs/UTF_8$Encoder')}
  0x00007f15f5345bfc: mov    0x8(%rsi),%esi
  0x00007f15f5345bff: shl    $0x3,%rsi
  0x00007f15f5345c03: cmp    0x2b8(%rdi),%rsi
  0x00007f15f5345c0a: jne    0x00007f15f5345c19
  0x00007f15f5345c0c: addq   $0x1,0x2c0(%rdi)
  0x00007f15f5345c14: jmpq   0x00007f15f5345c7f
  0x00007f15f5345c19: cmp    0x2c8(%rdi),%rsi
  0x00007f15f5345c20: jne    0x00007f15f5345c2f
  0x00007f15f5345c22: addq   $0x1,0x2d0(%rdi)
  0x00007f15f5345c2a: jmpq   0x00007f15f5345c7f
  0x00007f15f5345c2f: cmpq   $0x0,0x2b8(%rdi)
  0x00007f15f5345c3a: jne    0x00007f15f5345c53
  0x00007f15f5345c3c: mov    %rsi,0x2b8(%rdi)
  0x00007f15f5345c43: movq   $0x1,0x2c0(%rdi)
  0x00007f15f5345c4e: jmpq   0x00007f15f5345c7f
  0x00007f15f5345c53: cmpq   $0x0,0x2c8(%rdi)
  0x00007f15f5345c5e: jne    0x00007f15f5345c77
  0x00007f15f5345c60: mov    %rsi,0x2c8(%rdi)
  0x00007f15f5345c67: movq   $0x1,0x2d0(%rdi)
  0x00007f15f5345c72: jmpq   0x00007f15f5345c7f
  0x00007f15f5345c77: addq   $0x1,0x2b0(%rdi)
  0x00007f15f5345c7f: mov    0x48(%rsp),%rsi    ;*invokevirtual malformedInputAction
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@186 (line 726)

  0x00007f15f5345c84: nop
  0x00007f15f5345c85: nop
  0x00007f15f5345c86: nop
  0x00007f15f5345c87: callq  0x00007f15f5045de0  ; OopMap{[64]=Oop [56]=Oop [72]=Oop off=1452}
                                                ;*invokevirtual malformedInputAction
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@186 (line 726)
                                                ;   {optimized virtual_call}
  0x00007f15f5345c8c: movabs $0x6b4916858,%r10  ;   {oop(a 'java/nio/charset/CodingErrorAction')}
  0x00007f15f5345c96: cmp    %r10,%rax
  0x00007f15f5345c99: movabs $0x7f15f0d2dfb8,%rax  ;   {metadata(method data for {method} {0x00007f15f0c77bd8} 'encode' '([CII[B)I' in 'sun/nio/cs/UTF_8$Encoder')}
  0x00007f15f5345ca3: movabs $0x2e0,%rsi
  0x00007f15f5345cad: je     0x00007f15f5345cbd
  0x00007f15f5345cb3: movabs $0x2f0,%rsi
  0x00007f15f5345cbd: mov    (%rax,%rsi,1),%rdi
  0x00007f15f5345cc1: lea    0x1(%rdi),%rdi
  0x00007f15f5345cc5: mov    %rdi,(%rax,%rsi,1)
  0x00007f15f5345cc9: jne    0x00007f15f5345e9d  ;*if_acmpeq
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@192 (line 726)

  0x00007f15f5345ccf: mov    0x58(%rsp),%esi
  0x00007f15f5345cd3: mov    0x40(%rsp),%r9
  0x00007f15f5345cd8: mov    0x48(%rsp),%rdi
  0x00007f15f5345cdd: mov    %rsi,%rax
  0x00007f15f5345ce0: inc    %eax
  0x00007f15f5345ce2: movsbl 0x2c(%rdi),%ebx    ;*getfield repl
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@205 (line 728)

  0x00007f15f5345ce6: movslq %esi,%rdx
  0x00007f15f5345ce9: cmp    0xc(%r9),%esi
  0x00007f15f5345ced: jae    0x00007f15f5345f65
  0x00007f15f5345cf3: mov    %bl,0x10(%r9,%rdx,1)  ;*bastore
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@208 (line 728)

  0x00007f15f5345cf8: movabs $0x7f15f0d2dfb8,%rsi  ;   {metadata(method data for {method} {0x00007f15f0c77bd8} 'encode' '([CII[B)I' in 'sun/nio/cs/UTF_8$Encoder')}
  0x00007f15f5345d02: incl   0x300(%rsi)
  0x00007f15f5345d08: mov    0x50(%rsp),%esi
  0x00007f15f5345d0c: jmpq   0x00007f15f5345dae  ;*goto
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@209 (line 728)

  0x00007f15f5345d11: mov    0x58(%rsp),%esi
  0x00007f15f5345d15: mov    0x40(%rsp),%r9
  0x00007f15f5345d1a: mov    0x48(%rsp),%rdi
  0x00007f15f5345d1f: mov    %rax,%rbx
  0x00007f15f5345d22: sar    $0x12,%ebx
  0x00007f15f5345d25: or     $0xf0,%ebx
  0x00007f15f5345d2b: movslq %esi,%rdx
  0x00007f15f5345d2e: cmp    0xc(%r9),%esi
  0x00007f15f5345d32: jae    0x00007f15f5345f6e
  0x00007f15f5345d38: mov    %bl,0x10(%r9,%rdx,1)  ;*bastore
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@229 (line 730)

  0x00007f15f5345d3d: inc    %esi
  0x00007f15f5345d3f: mov    %rax,%rbx
  0x00007f15f5345d42: sar    $0xc,%ebx
  0x00007f15f5345d45: and    $0x3f,%ebx
  0x00007f15f5345d48: or     $0x80,%ebx
  0x00007f15f5345d4e: movslq %esi,%rdx
  0x00007f15f5345d51: cmp    0xc(%r9),%esi
  0x00007f15f5345d55: jae    0x00007f15f5345f77
  0x00007f15f5345d5b: mov    %bl,0x10(%r9,%rdx,1)  ;*bastore
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@250 (line 731)

  0x00007f15f5345d60: inc    %esi
  0x00007f15f5345d62: mov    %rax,%rbx
  0x00007f15f5345d65: sar    $0x6,%ebx
  0x00007f15f5345d68: and    $0x3f,%ebx
  0x00007f15f5345d6b: or     $0x80,%ebx
  0x00007f15f5345d71: movslq %esi,%rdx
  0x00007f15f5345d74: cmp    0xc(%r9),%esi
  0x00007f15f5345d78: jae    0x00007f15f5345f80
  0x00007f15f5345d7e: mov    %bl,0x10(%r9,%rdx,1)  ;*bastore
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@271 (line 732)

  0x00007f15f5345d83: inc    %esi
  0x00007f15f5345d85: mov    %rsi,%rbx
  0x00007f15f5345d88: inc    %ebx
  0x00007f15f5345d8a: and    $0x3f,%eax
  0x00007f15f5345d8d: or     $0x80,%eax
  0x00007f15f5345d93: movslq %esi,%rdx
  0x00007f15f5345d96: cmp    0xc(%r9),%esi
  0x00007f15f5345d9a: jae    0x00007f15f5345f89
  0x00007f15f5345da0: mov    %al,0x10(%r9,%rdx,1)  ;*bastore
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@289 (line 733)

  0x00007f15f5345da5: mov    0x50(%rsp),%esi
  0x00007f15f5345da9: inc    %esi
  0x00007f15f5345dab: mov    %rbx,%rax
  0x00007f15f5345dae: movabs $0x7f15f0d2dfb8,%rbx  ;   {metadata(method data for {method} {0x00007f15f0c77bd8} 'encode' '([CII[B)I' in 'sun/nio/cs/UTF_8$Encoder')}
  0x00007f15f5345db8: incl   0x318(%rbx)
  0x00007f15f5345dbe: mov    %rax,%r8
  0x00007f15f5345dc1: mov    %rsi,%rax
  0x00007f15f5345dc4: jmpq   0x00007f15f5345e45  ;*goto
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@293 (line 736)

  0x00007f15f5345dc9: mov    0x54(%rsp),%ecx
  0x00007f15f5345dcd: mov    0x50(%rsp),%eax
  0x00007f15f5345dd1: mov    0x58(%rsp),%esi
  0x00007f15f5345dd5: mov    0x40(%rsp),%r9
  0x00007f15f5345dda: mov    0x48(%rsp),%rdi
  0x00007f15f5345ddf: mov    %rcx,%rbx
  0x00007f15f5345de2: sar    $0xc,%ebx
  0x00007f15f5345de5: or     $0xe0,%ebx
  0x00007f15f5345deb: movslq %esi,%rdx
  0x00007f15f5345dee: cmp    0xc(%r9),%esi
  0x00007f15f5345df2: jae    0x00007f15f5345f92
  0x00007f15f5345df8: mov    %bl,0x10(%r9,%rdx,1)  ;*bastore
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@313 (line 738)

  0x00007f15f5345dfd: inc    %esi
  0x00007f15f5345dff: mov    %rcx,%rbx
  0x00007f15f5345e02: sar    $0x6,%ebx
  0x00007f15f5345e05: and    $0x3f,%ebx
  0x00007f15f5345e08: or     $0x80,%ebx
  0x00007f15f5345e0e: movslq %esi,%rdx
  0x00007f15f5345e11: cmp    0xc(%r9),%esi
  0x00007f15f5345e15: jae    0x00007f15f5345f9b
  0x00007f15f5345e1b: mov    %bl,0x10(%r9,%rdx,1)  ;*bastore
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@334 (line 739)

  0x00007f15f5345e20: inc    %esi
  0x00007f15f5345e22: mov    %rsi,%rbx
  0x00007f15f5345e25: inc    %ebx
  0x00007f15f5345e27: and    $0x3f,%ecx
  0x00007f15f5345e2a: or     $0x80,%ecx
  0x00007f15f5345e30: movslq %esi,%rdx
  0x00007f15f5345e33: cmp    0xc(%r9),%esi
  0x00007f15f5345e37: jae    0x00007f15f5345fa4
  0x00007f15f5345e3d: mov    %cl,0x10(%r9,%rdx,1)  ;*bastore
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@352 (line 740)

  0x00007f15f5345e42: mov    %rbx,%r8           ;*goto
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@353 (line 742)

  0x00007f15f5345e45: movabs $0x7f15f0d2dfb8,%rsi  ;   {metadata(method data for {method} {0x00007f15f0c77bd8} 'encode' '([CII[B)I' in 'sun/nio/cs/UTF_8$Encoder')}
  0x00007f15f5345e4f: mov    0xe0(%rsi),%ebx
  0x00007f15f5345e55: add    $0x8,%ebx
  0x00007f15f5345e58: mov    %ebx,0xe0(%rsi)
  0x00007f15f5345e5e: movabs $0x7f15f0c77bd8,%rsi  ;   {metadata({method} {0x00007f15f0c77bd8} 'encode' '([CII[B)I' in 'sun/nio/cs/UTF_8$Encoder')}
  0x00007f15f5345e68: and    $0xfff8,%ebx
  0x00007f15f5345e6e: cmp    $0x0,%ebx
  0x00007f15f5345e71: je     0x00007f15f5345fad  ; OopMap{[56]=Oop rdi=Oop [72]=Oop r9=Oop [64]=Oop off=1943}
                                                ;*goto
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@353 (line 742)

  0x00007f15f5345e77: test   %eax,0x14b8a283(%rip)        # 0x00007f1609ed0100
                                                ;   {poll}
  0x00007f15f5345e7d: movabs $0x7f15f0d2dfb8,%rsi  ;   {metadata(method data for {method} {0x00007f15f0c77bd8} 'encode' '([CII[B)I' in 'sun/nio/cs/UTF_8$Encoder')}
  0x00007f15f5345e87: incl   0x330(%rsi)
  0x00007f15f5345e8d: mov    %r8,%rsi
  0x00007f15f5345e90: mov    %rax,%rcx
  0x00007f15f5345e93: mov    0x38(%rsp),%rdx
  0x00007f15f5345e98: jmpq   0x00007f15f5345888  ;*goto
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@353 (line 742)

  0x00007f15f5345e9d: mov    $0xffffffff,%eax
  0x00007f15f5345ea2: add    $0x70,%rsp
  0x00007f15f5345ea6: pop    %rbp
  0x00007f15f5345ea7: test   %eax,0x14b8a253(%rip)        # 0x00007f1609ed0100
                                                ;   {poll_return}
  0x00007f15f5345ead: retq                      ;*ireturn
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@196 (line 727)

  0x00007f15f5345eae: mov    %rsi,%rax
  0x00007f15f5345eb1: add    $0x70,%rsp
  0x00007f15f5345eb5: pop    %rbp
  0x00007f15f5345eb6: test   %eax,0x14b8a244(%rip)        # 0x00007f1609ed0100
                                                ;   {poll_return}
  0x00007f15f5345ebc: retq   
  0x00007f15f5345ebd: mov    %rdi,0x8(%rsp)
  0x00007f15f5345ec2: movq   $0xffffffffffffffff,(%rsp)
  0x00007f15f5345eca: callq  0x00007f15f518d220  ; OopMap{rsi=Oop [72]=Oop rdx=Oop [56]=Oop r9=Oop [64]=Oop off=2031}
                                                ;*synchronization entry
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@-1 (line 704)
                                                ;   {runtime_call}
  0x00007f15f5345ecf: jmpq   0x00007f15f534574d
  0x00007f15f5345ed4: callq  0x00007f15f5072940  ; OopMap{r9=Oop [64]=Oop [56]=Oop [72]=Oop off=2041}
                                                ;*arraylength
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@13 (line 706)
                                                ;   {runtime_call}
  0x00007f15f5345ed9: callq  0x00007f15f5072940  ; OopMap{[72]=Oop r9=Oop [64]=Oop rdx=Oop [56]=Oop off=2046}
                                                ;*caload
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@29 (line 709)
                                                ;   {runtime_call}
  0x00007f15f5345ede: callq  0x00007f15f5072940  ; OopMap{[72]=Oop r9=Oop [64]=Oop rdx=Oop [56]=Oop off=2051}
                                                ;*caload
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@29 (line 709)
                                                ;   {runtime_call}
  0x00007f15f5345ee3: mov    %rcx,(%rsp)
  0x00007f15f5345ee7: callq  0x00007f15f5073000  ; OopMap{[72]=Oop r9=Oop [64]=Oop rdx=Oop [56]=Oop off=2060}
                                                ;*caload
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@29 (line 709)
                                                ;   {runtime_call}
  0x00007f15f5345eec: mov    %rsi,(%rsp)
  0x00007f15f5345ef0: callq  0x00007f15f5073000  ; OopMap{[72]=Oop r9=Oop [64]=Oop rdx=Oop [56]=Oop off=2069}
                                                ;*bastore
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@50 (line 710)
                                                ;   {runtime_call}
  0x00007f15f5345ef5: mov    %rsi,0x8(%rsp)
  0x00007f15f5345efa: movq   $0x33,(%rsp)
  0x00007f15f5345f02: callq  0x00007f15f518d220  ; OopMap{[72]=Oop r9=Oop [64]=Oop rdx=Oop [56]=Oop off=2087}
                                                ;*goto
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@51 (line 710)
                                                ;   {runtime_call}
  0x00007f15f5345f07: jmpq   0x00007f15f5345830
  0x00007f15f5345f0c: callq  0x00007f15f5072940  ; OopMap{r9=Oop [64]=Oop rdx=Oop [56]=Oop [72]=Oop off=2097}
                                                ;*caload
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@65 (line 713)
                                                ;   {runtime_call}
  0x00007f15f5345f11: callq  0x00007f15f5072940  ; OopMap{r9=Oop [64]=Oop rdx=Oop [56]=Oop [72]=Oop off=2102}
                                                ;*caload
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@65 (line 713)
                                                ;   {runtime_call}
  0x00007f15f5345f16: mov    %rcx,(%rsp)
  0x00007f15f5345f1a: callq  0x00007f15f5073000  ; OopMap{r9=Oop [64]=Oop rdx=Oop [56]=Oop [72]=Oop off=2111}
                                                ;*caload
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@65 (line 713)
                                                ;   {runtime_call}
  0x00007f15f5345f1f: mov    %rsi,(%rsp)
  0x00007f15f5345f23: callq  0x00007f15f5073000  ; OopMap{r9=Oop [64]=Oop rdx=Oop [56]=Oop [72]=Oop off=2120}
                                                ;*bastore
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@86 (line 716)
                                                ;   {runtime_call}
  0x00007f15f5345f28: mov    %rsi,(%rsp)
  0x00007f15f5345f2c: callq  0x00007f15f5073000  ; OopMap{r9=Oop [64]=Oop rdx=Oop [56]=Oop [72]=Oop off=2129}
                                                ;*bastore
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@115 (line 719)
                                                ;   {runtime_call}
  0x00007f15f5345f31: mov    %rsi,(%rsp)
  0x00007f15f5345f35: callq  0x00007f15f5073000  ; OopMap{r9=Oop [64]=Oop rdx=Oop [56]=Oop [72]=Oop off=2138}
                                                ;*bastore
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@133 (line 720)
                                                ;   {runtime_call}
  0x00007f15f5345f3a: movabs $0x0,%rdx          ;   {metadata(NULL)}
  0x00007f15f5345f44: mov    $0xa050f00,%eax
  0x00007f15f5345f49: callq  0x00007f15f518e1e0  ; OopMap{[64]=Oop [56]=Oop [72]=Oop off=2158}
                                                ;*new  ; - sun.nio.cs.UTF_8$Encoder::encode@153 (line 723)
                                                ;   {runtime_call}
  0x00007f15f5345f4e: jmpq   0x00007f15f5345a90
  0x00007f15f5345f53: mov    %rdx,%rdx
  0x00007f15f5345f56: callq  0x00007f15f5072420  ; OopMap{[64]=Oop [56]=Oop [72]=Oop off=2171}
                                                ;*new  ; - sun.nio.cs.UTF_8$Encoder::encode@153 (line 723)
                                                ;   {runtime_call}
  0x00007f15f5345f5b: jmpq   0x00007f15f5345a9f
  0x00007f15f5345f60: callq  0x00007f15f5072940  ; OopMap{[64]=Oop [56]=Oop rsi=Oop [72]=Oop rdi=Oop off=2181}
                                                ;*invokevirtual parse
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@175 (line 724)
                                                ;   {runtime_call}
  0x00007f15f5345f65: mov    %rsi,(%rsp)
  0x00007f15f5345f69: callq  0x00007f15f5073000  ; OopMap{[56]=Oop rdi=Oop [72]=Oop r9=Oop [64]=Oop off=2190}
                                                ;*bastore
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@208 (line 728)
                                                ;   {runtime_call}
  0x00007f15f5345f6e: mov    %rsi,(%rsp)
  0x00007f15f5345f72: callq  0x00007f15f5073000  ; OopMap{[56]=Oop rdi=Oop [72]=Oop r9=Oop [64]=Oop off=2199}
                                                ;*bastore
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@229 (line 730)
                                                ;   {runtime_call}
  0x00007f15f5345f77: mov    %rsi,(%rsp)
  0x00007f15f5345f7b: callq  0x00007f15f5073000  ; OopMap{[56]=Oop rdi=Oop [72]=Oop r9=Oop [64]=Oop off=2208}
                                                ;*bastore
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@250 (line 731)
                                                ;   {runtime_call}
  0x00007f15f5345f80: mov    %rsi,(%rsp)
  0x00007f15f5345f84: callq  0x00007f15f5073000  ; OopMap{[56]=Oop rdi=Oop [72]=Oop r9=Oop [64]=Oop off=2217}
                                                ;*bastore
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@271 (line 732)
                                                ;   {runtime_call}
  0x00007f15f5345f89: mov    %rsi,(%rsp)
  0x00007f15f5345f8d: callq  0x00007f15f5073000  ; OopMap{[56]=Oop rdi=Oop [72]=Oop r9=Oop [64]=Oop off=2226}
                                                ;*bastore
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@289 (line 733)
                                                ;   {runtime_call}
  0x00007f15f5345f92: mov    %rsi,(%rsp)
  0x00007f15f5345f96: callq  0x00007f15f5073000  ; OopMap{[56]=Oop rdi=Oop [72]=Oop r9=Oop [64]=Oop off=2235}
                                                ;*bastore
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@313 (line 738)
                                                ;   {runtime_call}
  0x00007f15f5345f9b: mov    %rsi,(%rsp)
  0x00007f15f5345f9f: callq  0x00007f15f5073000  ; OopMap{[56]=Oop rdi=Oop [72]=Oop r9=Oop [64]=Oop off=2244}
                                                ;*bastore
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@334 (line 739)
                                                ;   {runtime_call}
  0x00007f15f5345fa4: mov    %rsi,(%rsp)
  0x00007f15f5345fa8: callq  0x00007f15f5073000  ; OopMap{[56]=Oop rdi=Oop [72]=Oop r9=Oop [64]=Oop off=2253}
                                                ;*bastore
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@352 (line 740)
                                                ;   {runtime_call}
  0x00007f15f5345fad: mov    %rsi,0x8(%rsp)
  0x00007f15f5345fb2: movq   $0x161,(%rsp)
  0x00007f15f5345fba: callq  0x00007f15f518d220  ; OopMap{[56]=Oop rdi=Oop [72]=Oop r9=Oop [64]=Oop off=2271}
                                                ;*goto
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@353 (line 742)
                                                ;   {runtime_call}
  0x00007f15f5345fbf: jmpq   0x00007f15f5345e77
  0x00007f15f5345fc4: nop
  0x00007f15f5345fc5: nop
  0x00007f15f5345fc6: mov    0x300(%r15),%rax
  0x00007f15f5345fcd: movabs $0x0,%r10
  0x00007f15f5345fd7: mov    %r10,0x300(%r15)
  0x00007f15f5345fde: movabs $0x0,%r10
  0x00007f15f5345fe8: mov    %r10,0x308(%r15)
  0x00007f15f5345fef: add    $0x70,%rsp
  0x00007f15f5345ff3: pop    %rbp
  0x00007f15f5345ff4: jmpq   0x00007f15f506ff20  ;   {runtime_call}
  0x00007f15f5345ff9: hlt    
  0x00007f15f5345ffa: hlt    
  0x00007f15f5345ffb: hlt    
  0x00007f15f5345ffc: hlt    
  0x00007f15f5345ffd: hlt    
  0x00007f15f5345ffe: hlt    
  0x00007f15f5345fff: hlt    
[Stub Code]
  0x00007f15f5346000: nop                       ;   {no_reloc}
  0x00007f15f5346001: nop
  0x00007f15f5346002: nop
  0x00007f15f5346003: nop
  0x00007f15f5346004: nop
  0x00007f15f5346005: movabs $0x0,%rbx          ;   {static_stub}
  0x00007f15f534600f: jmpq   0x00007f15f534600f  ;   {runtime_call}
  0x00007f15f5346014: nop
  0x00007f15f5346015: movabs $0x0,%rbx          ;   {static_stub}
  0x00007f15f534601f: jmpq   0x00007f15f534601f  ;   {runtime_call}
  0x00007f15f5346024: nop
  0x00007f15f5346025: movabs $0x0,%rbx          ;   {static_stub}
  0x00007f15f534602f: jmpq   0x00007f15f534602f  ;   {runtime_call}
  0x00007f15f5346034: nop
  0x00007f15f5346035: movabs $0x0,%rbx          ;   {static_stub}
  0x00007f15f534603f: jmpq   0x00007f15f534603f  ;   {runtime_call}
  0x00007f15f5346044: nop
  0x00007f15f5346045: movabs $0x0,%rbx          ;   {static_stub}
  0x00007f15f534604f: jmpq   0x00007f15f534604f  ;   {runtime_call}
[Exception Handler]
  0x00007f15f5346054: callq  0x00007f15f50709e0  ;   {runtime_call}
  0x00007f15f5346059: mov    %rsp,-0x28(%rsp)
  0x00007f15f534605e: sub    $0x80,%rsp
  0x00007f15f5346065: mov    %rax,0x78(%rsp)
  0x00007f15f534606a: mov    %rcx,0x70(%rsp)
  0x00007f15f534606f: mov    %rdx,0x68(%rsp)
  0x00007f15f5346074: mov    %rbx,0x60(%rsp)
  0x00007f15f5346079: mov    %rbp,0x50(%rsp)
  0x00007f15f534607e: mov    %rsi,0x48(%rsp)
  0x00007f15f5346083: mov    %rdi,0x40(%rsp)
  0x00007f15f5346088: mov    %r8,0x38(%rsp)
  0x00007f15f534608d: mov    %r9,0x30(%rsp)
  0x00007f15f5346092: mov    %r10,0x28(%rsp)
  0x00007f15f5346097: mov    %r11,0x20(%rsp)
  0x00007f15f534609c: mov    %r12,0x18(%rsp)
  0x00007f15f53460a1: mov    %r13,0x10(%rsp)
  0x00007f15f53460a6: mov    %r14,0x8(%rsp)
  0x00007f15f53460ab: mov    %r15,(%rsp)
  0x00007f15f53460af: movabs $0x7f16099be49e,%rdi  ;   {external_word}
  0x00007f15f53460b9: movabs $0x7f15f5346059,%rsi  ;   {internal_word}
  0x00007f15f53460c3: mov    %rsp,%rdx
  0x00007f15f53460c6: and    $0xfffffffffffffff0,%rsp
  0x00007f15f53460ca: callq  0x00007f16096e4460  ;   {runtime_call}
  0x00007f15f53460cf: hlt    
[Deopt Handler Code]
  0x00007f15f53460d0: movabs $0x7f15f53460d0,%r10  ;   {section_word}
  0x00007f15f53460da: push   %r10
  0x00007f15f53460dc: jmpq   0x00007f15f5046e40  ;   {runtime_call}
  0x00007f15f53460e1: hlt    
  0x00007f15f53460e2: hlt    
  0x00007f15f53460e3: hlt    
  0x00007f15f53460e4: hlt    
  0x00007f15f53460e5: hlt    
  0x00007f15f53460e6: hlt    
  0x00007f15f53460e7: hlt    
Decoding compiled method 0x00007f15f53468d0:
Code:
[Entry Point]
[Verified Entry Point]
[Constants]
  # {method} {0x00007f15f0c42fb8} 'copyOfRange' '([CII)[C' in 'java/util/Arrays'
  # parm0:    rsi:rsi   = '[C'
  # parm1:    rdx       = int
  # parm2:    rcx       = int
  #           [sp+0x80]  (sp of caller)
  0x00007f15f5346ac0: mov    %eax,-0x14000(%rsp)
  0x00007f15f5346ac7: push   %rbp
  0x00007f15f5346ac8: sub    $0x70,%rsp
  0x00007f15f5346acc: mov    %edx,0x40(%rsp)
  0x00007f15f5346ad0: movabs $0x7f15f0dc9768,%rbx  ;   {metadata(method data for {method} {0x00007f15f0c42fb8} 'copyOfRange' '([CII)[C' in 'java/util/Arrays')}
  0x00007f15f5346ada: mov    0xdc(%rbx),%edi
  0x00007f15f5346ae0: add    $0x8,%edi
  0x00007f15f5346ae3: mov    %edi,0xdc(%rbx)
  0x00007f15f5346ae9: movabs $0x7f15f0c42fb8,%rbx  ;   {metadata({method} {0x00007f15f0c42fb8} 'copyOfRange' '([CII)[C' in 'java/util/Arrays')}
  0x00007f15f5346af3: and    $0x1ff8,%edi
  0x00007f15f5346af9: cmp    $0x0,%edi
  0x00007f15f5346afc: je     0x00007f15f5346fae  ;*iload_2
                                                ; - java.util.Arrays::copyOfRange@0 (line 3661)

  0x00007f15f5346b02: mov    %rcx,%r8
  0x00007f15f5346b05: sub    %edx,%r8d
  0x00007f15f5346b08: cmp    $0x0,%r8d
  0x00007f15f5346b0c: movabs $0x7f15f0dc9768,%rbx  ;   {metadata(method data for {method} {0x00007f15f0c42fb8} 'copyOfRange' '([CII)[C' in 'java/util/Arrays')}
  0x00007f15f5346b16: movabs $0x108,%rdi
  0x00007f15f5346b20: jge    0x00007f15f5346b30
  0x00007f15f5346b26: movabs $0x118,%rdi
  0x00007f15f5346b30: mov    (%rbx,%rdi,1),%rax
  0x00007f15f5346b34: lea    0x1(%rax),%rax
  0x00007f15f5346b38: mov    %rax,(%rbx,%rdi,1)
  0x00007f15f5346b3c: jl     0x00007f15f5346c35  ;*ifge
                                                ; - java.util.Arrays::copyOfRange@5 (line 3662)

  0x00007f15f5346b42: mov    %r8,%rbx
  0x00007f15f5346b45: mov    %rdx,%r9
  0x00007f15f5346b48: movabs $0x7c0000208,%rdx  ;   {metadata({type array char})}
  0x00007f15f5346b52: mov    %rsi,%r11
  0x00007f15f5346b55: movslq %ebx,%rbx
  0x00007f15f5346b58: mov    %rbx,%rdi
  0x00007f15f5346b5b: cmp    $0xffffff,%rbx
  0x00007f15f5346b62: ja     0x00007f15f5346fc5
  0x00007f15f5346b68: movabs $0x17,%rsi
  0x00007f15f5346b72: lea    (%rsi,%rbx,2),%rsi
  0x00007f15f5346b76: and    $0xfffffffffffffff8,%rsi
  0x00007f15f5346b7a: mov    0x60(%r15),%rax
  0x00007f15f5346b7e: lea    (%rax,%rsi,1),%rsi
  0x00007f15f5346b82: cmp    0x70(%r15),%rsi
  0x00007f15f5346b86: ja     0x00007f15f5346fc5
  0x00007f15f5346b8c: mov    %rsi,0x60(%r15)
  0x00007f15f5346b90: sub    %rax,%rsi
  0x00007f15f5346b93: movq   $0x1,(%rax)
  0x00007f15f5346b9a: mov    %rdx,%rcx
  0x00007f15f5346b9d: shr    $0x3,%rcx
  0x00007f15f5346ba1: mov    %ecx,0x8(%rax)
  0x00007f15f5346ba4: mov    %ebx,0xc(%rax)
  0x00007f15f5346ba7: sub    $0x10,%rsi
  0x00007f15f5346bab: je     0x00007f15f5346bc2
  0x00007f15f5346bb1: xor    %rbx,%rbx
  0x00007f15f5346bb4: shr    $0x3,%rsi
  0x00007f15f5346bb8: mov    %rbx,0x8(%rax,%rsi,8)
  0x00007f15f5346bbd: dec    %rsi
  0x00007f15f5346bc0: jne    0x00007f15f5346bb8  ;*newarray
                                                ; - java.util.Arrays::copyOfRange@40 (line 3664)

  0x00007f15f5346bc2: mov    0xc(%r11),%esi     ;*arraylength
                                                ; - java.util.Arrays::copyOfRange@50 (line 3665)
                                                ; implicit exception: dispatches to 0x00007f15f5346fcf
  0x00007f15f5346bc6: movabs $0x7f15f0dc9768,%rdx  ;   {metadata(method data for {method} {0x00007f15f0c42fb8} 'copyOfRange' '([CII)[C' in 'java/util/Arrays')}
  0x00007f15f5346bd0: addq   $0x1,0x208(%rdx)
  0x00007f15f5346bd8: sub    %r9d,%esi
  0x00007f15f5346bdb: mov    %r8,%rdx           ;*invokestatic min
                                                ; - java.util.Arrays::copyOfRange@54 (line 3666)

  0x00007f15f5346bde: mov    %rax,0x48(%rsp)
  0x00007f15f5346be3: mov    %r11,0x38(%rsp)
  0x00007f15f5346be8: nop
  0x00007f15f5346be9: nop
  0x00007f15f5346bea: nop
  0x00007f15f5346beb: nop
  0x00007f15f5346bec: nop
  0x00007f15f5346bed: nop
  0x00007f15f5346bee: nop
  0x00007f15f5346bef: callq  0x00007f15f5046260  ; OopMap{[72]=Oop [56]=Oop off=308}
                                                ;*invokestatic min
                                                ; - java.util.Arrays::copyOfRange@54 (line 3666)
                                                ;   {static_call}
  0x00007f15f5346bf4: movabs $0x7f15f0dc9768,%rsi  ;   {metadata(method data for {method} {0x00007f15f0c42fb8} 'copyOfRange' '([CII)[C' in 'java/util/Arrays')}
  0x00007f15f5346bfe: addq   $0x1,0x218(%rsi)
  0x00007f15f5346c06: mov    0x38(%rsp),%rsi
  0x00007f15f5346c0b: mov    0x40(%rsp),%edx
  0x00007f15f5346c0f: mov    0x48(%rsp),%rcx
  0x00007f15f5346c14: mov    $0x0,%r8d
  0x00007f15f5346c1a: mov    %rax,%r9           ;*invokestatic arraycopy
                                                ; - java.util.Arrays::copyOfRange@57 (line 3665)

  0x00007f15f5346c1d: nop
  0x00007f15f5346c1e: nop
  0x00007f15f5346c1f: callq  0x00007f15f5046260  ; OopMap{[72]=Oop off=356}
                                                ;*invokestatic arraycopy
                                                ; - java.util.Arrays::copyOfRange@57 (line 3665)
                                                ;   {static_call}
  0x00007f15f5346c24: mov    0x48(%rsp),%rax
  0x00007f15f5346c29: add    $0x70,%rsp
  0x00007f15f5346c2d: pop    %rbp
  0x00007f15f5346c2e: test   %eax,0x14b894cc(%rip)        # 0x00007f1609ed0100
                                                ;   {poll_return}
  0x00007f15f5346c34: retq                      ;*areturn
                                                ; - java.util.Arrays::copyOfRange@62 (line 3667)

  0x00007f15f5346c35: mov    %ecx,0x44(%rsp)
  0x00007f15f5346c39: nopl   0x0(%rax)
  0x00007f15f5346c40: jmpq   0x00007f15f5346fe3  ;   {no_reloc}
  0x00007f15f5346c45: add    %al,(%rax)
  0x00007f15f5346c47: add    %al,(%rax)
  0x00007f15f5346c49: add    %cl,-0x75(%rcx)
  0x00007f15f5346c4c: rex.RXB (bad) 
  0x00007f15f5346c4e: lea    0x20(%rax),%rdi
  0x00007f15f5346c52: cmp    0x70(%r15),%rdi
  0x00007f15f5346c56: ja     0x00007f15f5346fed
  0x00007f15f5346c5c: mov    %rdi,0x60(%r15)
  0x00007f15f5346c60: mov    0xa8(%rdx),%rcx
  0x00007f15f5346c67: mov    %rcx,(%rax)
  0x00007f15f5346c6a: mov    %rdx,%rcx
  0x00007f15f5346c6d: shr    $0x3,%rcx
  0x00007f15f5346c71: mov    %ecx,0x8(%rax)
  0x00007f15f5346c74: xor    %rcx,%rcx
  0x00007f15f5346c77: mov    %ecx,0xc(%rax)
  0x00007f15f5346c7a: xor    %rcx,%rcx
  0x00007f15f5346c7d: mov    %rcx,0x10(%rax)
  0x00007f15f5346c81: mov    %rcx,0x18(%rax)    ;*new  ; - java.util.Arrays::copyOfRange@8 (line 3663)

  0x00007f15f5346c85: data16 xchg %ax,%ax
  0x00007f15f5346c88: jmpq   0x00007f15f5347009  ;   {no_reloc}
  0x00007f15f5346c8d: add    %al,(%rax)
  0x00007f15f5346c8f: add    %al,(%rax)
  0x00007f15f5346c91: add    %cl,-0x77(%rax)
  0x00007f15f5346c94: rex.R and $0x58,%al
  0x00007f15f5346c97: mov    0x60(%r15),%rax
  0x00007f15f5346c9b: lea    0x18(%rax),%rdi
  0x00007f15f5346c9f: cmp    0x70(%r15),%rdi
  0x00007f15f5346ca3: ja     0x00007f15f5347013
  0x00007f15f5346ca9: mov    %rdi,0x60(%r15)
  0x00007f15f5346cad: mov    0xa8(%rdx),%rcx
  0x00007f15f5346cb4: mov    %rcx,(%rax)
  0x00007f15f5346cb7: mov    %rdx,%rcx
  0x00007f15f5346cba: shr    $0x3,%rcx
  0x00007f15f5346cbe: mov    %ecx,0x8(%rax)
  0x00007f15f5346cc1: xor    %rcx,%rcx
  0x00007f15f5346cc4: mov    %ecx,0xc(%rax)
  0x00007f15f5346cc7: xor    %rcx,%rcx
  0x00007f15f5346cca: mov    %rcx,0x10(%rax)    ;*new  ; - java.util.Arrays::copyOfRange@12 (line 3663)

  0x00007f15f5346cce: mov    %rax,%rsi
  0x00007f15f5346cd1: movabs $0x7f15f0dc9768,%rdi  ;   {metadata(method data for {method} {0x00007f15f0c42fb8} 'copyOfRange' '([CII)[C' in 'java/util/Arrays')}
  0x00007f15f5346cdb: addq   $0x1,0x128(%rdi)
  0x00007f15f5346ce3: mov    %rax,%rsi          ;*invokespecial <init>
                                                ; - java.util.Arrays::copyOfRange@16 (line 3663)

  0x00007f15f5346ce6: mov    %rax,0x50(%rsp)
  0x00007f15f5346ceb: nop
  0x00007f15f5346cec: nop
  0x00007f15f5346ced: nop
  0x00007f15f5346cee: nop
  0x00007f15f5346cef: callq  0x00007f15f5045de0  ; OopMap{[80]=Oop [88]=Oop off=564}
                                                ;*invokespecial <init>
                                                ; - java.util.Arrays::copyOfRange@16 (line 3663)
                                                ;   {optimized virtual_call}
  0x00007f15f5346cf4: mov    0x50(%rsp),%rax
  0x00007f15f5346cf9: movabs $0x7f15f0dc9768,%rdx  ;   {metadata(method data for {method} {0x00007f15f0c42fb8} 'copyOfRange' '([CII)[C' in 'java/util/Arrays')}
  0x00007f15f5346d03: mov    0x8(%rax),%eax
  0x00007f15f5346d06: shl    $0x3,%rax
  0x00007f15f5346d0a: cmp    0x140(%rdx),%rax
  0x00007f15f5346d11: jne    0x00007f15f5346d20
  0x00007f15f5346d13: addq   $0x1,0x148(%rdx)
  0x00007f15f5346d1b: jmpq   0x00007f15f5346d86
  0x00007f15f5346d20: cmp    0x150(%rdx),%rax
  0x00007f15f5346d27: jne    0x00007f15f5346d36
  0x00007f15f5346d29: addq   $0x1,0x158(%rdx)
  0x00007f15f5346d31: jmpq   0x00007f15f5346d86
  0x00007f15f5346d36: cmpq   $0x0,0x140(%rdx)
  0x00007f15f5346d41: jne    0x00007f15f5346d5a
  0x00007f15f5346d43: mov    %rax,0x140(%rdx)
  0x00007f15f5346d4a: movq   $0x1,0x148(%rdx)
  0x00007f15f5346d55: jmpq   0x00007f15f5346d86
  0x00007f15f5346d5a: cmpq   $0x0,0x150(%rdx)
  0x00007f15f5346d65: jne    0x00007f15f5346d7e
  0x00007f15f5346d67: mov    %rax,0x150(%rdx)
  0x00007f15f5346d6e: movq   $0x1,0x158(%rdx)
  0x00007f15f5346d79: jmpq   0x00007f15f5346d86
  0x00007f15f5346d7e: addq   $0x1,0x138(%rdx)
  0x00007f15f5346d86: mov    0x40(%rsp),%edx
  0x00007f15f5346d8a: mov    0x50(%rsp),%rsi    ;*invokevirtual append
                                                ; - java.util.Arrays::copyOfRange@20 (line 3663)

  0x00007f15f5346d8f: callq  0x00007f15f5045de0  ; OopMap{[88]=Oop off=724}
                                                ;*invokevirtual append
                                                ; - java.util.Arrays::copyOfRange@20 (line 3663)
                                                ;   {optimized virtual_call}
  0x00007f15f5346d94: cmp    (%rax),%rax        ; implicit exception: dispatches to 0x00007f15f5347020
  0x00007f15f5346d97: mov    %rax,%rdx
  0x00007f15f5346d9a: movabs $0x7f15f0dc9768,%rsi  ;   {metadata(method data for {method} {0x00007f15f0c42fb8} 'copyOfRange' '([CII)[C' in 'java/util/Arrays')}
  0x00007f15f5346da4: mov    0x8(%rdx),%edx
  0x00007f15f5346da7: shl    $0x3,%rdx
  0x00007f15f5346dab: cmp    0x170(%rsi),%rdx
  0x00007f15f5346db2: jne    0x00007f15f5346dc1
  0x00007f15f5346db4: addq   $0x1,0x178(%rsi)
  0x00007f15f5346dbc: jmpq   0x00007f15f5346e27
  0x00007f15f5346dc1: cmp    0x180(%rsi),%rdx
  0x00007f15f5346dc8: jne    0x00007f15f5346dd7
  0x00007f15f5346dca: addq   $0x1,0x188(%rsi)
  0x00007f15f5346dd2: jmpq   0x00007f15f5346e27
  0x00007f15f5346dd7: cmpq   $0x0,0x170(%rsi)
  0x00007f15f5346de2: jne    0x00007f15f5346dfb
  0x00007f15f5346de4: mov    %rdx,0x170(%rsi)
  0x00007f15f5346deb: movq   $0x1,0x178(%rsi)
  0x00007f15f5346df6: jmpq   0x00007f15f5346e27
  0x00007f15f5346dfb: cmpq   $0x0,0x180(%rsi)
  0x00007f15f5346e06: jne    0x00007f15f5346e1f
  0x00007f15f5346e08: mov    %rdx,0x180(%rsi)
  0x00007f15f5346e0f: movq   $0x1,0x188(%rsi)
  0x00007f15f5346e1a: jmpq   0x00007f15f5346e27
  0x00007f15f5346e1f: addq   $0x1,0x168(%rsi)
  0x00007f15f5346e27: movabs $0x6b510a3f8,%rdx  ;   {oop(" > ")}
  0x00007f15f5346e31: mov    %rax,%rsi          ;*invokevirtual append
                                                ; - java.util.Arrays::copyOfRange@25 (line 3663)

  0x00007f15f5346e34: nop
  0x00007f15f5346e35: nop
  0x00007f15f5346e36: nop
  0x00007f15f5346e37: callq  0x00007f15f5045de0  ; OopMap{[88]=Oop off=892}
                                                ;*invokevirtual append
                                                ; - java.util.Arrays::copyOfRange@25 (line 3663)
                                                ;   {optimized virtual_call}
  0x00007f15f5346e3c: cmp    (%rax),%rax        ; implicit exception: dispatches to 0x00007f15f5347025
  0x00007f15f5346e3f: mov    %rax,%rdx
  0x00007f15f5346e42: movabs $0x7f15f0dc9768,%rsi  ;   {metadata(method data for {method} {0x00007f15f0c42fb8} 'copyOfRange' '([CII)[C' in 'java/util/Arrays')}
  0x00007f15f5346e4c: mov    0x8(%rdx),%edx
  0x00007f15f5346e4f: shl    $0x3,%rdx
  0x00007f15f5346e53: cmp    0x1a0(%rsi),%rdx
  0x00007f15f5346e5a: jne    0x00007f15f5346e69
  0x00007f15f5346e5c: addq   $0x1,0x1a8(%rsi)
  0x00007f15f5346e64: jmpq   0x00007f15f5346ecf
  0x00007f15f5346e69: cmp    0x1b0(%rsi),%rdx
  0x00007f15f5346e70: jne    0x00007f15f5346e7f
  0x00007f15f5346e72: addq   $0x1,0x1b8(%rsi)
  0x00007f15f5346e7a: jmpq   0x00007f15f5346ecf
  0x00007f15f5346e7f: cmpq   $0x0,0x1a0(%rsi)
  0x00007f15f5346e8a: jne    0x00007f15f5346ea3
  0x00007f15f5346e8c: mov    %rdx,0x1a0(%rsi)
  0x00007f15f5346e93: movq   $0x1,0x1a8(%rsi)
  0x00007f15f5346e9e: jmpq   0x00007f15f5346ecf
  0x00007f15f5346ea3: cmpq   $0x0,0x1b0(%rsi)
  0x00007f15f5346eae: jne    0x00007f15f5346ec7
  0x00007f15f5346eb0: mov    %rdx,0x1b0(%rsi)
  0x00007f15f5346eb7: movq   $0x1,0x1b8(%rsi)
  0x00007f15f5346ec2: jmpq   0x00007f15f5346ecf
  0x00007f15f5346ec7: addq   $0x1,0x198(%rsi)
  0x00007f15f5346ecf: mov    0x44(%rsp),%edx
  0x00007f15f5346ed3: mov    %rax,%rsi          ;*invokevirtual append
                                                ; - java.util.Arrays::copyOfRange@29 (line 3663)

  0x00007f15f5346ed6: nop
  0x00007f15f5346ed7: callq  0x00007f15f5045de0  ; OopMap{[88]=Oop off=1052}
                                                ;*invokevirtual append
                                                ; - java.util.Arrays::copyOfRange@29 (line 3663)
                                                ;   {optimized virtual_call}
  0x00007f15f5346edc: cmp    (%rax),%rax        ; implicit exception: dispatches to 0x00007f15f534702a
  0x00007f15f5346edf: mov    %rax,%rsi
  0x00007f15f5346ee2: movabs $0x7f15f0dc9768,%rdi  ;   {metadata(method data for {method} {0x00007f15f0c42fb8} 'copyOfRange' '([CII)[C' in 'java/util/Arrays')}
  0x00007f15f5346eec: mov    0x8(%rsi),%esi
  0x00007f15f5346eef: shl    $0x3,%rsi
  0x00007f15f5346ef3: cmp    0x1d0(%rdi),%rsi
  0x00007f15f5346efa: jne    0x00007f15f5346f09
  0x00007f15f5346efc: addq   $0x1,0x1d8(%rdi)
  0x00007f15f5346f04: jmpq   0x00007f15f5346f6f
  0x00007f15f5346f09: cmp    0x1e0(%rdi),%rsi
  0x00007f15f5346f10: jne    0x00007f15f5346f1f
  0x00007f15f5346f12: addq   $0x1,0x1e8(%rdi)
  0x00007f15f5346f1a: jmpq   0x00007f15f5346f6f
  0x00007f15f5346f1f: cmpq   $0x0,0x1d0(%rdi)
  0x00007f15f5346f2a: jne    0x00007f15f5346f43
  0x00007f15f5346f2c: mov    %rsi,0x1d0(%rdi)
  0x00007f15f5346f33: movq   $0x1,0x1d8(%rdi)
  0x00007f15f5346f3e: jmpq   0x00007f15f5346f6f
  0x00007f15f5346f43: cmpq   $0x0,0x1e0(%rdi)
  0x00007f15f5346f4e: jne    0x00007f15f5346f67
  0x00007f15f5346f50: mov    %rsi,0x1e0(%rdi)
  0x00007f15f5346f57: movq   $0x1,0x1e8(%rdi)
  0x00007f15f5346f62: jmpq   0x00007f15f5346f6f
  0x00007f15f5346f67: addq   $0x1,0x1c8(%rdi)
  0x00007f15f5346f6f: mov    %rax,%rsi          ;*invokevirtual toString
                                                ; - java.util.Arrays::copyOfRange@32 (line 3663)

  0x00007f15f5346f72: nop
  0x00007f15f5346f73: nop
  0x00007f15f5346f74: nop
  0x00007f15f5346f75: nop
  0x00007f15f5346f76: nop
  0x00007f15f5346f77: callq  0x00007f15f5045de0  ; OopMap{[88]=Oop off=1212}
                                                ;*invokevirtual toString
                                                ; - java.util.Arrays::copyOfRange@32 (line 3663)
                                                ;   {optimized virtual_call}
  0x00007f15f5346f7c: mov    0x58(%rsp),%rdx
  0x00007f15f5346f81: movabs $0x7f15f0dc9768,%rsi  ;   {metadata(method data for {method} {0x00007f15f0c42fb8} 'copyOfRange' '([CII)[C' in 'java/util/Arrays')}
  0x00007f15f5346f8b: addq   $0x1,0x1f8(%rsi)
  0x00007f15f5346f93: mov    %rax,%rdx
  0x00007f15f5346f96: mov    0x58(%rsp),%rsi    ;*invokespecial <init>
                                                ; - java.util.Arrays::copyOfRange@35 (line 3663)

  0x00007f15f5346f9b: nop
  0x00007f15f5346f9c: nop
  0x00007f15f5346f9d: nop
  0x00007f15f5346f9e: nop
  0x00007f15f5346f9f: callq  0x00007f15f5045de0  ; OopMap{[88]=Oop off=1252}
                                                ;*invokespecial <init>
                                                ; - java.util.Arrays::copyOfRange@35 (line 3663)
                                                ;   {optimized virtual_call}
  0x00007f15f5346fa4: mov    0x58(%rsp),%rax
  0x00007f15f5346fa9: jmpq   0x00007f15f534705a
  0x00007f15f5346fae: mov    %rbx,0x8(%rsp)
  0x00007f15f5346fb3: movq   $0xffffffffffffffff,(%rsp)
  0x00007f15f5346fbb: callq  0x00007f15f518d220  ; OopMap{rsi=Oop off=1280}
                                                ;*synchronization entry
                                                ; - java.util.Arrays::copyOfRange@-1 (line 3661)
                                                ;   {runtime_call}
  0x00007f15f5346fc0: jmpq   0x00007f15f5346b02
  0x00007f15f5346fc5: callq  0x00007f15f50716a0  ; OopMap{r11=Oop off=1290}
                                                ;*newarray
                                                ; - java.util.Arrays::copyOfRange@40 (line 3664)
                                                ;   {runtime_call}
  0x00007f15f5346fca: jmpq   0x00007f15f5346bc2
  0x00007f15f5346fcf: callq  0x00007f15f5072940  ; OopMap{r11=Oop rax=Oop off=1300}
                                                ;*arraylength
                                                ; - java.util.Arrays::copyOfRange@50 (line 3665)
                                                ;   {runtime_call}
  0x00007f15f5346fd4: movabs $0x0,%rdx          ;   {metadata(NULL)}
  0x00007f15f5346fde: mov    $0xa050f00,%eax
  0x00007f15f5346fe3: callq  0x00007f15f518e1e0  ; OopMap{off=1320}
                                                ;*new  ; - java.util.Arrays::copyOfRange@8 (line 3663)
                                                ;   {runtime_call}
  0x00007f15f5346fe8: jmpq   0x00007f15f5346c40
  0x00007f15f5346fed: mov    %rdx,%rdx
  0x00007f15f5346ff0: callq  0x00007f15f5071fe0  ; OopMap{off=1333}
                                                ;*new  ; - java.util.Arrays::copyOfRange@8 (line 3663)
                                                ;   {runtime_call}
  0x00007f15f5346ff5: jmpq   0x00007f15f5346c85
  0x00007f15f5346ffa: movabs $0x0,%rdx          ;   {metadata(NULL)}
  0x00007f15f5347004: mov    $0xa050f00,%eax
  0x00007f15f5347009: callq  0x00007f15f518e1e0  ; OopMap{rax=Oop off=1358}
                                                ;*new  ; - java.util.Arrays::copyOfRange@12 (line 3663)
                                                ;   {runtime_call}
  0x00007f15f534700e: jmpq   0x00007f15f5346c88
  0x00007f15f5347013: mov    %rdx,%rdx
  0x00007f15f5347016: callq  0x00007f15f5071fe0  ; OopMap{[88]=Oop off=1371}
                                                ;*new  ; - java.util.Arrays::copyOfRange@12 (line 3663)
                                                ;   {runtime_call}
  0x00007f15f534701b: jmpq   0x00007f15f5346cce
  0x00007f15f5347020: callq  0x00007f15f5072940  ; OopMap{[88]=Oop rax=Oop off=1381}
                                                ;*invokevirtual append
                                                ; - java.util.Arrays::copyOfRange@25 (line 3663)
                                                ;   {runtime_call}
  0x00007f15f5347025: callq  0x00007f15f5072940  ; OopMap{[88]=Oop rax=Oop off=1386}
                                                ;*invokevirtual append
                                                ; - java.util.Arrays::copyOfRange@29 (line 3663)
                                                ;   {runtime_call}
  0x00007f15f534702a: callq  0x00007f15f5072940  ; OopMap{[88]=Oop rax=Oop off=1391}
                                                ;*invokevirtual toString
                                                ; - java.util.Arrays::copyOfRange@32 (line 3663)
                                                ;   {runtime_call}
  0x00007f15f534702f: nop
  0x00007f15f5347030: nop
  0x00007f15f5347031: mov    0x300(%r15),%rax
  0x00007f15f5347038: movabs $0x0,%r10
  0x00007f15f5347042: mov    %r10,0x300(%r15)
  0x00007f15f5347049: movabs $0x0,%r10
  0x00007f15f5347053: mov    %r10,0x308(%r15)
  0x00007f15f534705a: add    $0x70,%rsp
  0x00007f15f534705e: pop    %rbp
  0x00007f15f534705f: jmpq   0x00007f15f506ff20  ;   {runtime_call}
  0x00007f15f5347064: hlt    
  0x00007f15f5347065: hlt    
  0x00007f15f5347066: hlt    
  0x00007f15f5347067: hlt    
  0x00007f15f5347068: hlt    
  0x00007f15f5347069: hlt    
  0x00007f15f534706a: hlt    
  0x00007f15f534706b: hlt    
  0x00007f15f534706c: hlt    
  0x00007f15f534706d: hlt    
  0x00007f15f534706e: hlt    
  0x00007f15f534706f: hlt    
  0x00007f15f5347070: hlt    
  0x00007f15f5347071: hlt    
  0x00007f15f5347072: hlt    
  0x00007f15f5347073: hlt    
  0x00007f15f5347074: hlt    
  0x00007f15f5347075: hlt    
  0x00007f15f5347076: hlt    
  0x00007f15f5347077: hlt    
  0x00007f15f5347078: hlt    
  0x00007f15f5347079: hlt    
  0x00007f15f534707a: hlt    
  0x00007f15f534707b: hlt    
  0x00007f15f534707c: hlt    
  0x00007f15f534707d: hlt    
  0x00007f15f534707e: hlt    
  0x00007f15f534707f: hlt    
[Stub Code]
  0x00007f15f5347080: nop                       ;   {no_reloc}
  0x00007f15f5347081: nop
  0x00007f15f5347082: nop
  0x00007f15f5347083: nop
  0x00007f15f5347084: nop
  0x00007f15f5347085: movabs $0x0,%rbx          ;   {static_stub}
  0x00007f15f534708f: jmpq   0x00007f15f534708f  ;   {runtime_call}
  0x00007f15f5347094: nop
  0x00007f15f5347095: movabs $0x0,%rbx          ;   {static_stub}
  0x00007f15f534709f: jmpq   0x00007f15f534709f  ;   {runtime_call}
  0x00007f15f53470a4: nop
  0x00007f15f53470a5: movabs $0x0,%rbx          ;   {static_stub}
  0x00007f15f53470af: jmpq   0x00007f15f53470af  ;   {runtime_call}
  0x00007f15f53470b4: nop
  0x00007f15f53470b5: movabs $0x0,%rbx          ;   {static_stub}
  0x00007f15f53470bf: jmpq   0x00007f15f53470bf  ;   {runtime_call}
  0x00007f15f53470c4: nop
  0x00007f15f53470c5: movabs $0x0,%rbx          ;   {static_stub}
  0x00007f15f53470cf: jmpq   0x00007f15f53470cf  ;   {runtime_call}
  0x00007f15f53470d4: nop
  0x00007f15f53470d5: movabs $0x0,%rbx          ;   {static_stub}
  0x00007f15f53470df: jmpq   0x00007f15f53470df  ;   {runtime_call}
  0x00007f15f53470e4: nop
  0x00007f15f53470e5: movabs $0x0,%rbx          ;   {static_stub}
  0x00007f15f53470ef: jmpq   0x00007f15f53470ef  ;   {runtime_call}
  0x00007f15f53470f4: nop
  0x00007f15f53470f5: movabs $0x0,%rbx          ;   {static_stub}
  0x00007f15f53470ff: jmpq   0x00007f15f53470ff  ;   {runtime_call}
[Exception Handler]
  0x00007f15f5347104: callq  0x00007f15f50709e0  ;   {runtime_call}
  0x00007f15f5347109: mov    %rsp,-0x28(%rsp)
  0x00007f15f534710e: sub    $0x80,%rsp
  0x00007f15f5347115: mov    %rax,0x78(%rsp)
  0x00007f15f534711a: mov    %rcx,0x70(%rsp)
  0x00007f15f534711f: mov    %rdx,0x68(%rsp)
  0x00007f15f5347124: mov    %rbx,0x60(%rsp)
  0x00007f15f5347129: mov    %rbp,0x50(%rsp)
  0x00007f15f534712e: mov    %rsi,0x48(%rsp)
  0x00007f15f5347133: mov    %rdi,0x40(%rsp)
  0x00007f15f5347138: mov    %r8,0x38(%rsp)
  0x00007f15f534713d: mov    %r9,0x30(%rsp)
  0x00007f15f5347142: mov    %r10,0x28(%rsp)
  0x00007f15f5347147: mov    %r11,0x20(%rsp)
  0x00007f15f534714c: mov    %r12,0x18(%rsp)
  0x00007f15f5347151: mov    %r13,0x10(%rsp)
  0x00007f15f5347156: mov    %r14,0x8(%rsp)
  0x00007f15f534715b: mov    %r15,(%rsp)
  0x00007f15f534715f: movabs $0x7f16099be49e,%rdi  ;   {external_word}
  0x00007f15f5347169: movabs $0x7f15f5347109,%rsi  ;   {internal_word}
  0x00007f15f5347173: mov    %rsp,%rdx
  0x00007f15f5347176: and    $0xfffffffffffffff0,%rsp
  0x00007f15f534717a: callq  0x00007f16096e4460  ;   {runtime_call}
  0x00007f15f534717f: hlt    
[Deopt Handler Code]
  0x00007f15f5347180: movabs $0x7f15f5347180,%r10  ;   {section_word}
  0x00007f15f534718a: push   %r10
  0x00007f15f534718c: jmpq   0x00007f15f5046e40  ;   {runtime_call}
  0x00007f15f5347191: hlt    
  0x00007f15f5347192: hlt    
  0x00007f15f5347193: hlt    
  0x00007f15f5347194: hlt    
  0x00007f15f5347195: hlt    
  0x00007f15f5347196: hlt    
  0x00007f15f5347197: hlt    
Decoding compiled method 0x00007f15f5347550:
Code:
[Entry Point]
[Constants]
  # {method} {0x00007f15f0c2cda8} 'getMap' '(Ljava/lang/Thread;)Ljava/lang/ThreadLocal$ThreadLocalMap;' in 'java/lang/ThreadLocal'
  # this:     rsi:rsi   = 'java/lang/ThreadLocal'
  # parm0:    rdx:rdx   = 'java/lang/Thread'
  #           [sp+0x40]  (sp of caller)
  0x00007f15f53476c0: mov    0x8(%rsi),%r10d
  0x00007f15f53476c4: shl    $0x3,%r10
  0x00007f15f53476c8: cmp    %rax,%r10
  0x00007f15f53476cb: jne    0x00007f15f5045ba0  ;   {runtime_call}
  0x00007f15f53476d1: nopl   0x0(%rax,%rax,1)
  0x00007f15f53476d9: nopl   0x0(%rax)
[Verified Entry Point]
  0x00007f15f53476e0: mov    %eax,-0x14000(%rsp)
  0x00007f15f53476e7: push   %rbp
  0x00007f15f53476e8: sub    $0x30,%rsp
  0x00007f15f53476ec: movabs $0x7f15f0dd02c0,%rax  ;   {metadata(method data for {method} {0x00007f15f0c2cda8} 'getMap' '(Ljava/lang/Thread;)Ljava/lang/ThreadLocal$ThreadLocalMap;' in 'java/lang/ThreadLocal')}
  0x00007f15f53476f6: mov    0xdc(%rax),%edi
  0x00007f15f53476fc: add    $0x8,%edi
  0x00007f15f53476ff: mov    %edi,0xdc(%rax)
  0x00007f15f5347705: movabs $0x7f15f0c2cda8,%rax  ;   {metadata({method} {0x00007f15f0c2cda8} 'getMap' '(Ljava/lang/Thread;)Ljava/lang/ThreadLocal$ThreadLocalMap;' in 'java/lang/ThreadLocal')}
  0x00007f15f534770f: and    $0x1ff8,%edi
  0x00007f15f5347715: cmp    $0x0,%edi
  0x00007f15f5347718: je     0x00007f15f5347731  ;*aload_1
                                                ; - java.lang.ThreadLocal::getMap@0 (line 233)

  0x00007f15f534771e: mov    0x50(%rdx),%eax    ; implicit exception: dispatches to 0x00007f15f5347745
  0x00007f15f5347721: shl    $0x3,%rax          ;*getfield threadLocals
                                                ; - java.lang.ThreadLocal::getMap@1 (line 233)

  0x00007f15f5347725: add    $0x30,%rsp
  0x00007f15f5347729: pop    %rbp
  0x00007f15f534772a: test   %eax,0x14b889d0(%rip)        # 0x00007f1609ed0100
                                                ;   {poll_return}
  0x00007f15f5347730: retq   
  0x00007f15f5347731: mov    %rax,0x8(%rsp)
  0x00007f15f5347736: movq   $0xffffffffffffffff,(%rsp)
  0x00007f15f534773e: callq  0x00007f15f518d220  ; OopMap{rsi=Oop rdx=Oop off=131}
                                                ;*synchronization entry
                                                ; - java.lang.ThreadLocal::getMap@-1 (line 233)
                                                ;   {runtime_call}
  0x00007f15f5347743: jmp    0x00007f15f534771e
  0x00007f15f5347745: callq  0x00007f15f5072940  ; OopMap{off=138}
                                                ;*getfield threadLocals
                                                ; - java.lang.ThreadLocal::getMap@1 (line 233)
                                                ;   {runtime_call}
  0x00007f15f534774a: nop
  0x00007f15f534774b: nop
  0x00007f15f534774c: mov    0x300(%r15),%rax
  0x00007f15f5347753: movabs $0x0,%r10
  0x00007f15f534775d: mov    %r10,0x300(%r15)
  0x00007f15f5347764: movabs $0x0,%r10
  0x00007f15f534776e: mov    %r10,0x308(%r15)
  0x00007f15f5347775: add    $0x30,%rsp
  0x00007f15f5347779: pop    %rbp
  0x00007f15f534777a: jmpq   0x00007f15f506ff20  ;   {runtime_call}
  0x00007f15f534777f: hlt    
[Exception Handler]
[Stub Code]
  0x00007f15f5347780: callq  0x00007f15f50709e0  ;   {no_reloc}
  0x00007f15f5347785: mov    %rsp,-0x28(%rsp)
  0x00007f15f534778a: sub    $0x80,%rsp
  0x00007f15f5347791: mov    %rax,0x78(%rsp)
  0x00007f15f5347796: mov    %rcx,0x70(%rsp)
  0x00007f15f534779b: mov    %rdx,0x68(%rsp)
  0x00007f15f53477a0: mov    %rbx,0x60(%rsp)
  0x00007f15f53477a5: mov    %rbp,0x50(%rsp)
  0x00007f15f53477aa: mov    %rsi,0x48(%rsp)
  0x00007f15f53477af: mov    %rdi,0x40(%rsp)
  0x00007f15f53477b4: mov    %r8,0x38(%rsp)
  0x00007f15f53477b9: mov    %r9,0x30(%rsp)
  0x00007f15f53477be: mov    %r10,0x28(%rsp)
  0x00007f15f53477c3: mov    %r11,0x20(%rsp)
  0x00007f15f53477c8: mov    %r12,0x18(%rsp)
  0x00007f15f53477cd: mov    %r13,0x10(%rsp)
  0x00007f15f53477d2: mov    %r14,0x8(%rsp)
  0x00007f15f53477d7: mov    %r15,(%rsp)
  0x00007f15f53477db: movabs $0x7f16099be49e,%rdi  ;   {external_word}
  0x00007f15f53477e5: movabs $0x7f15f5347785,%rsi  ;   {internal_word}
  0x00007f15f53477ef: mov    %rsp,%rdx
  0x00007f15f53477f2: and    $0xfffffffffffffff0,%rsp
  0x00007f15f53477f6: callq  0x00007f16096e4460  ;   {runtime_call}
  0x00007f15f53477fb: hlt    
[Deopt Handler Code]
  0x00007f15f53477fc: movabs $0x7f15f53477fc,%r10  ;   {section_word}
  0x00007f15f5347806: push   %r10
  0x00007f15f5347808: jmpq   0x00007f15f5046e40  ;   {runtime_call}
  0x00007f15f534780d: hlt    
  0x00007f15f534780e: hlt    
  0x00007f15f534780f: hlt    
Decoding compiled method 0x00007f15f533aa90:
Code:
[Entry Point]
[Verified Entry Point]
[Constants]
  # {method} {0x00007f15f0c2d010} 'access$400' '(Ljava/lang/ThreadLocal;)I' in 'java/lang/ThreadLocal'
  # parm0:    rsi:rsi   = 'java/lang/ThreadLocal'
  #           [sp+0x40]  (sp of caller)
  0x00007f15f533abe0: mov    %eax,-0x14000(%rsp)
  0x00007f15f533abe7: push   %rbp
  0x00007f15f533abe8: sub    $0x30,%rsp         ;*aload_0
                                                ; - java.lang.ThreadLocal::access$400@0 (line 74)

  0x00007f15f533abec: mov    0xc(%rsi),%eax     ;*getfield threadLocalHashCode
                                                ; - java.lang.ThreadLocal::access$400@1 (line 74)
                                                ; implicit exception: dispatches to 0x00007f15f533abfb
  0x00007f15f533abef: add    $0x30,%rsp
  0x00007f15f533abf3: pop    %rbp
  0x00007f15f533abf4: test   %eax,0x14b95506(%rip)        # 0x00007f1609ed0100
                                                ;   {poll_return}
  0x00007f15f533abfa: retq   
  0x00007f15f533abfb: callq  0x00007f15f5072940  ; OopMap{off=32}
                                                ;*getfield threadLocalHashCode
                                                ; - java.lang.ThreadLocal::access$400@1 (line 74)
                                                ;   {runtime_call}
  0x00007f15f533ac00: nop
  0x00007f15f533ac01: nop
  0x00007f15f533ac02: mov    0x300(%r15),%rax
  0x00007f15f533ac09: movabs $0x0,%r10
  0x00007f15f533ac13: mov    %r10,0x300(%r15)
  0x00007f15f533ac1a: movabs $0x0,%r10
  0x00007f15f533ac24: mov    %r10,0x308(%r15)
  0x00007f15f533ac2b: add    $0x30,%rsp
  0x00007f15f533ac2f: pop    %rbp
  0x00007f15f533ac30: jmpq   0x00007f15f506ff20  ;   {runtime_call}
  0x00007f15f533ac35: hlt    
  0x00007f15f533ac36: hlt    
  0x00007f15f533ac37: hlt    
  0x00007f15f533ac38: hlt    
  0x00007f15f533ac39: hlt    
  0x00007f15f533ac3a: hlt    
  0x00007f15f533ac3b: hlt    
  0x00007f15f533ac3c: hlt    
  0x00007f15f533ac3d: hlt    
  0x00007f15f533ac3e: hlt    
  0x00007f15f533ac3f: hlt    
[Exception Handler]
[Stub Code]
  0x00007f15f533ac40: callq  0x00007f15f50709e0  ;   {no_reloc}
  0x00007f15f533ac45: mov    %rsp,-0x28(%rsp)
  0x00007f15f533ac4a: sub    $0x80,%rsp
  0x00007f15f533ac51: mov    %rax,0x78(%rsp)
  0x00007f15f533ac56: mov    %rcx,0x70(%rsp)
  0x00007f15f533ac5b: mov    %rdx,0x68(%rsp)
  0x00007f15f533ac60: mov    %rbx,0x60(%rsp)
  0x00007f15f533ac65: mov    %rbp,0x50(%rsp)
  0x00007f15f533ac6a: mov    %rsi,0x48(%rsp)
  0x00007f15f533ac6f: mov    %rdi,0x40(%rsp)
  0x00007f15f533ac74: mov    %r8,0x38(%rsp)
  0x00007f15f533ac79: mov    %r9,0x30(%rsp)
  0x00007f15f533ac7e: mov    %r10,0x28(%rsp)
  0x00007f15f533ac83: mov    %r11,0x20(%rsp)
  0x00007f15f533ac88: mov    %r12,0x18(%rsp)
  0x00007f15f533ac8d: mov    %r13,0x10(%rsp)
  0x00007f15f533ac92: mov    %r14,0x8(%rsp)
  0x00007f15f533ac97: mov    %r15,(%rsp)
  0x00007f15f533ac9b: movabs $0x7f16099be49e,%rdi  ;   {external_word}
  0x00007f15f533aca5: movabs $0x7f15f533ac45,%rsi  ;   {internal_word}
  0x00007f15f533acaf: mov    %rsp,%rdx
  0x00007f15f533acb2: and    $0xfffffffffffffff0,%rsp
  0x00007f15f533acb6: callq  0x00007f16096e4460  ;   {runtime_call}
  0x00007f15f533acbb: hlt    
[Deopt Handler Code]
  0x00007f15f533acbc: movabs $0x7f15f533acbc,%r10  ;   {section_word}
  0x00007f15f533acc6: push   %r10
  0x00007f15f533acc8: jmpq   0x00007f15f5046e40  ;   {runtime_call}
  0x00007f15f533accd: hlt    
  0x00007f15f533acce: hlt    
  0x00007f15f533accf: hlt    
Decoding compiled method 0x00007f15f53478d0:
Code:
[Entry Point]
[Verified Entry Point]
[Constants]
  # {method} {0x00007f15f0f29be8} 'increase' '(I)V' in 'com/chenluo/jvm/learn/TestVolatile'
  # parm0:    rsi       = int
  #           [sp+0x40]  (sp of caller)
  0x00007f15f5347a20: mov    %eax,-0x14000(%rsp)
  0x00007f15f5347a27: push   %rbp
  0x00007f15f5347a28: sub    $0x30,%rsp
  0x00007f15f5347a2c: movabs $0x7f15f0f29d70,%rdi  ;   {metadata(method data for {method} {0x00007f15f0f29be8} 'increase' '(I)V' in 'com/chenluo/jvm/learn/TestVolatile')}
  0x00007f15f5347a36: mov    0xdc(%rdi),%ebx
  0x00007f15f5347a3c: add    $0x8,%ebx
  0x00007f15f5347a3f: mov    %ebx,0xdc(%rdi)
  0x00007f15f5347a45: movabs $0x7f15f0f29be8,%rdi  ;   {metadata({method} {0x00007f15f0f29be8} 'increase' '(I)V' in 'com/chenluo/jvm/learn/TestVolatile')}
  0x00007f15f5347a4f: and    $0x1ff8,%ebx
  0x00007f15f5347a55: cmp    $0x0,%ebx
  0x00007f15f5347a58: je     0x00007f15f5347aa2  ;*iload_0
                                                ; - com.chenluo.jvm.learn.TestVolatile::increase@0 (line 27)

  0x00007f15f5347a5e: movabs $0x6b4a39410,%rdi  ;   {oop(a 'java/lang/Class' = 'com/chenluo/jvm/learn/TestVolatile')}
  0x00007f15f5347a68: mov    %rsi,%rbx
  0x00007f15f5347a6b: inc    %ebx
  0x00007f15f5347a6d: mov    %ebx,0x68(%rdi)    ;*putstatic int1
                                                ; - com.chenluo.jvm.learn.TestVolatile::increase@3 (line 27)

  0x00007f15f5347a70: mov    %rsi,%rbx
  0x00007f15f5347a73: add    $0x2,%ebx
  0x00007f15f5347a76: mov    %ebx,0x6c(%rdi)    ;*putstatic int2
                                                ; - com.chenluo.jvm.learn.TestVolatile::increase@9 (line 28)

  0x00007f15f5347a79: mov    %rsi,%rbx
  0x00007f15f5347a7c: add    $0x3,%ebx
  0x00007f15f5347a7f: mov    %ebx,0x70(%rdi)
  0x00007f15f5347a82: lock addl $0x0,(%rsp)     ;*putstatic int3
                                                ; - com.chenluo.jvm.learn.TestVolatile::increase@15 (line 29)

  0x00007f15f5347a87: mov    %rsi,%rbx
  0x00007f15f5347a8a: add    $0x4,%ebx
  0x00007f15f5347a8d: mov    %ebx,0x74(%rdi)    ;*putstatic int4
                                                ; - com.chenluo.jvm.learn.TestVolatile::increase@21 (line 30)

  0x00007f15f5347a90: add    $0x5,%esi
  0x00007f15f5347a93: mov    %esi,0x78(%rdi)    ;*putstatic int5
                                                ; - com.chenluo.jvm.learn.TestVolatile::increase@27 (line 31)

  0x00007f15f5347a96: add    $0x30,%rsp
  0x00007f15f5347a9a: pop    %rbp
  0x00007f15f5347a9b: test   %eax,0x14b8865f(%rip)        # 0x00007f1609ed0100
                                                ;   {poll_return}
  0x00007f15f5347aa1: retq   
  0x00007f15f5347aa2: mov    %rdi,0x8(%rsp)
  0x00007f15f5347aa7: movq   $0xffffffffffffffff,(%rsp)
  0x00007f15f5347aaf: callq  0x00007f15f518d220  ; OopMap{off=148}
                                                ;*synchronization entry
                                                ; - com.chenluo.jvm.learn.TestVolatile::increase@-1 (line 27)
                                                ;   {runtime_call}
  0x00007f15f5347ab4: jmp    0x00007f15f5347a5e
  0x00007f15f5347ab6: nop
  0x00007f15f5347ab7: nop
  0x00007f15f5347ab8: mov    0x300(%r15),%rax
  0x00007f15f5347abf: movabs $0x0,%r10
  0x00007f15f5347ac9: mov    %r10,0x300(%r15)
  0x00007f15f5347ad0: movabs $0x0,%r10
  0x00007f15f5347ada: mov    %r10,0x308(%r15)
  0x00007f15f5347ae1: add    $0x30,%rsp
  0x00007f15f5347ae5: pop    %rbp
  0x00007f15f5347ae6: jmpq   0x00007f15f506ff20  ;   {runtime_call}
  0x00007f15f5347aeb: hlt    
  0x00007f15f5347aec: hlt    
  0x00007f15f5347aed: hlt    
  0x00007f15f5347aee: hlt    
  0x00007f15f5347aef: hlt    
  0x00007f15f5347af0: hlt    
  0x00007f15f5347af1: hlt    
  0x00007f15f5347af2: hlt    
  0x00007f15f5347af3: hlt    
  0x00007f15f5347af4: hlt    
  0x00007f15f5347af5: hlt    
  0x00007f15f5347af6: hlt    
  0x00007f15f5347af7: hlt    
  0x00007f15f5347af8: hlt    
  0x00007f15f5347af9: hlt    
  0x00007f15f5347afa: hlt    
  0x00007f15f5347afb: hlt    
  0x00007f15f5347afc: hlt    
  0x00007f15f5347afd: hlt    
  0x00007f15f5347afe: hlt    
  0x00007f15f5347aff: hlt    
[Exception Handler]
[Stub Code]
  0x00007f15f5347b00: callq  0x00007f15f50709e0  ;   {no_reloc}
  0x00007f15f5347b05: mov    %rsp,-0x28(%rsp)
  0x00007f15f5347b0a: sub    $0x80,%rsp
  0x00007f15f5347b11: mov    %rax,0x78(%rsp)
  0x00007f15f5347b16: mov    %rcx,0x70(%rsp)
  0x00007f15f5347b1b: mov    %rdx,0x68(%rsp)
  0x00007f15f5347b20: mov    %rbx,0x60(%rsp)
  0x00007f15f5347b25: mov    %rbp,0x50(%rsp)
  0x00007f15f5347b2a: mov    %rsi,0x48(%rsp)
  0x00007f15f5347b2f: mov    %rdi,0x40(%rsp)
  0x00007f15f5347b34: mov    %r8,0x38(%rsp)
  0x00007f15f5347b39: mov    %r9,0x30(%rsp)
  0x00007f15f5347b3e: mov    %r10,0x28(%rsp)
  0x00007f15f5347b43: mov    %r11,0x20(%rsp)
  0x00007f15f5347b48: mov    %r12,0x18(%rsp)
  0x00007f15f5347b4d: mov    %r13,0x10(%rsp)
  0x00007f15f5347b52: mov    %r14,0x8(%rsp)
  0x00007f15f5347b57: mov    %r15,(%rsp)
  0x00007f15f5347b5b: movabs $0x7f16099be49e,%rdi  ;   {external_word}
  0x00007f15f5347b65: movabs $0x7f15f5347b05,%rsi  ;   {internal_word}
  0x00007f15f5347b6f: mov    %rsp,%rdx
  0x00007f15f5347b72: and    $0xfffffffffffffff0,%rsp
  0x00007f15f5347b76: callq  0x00007f16096e4460  ;   {runtime_call}
  0x00007f15f5347b7b: hlt    
[Deopt Handler Code]
  0x00007f15f5347b7c: movabs $0x7f15f5347b7c,%r10  ;   {section_word}
  0x00007f15f5347b86: push   %r10
  0x00007f15f5347b88: jmpq   0x00007f15f5046e40  ;   {runtime_call}
  0x00007f15f5347b8d: hlt    
  0x00007f15f5347b8e: hlt    
  0x00007f15f5347b8f: hlt    
Decoding compiled method 0x00007f15f534a910:
Code:
[Entry Point]
[Verified Entry Point]
[Constants]
  # {method} {0x00007f15f0f29be8} 'increase' '(I)V' in 'com/chenluo/jvm/learn/TestVolatile'
  # parm0:    rsi       = int
  #           [sp+0x20]  (sp of caller)
  0x00007f15f534aa60: sub    $0x18,%rsp
  0x00007f15f534aa67: mov    %rbp,0x10(%rsp)    ;*synchronization entry
                                                ; - com.chenluo.jvm.learn.TestVolatile::increase@-1 (line 27)

  0x00007f15f534aa6c: mov    %esi,%r11d
  0x00007f15f534aa6f: inc    %r11d
  0x00007f15f534aa72: mov    %esi,%r8d
  0x00007f15f534aa75: add    $0x2,%r8d
  0x00007f15f534aa79: mov    %esi,%r9d
  0x00007f15f534aa7c: add    $0x5,%r9d
  0x00007f15f534aa80: mov    %esi,%ecx
  0x00007f15f534aa82: add    $0x4,%ecx
  0x00007f15f534aa85: add    $0x3,%esi
  0x00007f15f534aa88: movabs $0x6b4a39410,%r10  ;   {oop(a 'java/lang/Class' = 'com/chenluo/jvm/learn/TestVolatile')}
  0x00007f15f534aa92: mov    %r11d,0x68(%r10)   ;*putstatic int1
                                                ; - com.chenluo.jvm.learn.TestVolatile::increase@3 (line 27)

  0x00007f15f534aa96: mov    %r8d,0x6c(%r10)
  0x00007f15f534aa9a: mov    %esi,0x70(%r10)
  0x00007f15f534aa9e: lock addl $0x0,(%rsp)     ;*putstatic int3
                                                ; - com.chenluo.jvm.learn.TestVolatile::increase@15 (line 29)

  0x00007f15f534aaa3: mov    %ecx,0x74(%r10)    ;*putstatic int4
                                                ; - com.chenluo.jvm.learn.TestVolatile::increase@21 (line 30)

  0x00007f15f534aaa7: mov    %r9d,0x78(%r10)    ;*synchronization entry
                                                ; - com.chenluo.jvm.learn.TestVolatile::increase@-1 (line 27)

  0x00007f15f534aaab: add    $0x10,%rsp
  0x00007f15f534aaaf: pop    %rbp
  0x00007f15f534aab0: test   %eax,0x14b8554a(%rip)        # 0x00007f1609ed0000
                                                ;   {poll_return}
  0x00007f15f534aab6: retq   
  0x00007f15f534aab7: hlt    
  0x00007f15f534aab8: hlt    
  0x00007f15f534aab9: hlt    
  0x00007f15f534aaba: hlt    
  0x00007f15f534aabb: hlt    
  0x00007f15f534aabc: hlt    
  0x00007f15f534aabd: hlt    
  0x00007f15f534aabe: hlt    
  0x00007f15f534aabf: hlt    
[Exception Handler]
[Stub Code]
  0x00007f15f534aac0: jmpq   0x00007f15f5070720  ;   {no_reloc}
[Deopt Handler Code]
  0x00007f15f534aac5: callq  0x00007f15f534aaca
  0x00007f15f534aaca: subq   $0x5,(%rsp)
  0x00007f15f534aacf: jmpq   0x00007f15f5046e40  ;   {runtime_call}
  0x00007f15f534aad4: hlt    
  0x00007f15f534aad5: hlt    
  0x00007f15f534aad6: hlt    
  0x00007f15f534aad7: hlt    
