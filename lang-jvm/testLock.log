OpenJDK 64-Bit Server VM warning: PrintAssembly is enabled; turning on DebugNonSafepoints to gain additional output
Loaded disassembler from hsdis-amd64.so
Decoding compiled method 0x00007f779d070310:
Code:
[Disassembling for mach='i386:x86-64']
[Entry Point]
  # {method} {0x00007f7783819898} 'arraycopy' '(Ljava/lang/Object;ILjava/lang/Object;II)V' in 'java/lang/System'
  # parm0:    rsi:rsi   = 'java/lang/Object'
  # parm1:    rdx       = int
  # parm2:    rcx:rcx   = 'java/lang/Object'
  # parm3:    r8        = int
  # parm4:    r9        = int
  #           [sp+0x60]  (sp of caller)
  0x00007f779d070480: mov    0x8(%rsi),%r10d
  0x00007f779d070484: shl    $0x3,%r10
  0x00007f779d070488: cmp    %r10,%rax
  0x00007f779d07048b: je     0x00007f779d070498
  0x00007f779d070491: jmpq   0x00007f779d045ba0  ;   {runtime_call}
  0x00007f779d070496: xchg   %ax,%ax
[Verified Entry Point]
  0x00007f779d070498: mov    %eax,-0x14000(%rsp)
  0x00007f779d07049f: push   %rbp
  0x00007f779d0704a0: mov    %rsp,%rbp
  0x00007f779d0704a3: sub    $0x50,%rsp
  0x00007f779d0704a7: mov    %r9,(%rsp)
  0x00007f779d0704ab: mov    %r8,%r9
  0x00007f779d0704ae: mov    %rcx,0x18(%rsp)
  0x00007f779d0704b3: cmp    $0x0,%rcx
  0x00007f779d0704b7: lea    0x18(%rsp),%r8
  0x00007f779d0704bc: cmove  0x18(%rsp),%r8
  0x00007f779d0704c2: mov    %rdx,%rcx
  0x00007f779d0704c5: mov    %rsi,0x8(%rsp)
  0x00007f779d0704ca: cmp    $0x0,%rsi
  0x00007f779d0704ce: lea    0x8(%rsp),%rdx
  0x00007f779d0704d3: cmove  0x8(%rsp),%rdx
  0x00007f779d0704d9: movabs $0x6b4900c78,%r14  ;   {oop(a 'java/lang/Class' = 'java/lang/System')}
  0x00007f779d0704e3: mov    %r14,0x38(%rsp)
  0x00007f779d0704e8: lea    0x38(%rsp),%r14
  0x00007f779d0704ed: mov    %r14,%rsi          ; OopMap{[24]=Oop [8]=Oop [56]=Oop off=112}
  0x00007f779d0704f0: movabs $0x7f779d0704f0,%r10  ;   {section_word}
  0x00007f779d0704fa: mov    %r10,0x238(%r15)
  0x00007f779d070501: mov    %rsp,0x230(%r15)
  0x00007f779d070508: cmpb   $0x0,0x1595777d(%rip)        # 0x00007f77b29c7c8c
                                                ;   {external_word}
  0x00007f779d07050f: je     0x00007f779d070553
  0x00007f779d070515: push   %rsi
  0x00007f779d070516: push   %rdx
  0x00007f779d070517: push   %rcx
  0x00007f779d070518: push   %r8
  0x00007f779d07051a: push   %r9
  0x00007f779d07051c: movabs $0x7f7783819898,%rsi  ;   {metadata({method} {0x00007f7783819898} 'arraycopy' '(Ljava/lang/Object;ILjava/lang/Object;II)V' in 'java/lang/System')}
  0x00007f779d070526: mov    %r15,%rdi
  0x00007f779d070529: test   $0xf,%esp
  0x00007f779d07052f: je     0x00007f779d070547
  0x00007f779d070535: sub    $0x8,%rsp
  0x00007f779d070539: callq  0x00007f77b26190d0  ;   {runtime_call}
  0x00007f779d07053e: add    $0x8,%rsp
  0x00007f779d070542: jmpq   0x00007f779d07054c
  0x00007f779d070547: callq  0x00007f77b26190d0  ;   {runtime_call}
  0x00007f779d07054c: pop    %r9
  0x00007f779d07054e: pop    %r8
  0x00007f779d070550: pop    %rcx
  0x00007f779d070551: pop    %rdx
  0x00007f779d070552: pop    %rsi
  0x00007f779d070553: lea    0x250(%r15),%rdi
  0x00007f779d07055a: movl   $0x4,0x2c8(%r15)
  0x00007f779d070565: callq  0x00007f77b2338220  ;   {runtime_call}
  0x00007f779d07056a: vzeroupper 
  0x00007f779d07056d: movl   $0x5,0x2c8(%r15)
  0x00007f779d070578: mov    %r15d,%ecx
  0x00007f779d07057b: shr    $0x4,%ecx
  0x00007f779d07057e: and    $0xffc,%ecx
  0x00007f779d070584: movabs $0x7f77b2c33000,%r10  ;   {external_word}
  0x00007f779d07058e: mov    %ecx,(%r10,%rcx,1)
  0x00007f779d070592: cmpl   $0x0,0x15964af0(%rip)        # 0x00007f77b29d508c
                                                ;   {external_word}
  0x00007f779d07059c: jne    0x00007f779d0705b0
  0x00007f779d0705a2: cmpl   $0x0,0x30(%r15)
  0x00007f779d0705aa: je     0x00007f779d0705c9
  0x00007f779d0705b0: mov    %r15,%rdi
  0x00007f779d0705b3: mov    %rsp,%r12
  0x00007f779d0705b6: sub    $0x0,%rsp
  0x00007f779d0705ba: and    $0xfffffffffffffff0,%rsp
  0x00007f779d0705be: callq  0x00007f77b26c2e60  ;   {runtime_call}
  0x00007f779d0705c3: mov    %r12,%rsp
  0x00007f779d0705c6: xor    %r12,%r12
  0x00007f779d0705c9: movl   $0x8,0x2c8(%r15)
  0x00007f779d0705d4: cmpl   $0x1,0x2f4(%r15)
  0x00007f779d0705df: je     0x00007f779d070667
  0x00007f779d0705e5: cmpb   $0x0,0x159576a0(%rip)        # 0x00007f77b29c7c8c
                                                ;   {external_word}
  0x00007f779d0705ec: je     0x00007f779d070622
  0x00007f779d0705f2: movabs $0x7f7783819898,%rsi  ;   {metadata({method} {0x00007f7783819898} 'arraycopy' '(Ljava/lang/Object;ILjava/lang/Object;II)V' in 'java/lang/System')}
  0x00007f779d0705fc: mov    %r15,%rdi
  0x00007f779d0705ff: test   $0xf,%esp
  0x00007f779d070605: je     0x00007f779d07061d
  0x00007f779d07060b: sub    $0x8,%rsp
  0x00007f779d07060f: callq  0x00007f77b2619180  ;   {runtime_call}
  0x00007f779d070614: add    $0x8,%rsp
  0x00007f779d070618: jmpq   0x00007f779d070622
  0x00007f779d07061d: callq  0x00007f77b2619180  ;   {runtime_call}
  0x00007f779d070622: movabs $0x0,%r10
  0x00007f779d07062c: mov    %r10,0x230(%r15)
  0x00007f779d070633: movabs $0x0,%r10
  0x00007f779d07063d: mov    %r10,0x238(%r15)
  0x00007f779d070644: mov    0x38(%r15),%rcx
  0x00007f779d070648: movl   $0x0,0x100(%rcx)
  0x00007f779d070652: leaveq 
  0x00007f779d070653: cmpq   $0x0,0x8(%r15)
  0x00007f779d07065b: jne    0x00007f779d070662
  0x00007f779d070661: retq   
  0x00007f779d070662: jmpq   Stub::forward exception  ;   {runtime_call}
  0x00007f779d070667: mov    %rsp,%r12
  0x00007f779d07066a: sub    $0x0,%rsp
  0x00007f779d07066e: and    $0xfffffffffffffff0,%rsp
  0x00007f779d070672: callq  0x00007f77b2619720  ;   {runtime_call}
  0x00007f779d070677: mov    %r12,%rsp
  0x00007f779d07067a: xor    %r12,%r12
  0x00007f779d07067d: jmpq   0x00007f779d0705e5
  0x00007f779d070682: hlt    
  0x00007f779d070683: hlt    
  0x00007f779d070684: hlt    
  0x00007f779d070685: hlt    
  0x00007f779d070686: hlt    
  0x00007f779d070687: hlt    
Decoding compiled method 0x00007f779d337010:
Code:
[Entry Point]
[Constants]
  # {method} {0x00007f7783800480} '<init>' '()V' in 'java/lang/Object'
  #           [sp+0x40]  (sp of caller)
  0x00007f779d337180: mov    0x8(%rsi),%r10d
  0x00007f779d337184: shl    $0x3,%r10
  0x00007f779d337188: cmp    %rax,%r10
  0x00007f779d33718b: jne    0x00007f779d045ba0  ;   {runtime_call}
  0x00007f779d337191: nopl   0x0(%rax,%rax,1)
  0x00007f779d337199: nopl   0x0(%rax)
[Verified Entry Point]
  0x00007f779d3371a0: mov    %eax,-0x14000(%rsp)
  0x00007f779d3371a7: push   %rbp
  0x00007f779d3371a8: sub    $0x30,%rsp
  0x00007f779d3371ac: movabs $0x7f7783978ad8,%rdi  ;   {metadata(method data for {method} {0x00007f7783800480} '<init>' '()V' in 'java/lang/Object')}
  0x00007f779d3371b6: mov    0xdc(%rdi),%ebx
  0x00007f779d3371bc: add    $0x8,%ebx
  0x00007f779d3371bf: mov    %ebx,0xdc(%rdi)
  0x00007f779d3371c5: movabs $0x7f7783800480,%rdi  ;   {metadata({method} {0x00007f7783800480} '<init>' '()V' in 'java/lang/Object')}
  0x00007f779d3371cf: and    $0x1ff8,%ebx
  0x00007f779d3371d5: cmp    $0x0,%ebx
  0x00007f779d3371d8: je     0x00007f779d3371f7
  0x00007f779d3371de: mov    %rsi,%rdi          ;*return
                                                ; - java.lang.Object::<init>@0 (line 37)

  0x00007f779d3371e1: mov    %rsi,0x20(%rsp)
  0x00007f779d3371e6: callq  0x00007f779d333460  ; OopMap{[32]=Oop off=107}
                                                ;*return
                                                ; - java.lang.Object::<init>@0 (line 37)
                                                ;   {runtime_call}
  0x00007f779d3371eb: add    $0x30,%rsp
  0x00007f779d3371ef: pop    %rbp
  0x00007f779d3371f0: test   %eax,0x1593cf0a(%rip)        # 0x00007f77b2c74100
                                                ;   {poll_return}
  0x00007f779d3371f6: retq   
  0x00007f779d3371f7: mov    %rdi,0x8(%rsp)
  0x00007f779d3371fc: movq   $0xffffffffffffffff,(%rsp)
  0x00007f779d337204: callq  0x00007f779d339320  ; OopMap{rsi=Oop off=137}
                                                ;*synchronization entry
                                                ; - java.lang.Object::<init>@-1 (line 37)
                                                ;   {runtime_call}
  0x00007f779d337209: jmp    0x00007f779d3371de
  0x00007f779d33720b: nop
  0x00007f779d33720c: nop
  0x00007f779d33720d: mov    0x300(%r15),%rax
  0x00007f779d337214: movabs $0x0,%r10
  0x00007f779d33721e: mov    %r10,0x300(%r15)
  0x00007f779d337225: movabs $0x0,%r10
  0x00007f779d33722f: mov    %r10,0x308(%r15)
  0x00007f779d337236: add    $0x30,%rsp
  0x00007f779d33723a: pop    %rbp
  0x00007f779d33723b: jmpq   0x00007f779d0700a0  ;   {runtime_call}
[Exception Handler]
[Stub Code]
  0x00007f779d337240: callq  0x00007f779d3317a0  ;   {no_reloc}
  0x00007f779d337245: mov    %rsp,-0x28(%rsp)
  0x00007f779d33724a: sub    $0x80,%rsp
  0x00007f779d337251: mov    %rax,0x78(%rsp)
  0x00007f779d337256: mov    %rcx,0x70(%rsp)
  0x00007f779d33725b: mov    %rdx,0x68(%rsp)
  0x00007f779d337260: mov    %rbx,0x60(%rsp)
  0x00007f779d337265: mov    %rbp,0x50(%rsp)
  0x00007f779d33726a: mov    %rsi,0x48(%rsp)
  0x00007f779d33726f: mov    %rdi,0x40(%rsp)
  0x00007f779d337274: mov    %r8,0x38(%rsp)
  0x00007f779d337279: mov    %r9,0x30(%rsp)
  0x00007f779d33727e: mov    %r10,0x28(%rsp)
  0x00007f779d337283: mov    %r11,0x20(%rsp)
  0x00007f779d337288: mov    %r12,0x18(%rsp)
  0x00007f779d33728d: mov    %r13,0x10(%rsp)
  0x00007f779d337292: mov    %r14,0x8(%rsp)
  0x00007f779d337297: mov    %r15,(%rsp)
  0x00007f779d33729b: movabs $0x7f77b276249e,%rdi  ;   {external_word}
  0x00007f779d3372a5: movabs $0x7f779d337245,%rsi  ;   {internal_word}
  0x00007f779d3372af: mov    %rsp,%rdx
  0x00007f779d3372b2: and    $0xfffffffffffffff0,%rsp
  0x00007f779d3372b6: callq  0x00007f77b2488460  ;   {runtime_call}
  0x00007f779d3372bb: hlt    
[Deopt Handler Code]
  0x00007f779d3372bc: movabs $0x7f779d3372bc,%r10  ;   {section_word}
  0x00007f779d3372c6: push   %r10
  0x00007f779d3372c8: jmpq   0x00007f779d046e40  ;   {runtime_call}
  0x00007f779d3372cd: hlt    
  0x00007f779d3372ce: hlt    
  0x00007f779d3372cf: hlt    
Decoding compiled method 0x00007f779d337d90:
Code:
[Entry Point]
[Constants]
  # {method} {0x00007f7783950bd8} 'encode' '([CII[B)I' in 'sun/nio/cs/UTF_8$Encoder'
  # this:     rsi:rsi   = 'sun/nio/cs/UTF_8$Encoder'
  # parm0:    rdx:rdx   = '[C'
  # parm1:    rcx       = int
  # parm2:    r8        = int
  # parm3:    r9:r9     = '[B'
  #           [sp+0x80]  (sp of caller)
  0x00007f779d337fa0: mov    0x8(%rsi),%r10d
  0x00007f779d337fa4: shl    $0x3,%r10
  0x00007f779d337fa8: cmp    %rax,%r10
  0x00007f779d337fab: jne    0x00007f779d045ba0  ;   {runtime_call}
  0x00007f779d337fb1: nopl   0x0(%rax,%rax,1)
  0x00007f779d337fb9: nopl   0x0(%rax)
[Verified Entry Point]
  0x00007f779d337fc0: mov    %eax,-0x14000(%rsp)
  0x00007f779d337fc7: push   %rbp
  0x00007f779d337fc8: sub    $0x70,%rsp
  0x00007f779d337fcc: mov    %rsi,0x48(%rsp)
  0x00007f779d337fd1: mov    %rdx,0x38(%rsp)
  0x00007f779d337fd6: mov    %r9,0x40(%rsp)
  0x00007f779d337fdb: movabs $0x7f7783a06fb8,%rdi  ;   {metadata(method data for {method} {0x00007f7783950bd8} 'encode' '([CII[B)I' in 'sun/nio/cs/UTF_8$Encoder')}
  0x00007f779d337fe5: mov    0xdc(%rdi),%ebx
  0x00007f779d337feb: add    $0x8,%ebx
  0x00007f779d337fee: mov    %ebx,0xdc(%rdi)
  0x00007f779d337ff4: movabs $0x7f7783950bd8,%rdi  ;   {metadata({method} {0x00007f7783950bd8} 'encode' '([CII[B)I' in 'sun/nio/cs/UTF_8$Encoder')}
  0x00007f779d337ffe: and    $0x1ff8,%ebx
  0x00007f779d338004: cmp    $0x0,%ebx
  0x00007f779d338007: je     0x00007f779d33877d  ;*iload_2
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@0 (line 704)

  0x00007f779d33800d: mov    %rcx,%rdi
  0x00007f779d338010: add    %r8d,%edi
  0x00007f779d338013: mov    %edi,0x34(%rsp)
  0x00007f779d338017: mov    0xc(%r9),%ebx      ;*arraylength
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@13 (line 706)
                                                ; implicit exception: dispatches to 0x00007f779d338794
  0x00007f779d33801b: movabs $0x7f7783a06fb8,%rax  ;   {metadata(method data for {method} {0x00007f7783950bd8} 'encode' '([CII[B)I' in 'sun/nio/cs/UTF_8$Encoder')}
  0x00007f779d338025: addq   $0x1,0x108(%rax)
  0x00007f779d33802d: mov    %r8,%rsi
  0x00007f779d338030: mov    %rbx,%rdx          ;*invokestatic min
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@14 (line 706)

  0x00007f779d338033: mov    %ecx,0x30(%rsp)
  0x00007f779d338037: callq  0x00007f779d046260  ; OopMap{[56]=Oop [72]=Oop [64]=Oop off=156}
                                                ;*invokestatic min
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@14 (line 706)
                                                ;   {static_call}
  0x00007f779d33803c: mov    0x30(%rsp),%ecx
  0x00007f779d338040: mov    $0x0,%esi
  0x00007f779d338045: mov    0x40(%rsp),%r9
  0x00007f779d33804a: mov    0x38(%rsp),%rdx
  0x00007f779d33804f: jmpq   0x00007f779d338109  ;*iload
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@20 (line 709)

  0x00007f779d338054: nopl   0x0(%rax)
  0x00007f779d338058: movslq %ecx,%rdi
  0x00007f779d33805b: cmp    0xc(%rdx),%ecx     ; implicit exception: dispatches to 0x00007f779d338799
  0x00007f779d33805e: jae    0x00007f779d3387a3
  0x00007f779d338064: movzwl 0x10(%rdx,%rdi,2),%edi  ;*caload
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@29 (line 709)

  0x00007f779d338069: cmp    $0x80,%edi
  0x00007f779d33806f: movabs $0x7f7783a06fb8,%rbx  ;   {metadata(method data for {method} {0x00007f7783950bd8} 'encode' '([CII[B)I' in 'sun/nio/cs/UTF_8$Encoder')}
  0x00007f779d338079: movabs $0x138,%r8
  0x00007f779d338083: jge    0x00007f779d338093
  0x00007f779d338089: movabs $0x148,%r8
  0x00007f779d338093: mov    (%rbx,%r8,1),%r11
  0x00007f779d338097: lea    0x1(%r11),%r11
  0x00007f779d33809b: mov    %r11,(%rbx,%r8,1)
  0x00007f779d33809f: jge    0x00007f779d338148  ;*if_icmpge
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@33 (line 709)

  0x00007f779d3380a5: mov    %rsi,%rbx
  0x00007f779d3380a8: inc    %ebx
  0x00007f779d3380aa: inc    %ecx
  0x00007f779d3380ac: movslq %esi,%r8
  0x00007f779d3380af: cmp    0xc(%r9),%esi
  0x00007f779d3380b3: jae    0x00007f779d3387ac
  0x00007f779d3380b9: mov    %dil,0x10(%r9,%r8,1)  ;*bastore
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@50 (line 710)

  0x00007f779d3380be: movabs $0x7f7783a06fb8,%rsi  ;   {metadata(method data for {method} {0x00007f7783950bd8} 'encode' '([CII[B)I' in 'sun/nio/cs/UTF_8$Encoder')}
  0x00007f779d3380c8: mov    0xe0(%rsi),%edi
  0x00007f779d3380ce: add    $0x8,%edi
  0x00007f779d3380d1: mov    %edi,0xe0(%rsi)
  0x00007f779d3380d7: movabs $0x7f7783950bd8,%rsi  ;   {metadata({method} {0x00007f7783950bd8} 'encode' '([CII[B)I' in 'sun/nio/cs/UTF_8$Encoder')}
  0x00007f779d3380e1: and    $0xfff8,%edi
  0x00007f779d3380e7: cmp    $0x0,%edi
  0x00007f779d3380ea: je     0x00007f779d3387b5  ; OopMap{[72]=Oop r9=Oop [64]=Oop rdx=Oop [56]=Oop off=336}
                                                ;*goto
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@51 (line 710)

  0x00007f779d3380f0: test   %eax,0x1593c00a(%rip)        # 0x00007f77b2c74100
                                                ;   {poll}
  0x00007f779d3380f6: movabs $0x7f7783a06fb8,%rsi  ;   {metadata(method data for {method} {0x00007f7783950bd8} 'encode' '([CII[B)I' in 'sun/nio/cs/UTF_8$Encoder')}
  0x00007f779d338100: incl   0x158(%rsi)
  0x00007f779d338106: mov    %rbx,%rsi          ;*goto
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@51 (line 710)

  0x00007f779d338109: cmp    %eax,%esi
  0x00007f779d33810b: movabs $0x7f7783a06fb8,%rdi  ;   {metadata(method data for {method} {0x00007f7783950bd8} 'encode' '([CII[B)I' in 'sun/nio/cs/UTF_8$Encoder')}
  0x00007f779d338115: movabs $0x118,%rbx
  0x00007f779d33811f: jge    0x00007f779d33812f
  0x00007f779d338125: movabs $0x128,%rbx
  0x00007f779d33812f: mov    (%rdi,%rbx,1),%r8
  0x00007f779d338133: lea    0x1(%r8),%r8
  0x00007f779d338137: mov    %r8,(%rdi,%rbx,1)
  0x00007f779d33813b: jl     0x00007f779d338058  ;*if_icmpge
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@24 (line 709)

  0x00007f779d338141: nopl   0x0(%rax)
  0x00007f779d338148: mov    0x34(%rsp),%edi
  0x00007f779d33814c: cmp    %edi,%ecx
  0x00007f779d33814e: movabs $0x7f7783a06fb8,%rax  ;   {metadata(method data for {method} {0x00007f7783950bd8} 'encode' '([CII[B)I' in 'sun/nio/cs/UTF_8$Encoder')}
  0x00007f779d338158: movabs $0x170,%r8
  0x00007f779d338162: jge    0x00007f779d338172
  0x00007f779d338168: movabs $0x180,%r8
  0x00007f779d338172: mov    (%rax,%r8,1),%r11
  0x00007f779d338176: lea    0x1(%r11),%r11
  0x00007f779d33817a: mov    %r11,(%rax,%r8,1)
  0x00007f779d33817e: jge    0x00007f779d33876e  ;*if_icmpge
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@57 (line 712)

  0x00007f779d338184: mov    %rcx,%rax
  0x00007f779d338187: inc    %eax
  0x00007f779d338189: movslq %ecx,%r8
  0x00007f779d33818c: cmp    0xc(%rdx),%ecx     ; implicit exception: dispatches to 0x00007f779d3387cc
  0x00007f779d33818f: jae    0x00007f779d3387d6
  0x00007f779d338195: movzwl 0x10(%rdx,%r8,2),%ecx  ;*caload
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@65 (line 713)

  0x00007f779d33819b: cmp    $0x80,%ecx
  0x00007f779d3381a1: movabs $0x7f7783a06fb8,%r8  ;   {metadata(method data for {method} {0x00007f7783950bd8} 'encode' '([CII[B)I' in 'sun/nio/cs/UTF_8$Encoder')}
  0x00007f779d3381ab: movabs $0x190,%r11
  0x00007f779d3381b5: jge    0x00007f779d3381c5
  0x00007f779d3381bb: movabs $0x1a0,%r11
  0x00007f779d3381c5: mov    (%r8,%r11,1),%r13
  0x00007f779d3381c9: lea    0x1(%r13),%r13
  0x00007f779d3381cd: mov    %r13,(%r8,%r11,1)
  0x00007f779d3381d1: jge    0x00007f779d338209  ;*if_icmpge
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@73 (line 714)

  0x00007f779d3381d7: mov    %rsi,%r8
  0x00007f779d3381da: inc    %r8d
  0x00007f779d3381dd: movslq %esi,%r11
  0x00007f779d3381e0: cmp    0xc(%r9),%esi
  0x00007f779d3381e4: jae    0x00007f779d3387df
  0x00007f779d3381ea: mov    %cl,0x10(%r9,%r11,1)  ;*bastore
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@86 (line 716)

  0x00007f779d3381ef: movabs $0x7f7783a06fb8,%rsi  ;   {metadata(method data for {method} {0x00007f7783950bd8} 'encode' '([CII[B)I' in 'sun/nio/cs/UTF_8$Encoder')}
  0x00007f779d3381f9: incl   0x1b0(%rsi)
  0x00007f779d3381ff: mov    0x48(%rsp),%rdi
  0x00007f779d338204: jmpq   0x00007f779d338705  ;*goto
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@87 (line 716)

  0x00007f779d338209: cmp    $0x800,%ecx
  0x00007f779d33820f: movabs $0x7f7783a06fb8,%r8  ;   {metadata(method data for {method} {0x00007f7783950bd8} 'encode' '([CII[B)I' in 'sun/nio/cs/UTF_8$Encoder')}
  0x00007f779d338219: movabs $0x1c8,%r11
  0x00007f779d338223: jge    0x00007f779d338233
  0x00007f779d338229: movabs $0x1d8,%r11
  0x00007f779d338233: mov    (%r8,%r11,1),%r13
  0x00007f779d338237: lea    0x1(%r13),%r13
  0x00007f779d33823b: mov    %r13,(%r8,%r11,1)
  0x00007f779d33823f: jge    0x00007f779d3382a2  ;*if_icmpge
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@95 (line 717)

  0x00007f779d338245: mov    %rcx,%r8
  0x00007f779d338248: sar    $0x6,%r8d
  0x00007f779d33824c: or     $0xc0,%r8d
  0x00007f779d338253: movslq %esi,%r11
  0x00007f779d338256: cmp    0xc(%r9),%esi
  0x00007f779d33825a: jae    0x00007f779d3387e8
  0x00007f779d338260: mov    %r8b,0x10(%r9,%r11,1)  ;*bastore
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@115 (line 719)

  0x00007f779d338265: inc    %esi
  0x00007f779d338267: mov    %rsi,%r8
  0x00007f779d33826a: inc    %r8d
  0x00007f779d33826d: and    $0x3f,%ecx
  0x00007f779d338270: or     $0x80,%ecx
  0x00007f779d338276: movslq %esi,%r11
  0x00007f779d338279: cmp    0xc(%r9),%esi
  0x00007f779d33827d: jae    0x00007f779d3387f1
  0x00007f779d338283: mov    %cl,0x10(%r9,%r11,1)  ;*bastore
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@133 (line 720)

  0x00007f779d338288: movabs $0x7f7783a06fb8,%rsi  ;   {metadata(method data for {method} {0x00007f7783950bd8} 'encode' '([CII[B)I' in 'sun/nio/cs/UTF_8$Encoder')}
  0x00007f779d338292: incl   0x1e8(%rsi)
  0x00007f779d338298: mov    0x48(%rsp),%rdi
  0x00007f779d33829d: jmpq   0x00007f779d338705  ;*goto
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@134 (line 720)

  0x00007f779d3382a2: mov    %eax,0x50(%rsp)
  0x00007f779d3382a6: mov    %esi,0x58(%rsp)
  0x00007f779d3382aa: movabs $0x7f7783a06fb8,%r8  ;   {metadata(method data for {method} {0x00007f7783950bd8} 'encode' '([CII[B)I' in 'sun/nio/cs/UTF_8$Encoder')}
  0x00007f779d3382b4: addq   $0x1,0x200(%r8)
  0x00007f779d3382bc: mov    %rcx,%rsi          ;*invokestatic isSurrogate
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@139 (line 721)

  0x00007f779d3382bf: mov    %ecx,0x54(%rsp)
  0x00007f779d3382c3: nop
  0x00007f779d3382c4: nop
  0x00007f779d3382c5: nop
  0x00007f779d3382c6: nop
  0x00007f779d3382c7: callq  0x00007f779d046260  ; OopMap{[72]=Oop [64]=Oop [56]=Oop off=812}
                                                ;*invokestatic isSurrogate
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@139 (line 721)
                                                ;   {static_call}
  0x00007f779d3382cc: cmp    $0x0,%eax
  0x00007f779d3382cf: movabs $0x7f7783a06fb8,%rdx  ;   {metadata(method data for {method} {0x00007f7783950bd8} 'encode' '([CII[B)I' in 'sun/nio/cs/UTF_8$Encoder')}
  0x00007f779d3382d9: movabs $0x210,%rax
  0x00007f779d3382e3: je     0x00007f779d3382f3
  0x00007f779d3382e9: movabs $0x220,%rax
  0x00007f779d3382f3: mov    (%rdx,%rax,1),%rsi
  0x00007f779d3382f7: lea    0x1(%rsi),%rsi
  0x00007f779d3382fb: mov    %rsi,(%rdx,%rax,1)
  0x00007f779d3382ff: je     0x00007f779d338689  ;*ifeq
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@142 (line 721)

  0x00007f779d338305: mov    0x48(%rsp),%rsi
  0x00007f779d33830a: mov    0x30(%rsi),%edx
  0x00007f779d33830d: shl    $0x3,%rdx          ;*getfield sgp
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@146 (line 722)

  0x00007f779d338311: cmp    $0x0,%rdx
  0x00007f779d338315: movabs $0x7f7783a06fb8,%rdx  ;   {metadata(method data for {method} {0x00007f7783950bd8} 'encode' '([CII[B)I' in 'sun/nio/cs/UTF_8$Encoder')}
  0x00007f779d33831f: movabs $0x230,%rax
  0x00007f779d338329: jne    0x00007f779d338339
  0x00007f779d33832f: movabs $0x240,%rax
  0x00007f779d338339: mov    (%rdx,%rax,1),%rdi
  0x00007f779d33833d: lea    0x1(%rdi),%rdi
  0x00007f779d338341: mov    %rdi,(%rdx,%rax,1)
  0x00007f779d338345: jne    0x00007f779d3383ae  ;*ifnonnull
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@149 (line 722)

  0x00007f779d33834b: nopl   0x0(%rax,%rax,1)
  0x00007f779d338350: jmpq   0x00007f779d338809  ;   {no_reloc}
  0x00007f779d338355: add    %al,(%rax)
  0x00007f779d338357: add    %al,(%rax)
  0x00007f779d338359: add    %ch,%cl
  0x00007f779d33835b: mov    $0x4,%ah
  0x00007f779d33835d: add    %al,(%rax)         ;*new  ; - sun.nio.cs.UTF_8$Encoder::encode@153 (line 723)

  0x00007f779d33835f: mov    %rax,%rdi
  0x00007f779d338362: movabs $0x7f7783a06fb8,%rbx  ;   {metadata(method data for {method} {0x00007f7783950bd8} 'encode' '([CII[B)I' in 'sun/nio/cs/UTF_8$Encoder')}
  0x00007f779d33836c: addq   $0x1,0x250(%rbx)
  0x00007f779d338374: mov    %rax,%rsi          ;*invokespecial <init>
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@157 (line 723)

  0x00007f779d338377: mov    %rax,0x60(%rsp)
  0x00007f779d33837c: nop
  0x00007f779d33837d: nop
  0x00007f779d33837e: nop
  0x00007f779d33837f: callq  0x00007f779d045de0  ; OopMap{[64]=Oop [56]=Oop [72]=Oop [96]=Oop off=996}
                                                ;*invokespecial <init>
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@157 (line 723)
                                                ;   {optimized virtual_call}
  0x00007f779d338384: mov    0x48(%rsp),%rsi
  0x00007f779d338389: mov    0x60(%rsp),%rax
  0x00007f779d33838e: mov    %rax,%r10
  0x00007f779d338391: shr    $0x3,%r10
  0x00007f779d338395: mov    %r10d,0x30(%rsi)
  0x00007f779d338399: mov    %rsi,%rdx
  0x00007f779d33839c: shr    $0x9,%rdx
  0x00007f779d3383a0: movabs $0x7f77991ff000,%rcx
  0x00007f779d3383aa: movb   $0x0,(%rdx,%rcx,1)  ;*putfield sgp
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@160 (line 723)

  0x00007f779d3383ae: mov    0x30(%rsi),%edi
  0x00007f779d3383b1: shl    $0x3,%rdi          ;*getfield sgp
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@164 (line 724)

  0x00007f779d3383b5: cmp    (%rdi),%rax        ; implicit exception: dispatches to 0x00007f779d338820
  0x00007f779d3383b8: mov    %rdi,%rdx
  0x00007f779d3383bb: movabs $0x7f7783a06fb8,%rcx  ;   {metadata(method data for {method} {0x00007f7783950bd8} 'encode' '([CII[B)I' in 'sun/nio/cs/UTF_8$Encoder')}
  0x00007f779d3383c5: mov    0x8(%rdx),%edx
  0x00007f779d3383c8: shl    $0x3,%rdx
  0x00007f779d3383cc: cmp    0x268(%rcx),%rdx
  0x00007f779d3383d3: jne    0x00007f779d3383e2
  0x00007f779d3383d5: addq   $0x1,0x270(%rcx)
  0x00007f779d3383dd: jmpq   0x00007f779d338448
  0x00007f779d3383e2: cmp    0x278(%rcx),%rdx
  0x00007f779d3383e9: jne    0x00007f779d3383f8
  0x00007f779d3383eb: addq   $0x1,0x280(%rcx)
  0x00007f779d3383f3: jmpq   0x00007f779d338448
  0x00007f779d3383f8: cmpq   $0x0,0x268(%rcx)
  0x00007f779d338403: jne    0x00007f779d33841c
  0x00007f779d338405: mov    %rdx,0x268(%rcx)
  0x00007f779d33840c: movq   $0x1,0x270(%rcx)
  0x00007f779d338417: jmpq   0x00007f779d338448
  0x00007f779d33841c: cmpq   $0x0,0x278(%rcx)
  0x00007f779d338427: jne    0x00007f779d338440
  0x00007f779d338429: mov    %rdx,0x278(%rcx)
  0x00007f779d338430: movq   $0x1,0x280(%rcx)
  0x00007f779d33843b: jmpq   0x00007f779d338448
  0x00007f779d338440: addq   $0x1,0x260(%rcx)
  0x00007f779d338448: mov    0x50(%rsp),%eax
  0x00007f779d33844c: dec    %eax
  0x00007f779d33844e: mov    0x54(%rsp),%edx
  0x00007f779d338452: mov    0x38(%rsp),%rcx
  0x00007f779d338457: mov    %rax,%r8
  0x00007f779d33845a: mov    0x34(%rsp),%r9d
  0x00007f779d33845f: mov    %rdi,%rsi          ;*invokevirtual parse
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@175 (line 724)

  0x00007f779d338462: nop
  0x00007f779d338463: nop
  0x00007f779d338464: nop
  0x00007f779d338465: movabs $0xffffffffffffffff,%rax
  0x00007f779d33846f: callq  0x00007f779d046020  ; OopMap{[64]=Oop [56]=Oop [72]=Oop off=1236}
                                                ;*invokevirtual parse
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@175 (line 724)
                                                ;   {virtual_call}
  0x00007f779d338474: cmp    $0x0,%eax
  0x00007f779d338477: movabs $0x7f7783a06fb8,%rsi  ;   {metadata(method data for {method} {0x00007f7783950bd8} 'encode' '([CII[B)I' in 'sun/nio/cs/UTF_8$Encoder')}
  0x00007f779d338481: movabs $0x290,%rdi
  0x00007f779d33848b: jge    0x00007f779d33849b
  0x00007f779d338491: movabs $0x2a0,%rdi
  0x00007f779d33849b: mov    (%rsi,%rdi,1),%rbx
  0x00007f779d33849f: lea    0x1(%rbx),%rbx
  0x00007f779d3384a3: mov    %rbx,(%rsi,%rdi,1)
  0x00007f779d3384a7: jge    0x00007f779d3385d1  ;*ifge
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@182 (line 725)

  0x00007f779d3384ad: mov    0x48(%rsp),%rsi
  0x00007f779d3384b2: movabs $0x7f7783a06fb8,%rdi  ;   {metadata(method data for {method} {0x00007f7783950bd8} 'encode' '([CII[B)I' in 'sun/nio/cs/UTF_8$Encoder')}
  0x00007f779d3384bc: mov    0x8(%rsi),%esi
  0x00007f779d3384bf: shl    $0x3,%rsi
  0x00007f779d3384c3: cmp    0x2b8(%rdi),%rsi
  0x00007f779d3384ca: jne    0x00007f779d3384d9
  0x00007f779d3384cc: addq   $0x1,0x2c0(%rdi)
  0x00007f779d3384d4: jmpq   0x00007f779d33853f
  0x00007f779d3384d9: cmp    0x2c8(%rdi),%rsi
  0x00007f779d3384e0: jne    0x00007f779d3384ef
  0x00007f779d3384e2: addq   $0x1,0x2d0(%rdi)
  0x00007f779d3384ea: jmpq   0x00007f779d33853f
  0x00007f779d3384ef: cmpq   $0x0,0x2b8(%rdi)
  0x00007f779d3384fa: jne    0x00007f779d338513
  0x00007f779d3384fc: mov    %rsi,0x2b8(%rdi)
  0x00007f779d338503: movq   $0x1,0x2c0(%rdi)
  0x00007f779d33850e: jmpq   0x00007f779d33853f
  0x00007f779d338513: cmpq   $0x0,0x2c8(%rdi)
  0x00007f779d33851e: jne    0x00007f779d338537
  0x00007f779d338520: mov    %rsi,0x2c8(%rdi)
  0x00007f779d338527: movq   $0x1,0x2d0(%rdi)
  0x00007f779d338532: jmpq   0x00007f779d33853f
  0x00007f779d338537: addq   $0x1,0x2b0(%rdi)
  0x00007f779d33853f: mov    0x48(%rsp),%rsi    ;*invokevirtual malformedInputAction
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@186 (line 726)

  0x00007f779d338544: nop
  0x00007f779d338545: nop
  0x00007f779d338546: nop
  0x00007f779d338547: callq  0x00007f779d045de0  ; OopMap{[64]=Oop [56]=Oop [72]=Oop off=1452}
                                                ;*invokevirtual malformedInputAction
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@186 (line 726)
                                                ;   {optimized virtual_call}
  0x00007f779d33854c: movabs $0x6b4916858,%r10  ;   {oop(a 'java/nio/charset/CodingErrorAction')}
  0x00007f779d338556: cmp    %r10,%rax
  0x00007f779d338559: movabs $0x7f7783a06fb8,%rax  ;   {metadata(method data for {method} {0x00007f7783950bd8} 'encode' '([CII[B)I' in 'sun/nio/cs/UTF_8$Encoder')}
  0x00007f779d338563: movabs $0x2e0,%rsi
  0x00007f779d33856d: je     0x00007f779d33857d
  0x00007f779d338573: movabs $0x2f0,%rsi
  0x00007f779d33857d: mov    (%rax,%rsi,1),%rdi
  0x00007f779d338581: lea    0x1(%rdi),%rdi
  0x00007f779d338585: mov    %rdi,(%rax,%rsi,1)
  0x00007f779d338589: jne    0x00007f779d33875d  ;*if_acmpeq
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@192 (line 726)

  0x00007f779d33858f: mov    0x58(%rsp),%esi
  0x00007f779d338593: mov    0x40(%rsp),%r9
  0x00007f779d338598: mov    0x48(%rsp),%rdi
  0x00007f779d33859d: mov    %rsi,%rax
  0x00007f779d3385a0: inc    %eax
  0x00007f779d3385a2: movsbl 0x2c(%rdi),%ebx    ;*getfield repl
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@205 (line 728)

  0x00007f779d3385a6: movslq %esi,%rdx
  0x00007f779d3385a9: cmp    0xc(%r9),%esi
  0x00007f779d3385ad: jae    0x00007f779d338825
  0x00007f779d3385b3: mov    %bl,0x10(%r9,%rdx,1)  ;*bastore
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@208 (line 728)

  0x00007f779d3385b8: movabs $0x7f7783a06fb8,%rsi  ;   {metadata(method data for {method} {0x00007f7783950bd8} 'encode' '([CII[B)I' in 'sun/nio/cs/UTF_8$Encoder')}
  0x00007f779d3385c2: incl   0x300(%rsi)
  0x00007f779d3385c8: mov    0x50(%rsp),%esi
  0x00007f779d3385cc: jmpq   0x00007f779d33866e  ;*goto
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@209 (line 728)

  0x00007f779d3385d1: mov    0x58(%rsp),%esi
  0x00007f779d3385d5: mov    0x40(%rsp),%r9
  0x00007f779d3385da: mov    0x48(%rsp),%rdi
  0x00007f779d3385df: mov    %rax,%rbx
  0x00007f779d3385e2: sar    $0x12,%ebx
  0x00007f779d3385e5: or     $0xf0,%ebx
  0x00007f779d3385eb: movslq %esi,%rdx
  0x00007f779d3385ee: cmp    0xc(%r9),%esi
  0x00007f779d3385f2: jae    0x00007f779d33882e
  0x00007f779d3385f8: mov    %bl,0x10(%r9,%rdx,1)  ;*bastore
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@229 (line 730)

  0x00007f779d3385fd: inc    %esi
  0x00007f779d3385ff: mov    %rax,%rbx
  0x00007f779d338602: sar    $0xc,%ebx
  0x00007f779d338605: and    $0x3f,%ebx
  0x00007f779d338608: or     $0x80,%ebx
  0x00007f779d33860e: movslq %esi,%rdx
  0x00007f779d338611: cmp    0xc(%r9),%esi
  0x00007f779d338615: jae    0x00007f779d338837
  0x00007f779d33861b: mov    %bl,0x10(%r9,%rdx,1)  ;*bastore
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@250 (line 731)

  0x00007f779d338620: inc    %esi
  0x00007f779d338622: mov    %rax,%rbx
  0x00007f779d338625: sar    $0x6,%ebx
  0x00007f779d338628: and    $0x3f,%ebx
  0x00007f779d33862b: or     $0x80,%ebx
  0x00007f779d338631: movslq %esi,%rdx
  0x00007f779d338634: cmp    0xc(%r9),%esi
  0x00007f779d338638: jae    0x00007f779d338840
  0x00007f779d33863e: mov    %bl,0x10(%r9,%rdx,1)  ;*bastore
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@271 (line 732)

  0x00007f779d338643: inc    %esi
  0x00007f779d338645: mov    %rsi,%rbx
  0x00007f779d338648: inc    %ebx
  0x00007f779d33864a: and    $0x3f,%eax
  0x00007f779d33864d: or     $0x80,%eax
  0x00007f779d338653: movslq %esi,%rdx
  0x00007f779d338656: cmp    0xc(%r9),%esi
  0x00007f779d33865a: jae    0x00007f779d338849
  0x00007f779d338660: mov    %al,0x10(%r9,%rdx,1)  ;*bastore
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@289 (line 733)

  0x00007f779d338665: mov    0x50(%rsp),%esi
  0x00007f779d338669: inc    %esi
  0x00007f779d33866b: mov    %rbx,%rax
  0x00007f779d33866e: movabs $0x7f7783a06fb8,%rbx  ;   {metadata(method data for {method} {0x00007f7783950bd8} 'encode' '([CII[B)I' in 'sun/nio/cs/UTF_8$Encoder')}
  0x00007f779d338678: incl   0x318(%rbx)
  0x00007f779d33867e: mov    %rax,%r8
  0x00007f779d338681: mov    %rsi,%rax
  0x00007f779d338684: jmpq   0x00007f779d338705  ;*goto
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@293 (line 736)

  0x00007f779d338689: mov    0x54(%rsp),%ecx
  0x00007f779d33868d: mov    0x50(%rsp),%eax
  0x00007f779d338691: mov    0x58(%rsp),%esi
  0x00007f779d338695: mov    0x40(%rsp),%r9
  0x00007f779d33869a: mov    0x48(%rsp),%rdi
  0x00007f779d33869f: mov    %rcx,%rbx
  0x00007f779d3386a2: sar    $0xc,%ebx
  0x00007f779d3386a5: or     $0xe0,%ebx
  0x00007f779d3386ab: movslq %esi,%rdx
  0x00007f779d3386ae: cmp    0xc(%r9),%esi
  0x00007f779d3386b2: jae    0x00007f779d338852
  0x00007f779d3386b8: mov    %bl,0x10(%r9,%rdx,1)  ;*bastore
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@313 (line 738)

  0x00007f779d3386bd: inc    %esi
  0x00007f779d3386bf: mov    %rcx,%rbx
  0x00007f779d3386c2: sar    $0x6,%ebx
  0x00007f779d3386c5: and    $0x3f,%ebx
  0x00007f779d3386c8: or     $0x80,%ebx
  0x00007f779d3386ce: movslq %esi,%rdx
  0x00007f779d3386d1: cmp    0xc(%r9),%esi
  0x00007f779d3386d5: jae    0x00007f779d33885b
  0x00007f779d3386db: mov    %bl,0x10(%r9,%rdx,1)  ;*bastore
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@334 (line 739)

  0x00007f779d3386e0: inc    %esi
  0x00007f779d3386e2: mov    %rsi,%rbx
  0x00007f779d3386e5: inc    %ebx
  0x00007f779d3386e7: and    $0x3f,%ecx
  0x00007f779d3386ea: or     $0x80,%ecx
  0x00007f779d3386f0: movslq %esi,%rdx
  0x00007f779d3386f3: cmp    0xc(%r9),%esi
  0x00007f779d3386f7: jae    0x00007f779d338864
  0x00007f779d3386fd: mov    %cl,0x10(%r9,%rdx,1)  ;*bastore
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@352 (line 740)

  0x00007f779d338702: mov    %rbx,%r8           ;*goto
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@353 (line 742)

  0x00007f779d338705: movabs $0x7f7783a06fb8,%rsi  ;   {metadata(method data for {method} {0x00007f7783950bd8} 'encode' '([CII[B)I' in 'sun/nio/cs/UTF_8$Encoder')}
  0x00007f779d33870f: mov    0xe0(%rsi),%ebx
  0x00007f779d338715: add    $0x8,%ebx
  0x00007f779d338718: mov    %ebx,0xe0(%rsi)
  0x00007f779d33871e: movabs $0x7f7783950bd8,%rsi  ;   {metadata({method} {0x00007f7783950bd8} 'encode' '([CII[B)I' in 'sun/nio/cs/UTF_8$Encoder')}
  0x00007f779d338728: and    $0xfff8,%ebx
  0x00007f779d33872e: cmp    $0x0,%ebx
  0x00007f779d338731: je     0x00007f779d33886d  ; OopMap{[56]=Oop rdi=Oop [72]=Oop r9=Oop [64]=Oop off=1943}
                                                ;*goto
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@353 (line 742)

  0x00007f779d338737: test   %eax,0x1593b9c3(%rip)        # 0x00007f77b2c74100
                                                ;   {poll}
  0x00007f779d33873d: movabs $0x7f7783a06fb8,%rsi  ;   {metadata(method data for {method} {0x00007f7783950bd8} 'encode' '([CII[B)I' in 'sun/nio/cs/UTF_8$Encoder')}
  0x00007f779d338747: incl   0x330(%rsi)
  0x00007f779d33874d: mov    %r8,%rsi
  0x00007f779d338750: mov    %rax,%rcx
  0x00007f779d338753: mov    0x38(%rsp),%rdx
  0x00007f779d338758: jmpq   0x00007f779d338148  ;*goto
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@353 (line 742)

  0x00007f779d33875d: mov    $0xffffffff,%eax
  0x00007f779d338762: add    $0x70,%rsp
  0x00007f779d338766: pop    %rbp
  0x00007f779d338767: test   %eax,0x1593b993(%rip)        # 0x00007f77b2c74100
                                                ;   {poll_return}
  0x00007f779d33876d: retq                      ;*ireturn
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@196 (line 727)

  0x00007f779d33876e: mov    %rsi,%rax
  0x00007f779d338771: add    $0x70,%rsp
  0x00007f779d338775: pop    %rbp
  0x00007f779d338776: test   %eax,0x1593b984(%rip)        # 0x00007f77b2c74100
                                                ;   {poll_return}
  0x00007f779d33877c: retq   
  0x00007f779d33877d: mov    %rdi,0x8(%rsp)
  0x00007f779d338782: movq   $0xffffffffffffffff,(%rsp)
  0x00007f779d33878a: callq  0x00007f779d339320  ; OopMap{rsi=Oop [72]=Oop rdx=Oop [56]=Oop r9=Oop [64]=Oop off=2031}
                                                ;*synchronization entry
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@-1 (line 704)
                                                ;   {runtime_call}
  0x00007f779d33878f: jmpq   0x00007f779d33800d
  0x00007f779d338794: callq  0x00007f779d333ec0  ; OopMap{r9=Oop [64]=Oop [56]=Oop [72]=Oop off=2041}
                                                ;*arraylength
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@13 (line 706)
                                                ;   {runtime_call}
  0x00007f779d338799: callq  0x00007f779d333ec0  ; OopMap{[72]=Oop r9=Oop [64]=Oop rdx=Oop [56]=Oop off=2046}
                                                ;*caload
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@29 (line 709)
                                                ;   {runtime_call}
  0x00007f779d33879e: callq  0x00007f779d333ec0  ; OopMap{[72]=Oop r9=Oop [64]=Oop rdx=Oop [56]=Oop off=2051}
                                                ;*caload
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@29 (line 709)
                                                ;   {runtime_call}
  0x00007f779d3387a3: mov    %rcx,(%rsp)
  0x00007f779d3387a7: callq  0x00007f779d333700  ; OopMap{[72]=Oop r9=Oop [64]=Oop rdx=Oop [56]=Oop off=2060}
                                                ;*caload
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@29 (line 709)
                                                ;   {runtime_call}
  0x00007f779d3387ac: mov    %rsi,(%rsp)
  0x00007f779d3387b0: callq  0x00007f779d333700  ; OopMap{[72]=Oop r9=Oop [64]=Oop rdx=Oop [56]=Oop off=2069}
                                                ;*bastore
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@50 (line 710)
                                                ;   {runtime_call}
  0x00007f779d3387b5: mov    %rsi,0x8(%rsp)
  0x00007f779d3387ba: movq   $0x33,(%rsp)
  0x00007f779d3387c2: callq  0x00007f779d339320  ; OopMap{[72]=Oop r9=Oop [64]=Oop rdx=Oop [56]=Oop off=2087}
                                                ;*goto
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@51 (line 710)
                                                ;   {runtime_call}
  0x00007f779d3387c7: jmpq   0x00007f779d3380f0
  0x00007f779d3387cc: callq  0x00007f779d333ec0  ; OopMap{r9=Oop [64]=Oop rdx=Oop [56]=Oop [72]=Oop off=2097}
                                                ;*caload
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@65 (line 713)
                                                ;   {runtime_call}
  0x00007f779d3387d1: callq  0x00007f779d333ec0  ; OopMap{r9=Oop [64]=Oop rdx=Oop [56]=Oop [72]=Oop off=2102}
                                                ;*caload
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@65 (line 713)
                                                ;   {runtime_call}
  0x00007f779d3387d6: mov    %rcx,(%rsp)
  0x00007f779d3387da: callq  0x00007f779d333700  ; OopMap{r9=Oop [64]=Oop rdx=Oop [56]=Oop [72]=Oop off=2111}
                                                ;*caload
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@65 (line 713)
                                                ;   {runtime_call}
  0x00007f779d3387df: mov    %rsi,(%rsp)
  0x00007f779d3387e3: callq  0x00007f779d333700  ; OopMap{r9=Oop [64]=Oop rdx=Oop [56]=Oop [72]=Oop off=2120}
                                                ;*bastore
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@86 (line 716)
                                                ;   {runtime_call}
  0x00007f779d3387e8: mov    %rsi,(%rsp)
  0x00007f779d3387ec: callq  0x00007f779d333700  ; OopMap{r9=Oop [64]=Oop rdx=Oop [56]=Oop [72]=Oop off=2129}
                                                ;*bastore
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@115 (line 719)
                                                ;   {runtime_call}
  0x00007f779d3387f1: mov    %rsi,(%rsp)
  0x00007f779d3387f5: callq  0x00007f779d333700  ; OopMap{r9=Oop [64]=Oop rdx=Oop [56]=Oop [72]=Oop off=2138}
                                                ;*bastore
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@133 (line 720)
                                                ;   {runtime_call}
  0x00007f779d3387fa: movabs $0x0,%rdx          ;   {metadata(NULL)}
  0x00007f779d338804: mov    $0xa050f00,%eax
  0x00007f779d338809: callq  0x00007f779d3354e0  ; OopMap{[64]=Oop [56]=Oop [72]=Oop off=2158}
                                                ;*new  ; - sun.nio.cs.UTF_8$Encoder::encode@153 (line 723)
                                                ;   {runtime_call}
  0x00007f779d33880e: jmpq   0x00007f779d338350
  0x00007f779d338813: mov    %rdx,%rdx
  0x00007f779d338816: callq  0x00007f779d3331e0  ; OopMap{[64]=Oop [56]=Oop [72]=Oop off=2171}
                                                ;*new  ; - sun.nio.cs.UTF_8$Encoder::encode@153 (line 723)
                                                ;   {runtime_call}
  0x00007f779d33881b: jmpq   0x00007f779d33835f
  0x00007f779d338820: callq  0x00007f779d333ec0  ; OopMap{[64]=Oop [56]=Oop rsi=Oop [72]=Oop rdi=Oop off=2181}
                                                ;*invokevirtual parse
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@175 (line 724)
                                                ;   {runtime_call}
  0x00007f779d338825: mov    %rsi,(%rsp)
  0x00007f779d338829: callq  0x00007f779d333700  ; OopMap{[56]=Oop rdi=Oop [72]=Oop r9=Oop [64]=Oop off=2190}
                                                ;*bastore
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@208 (line 728)
                                                ;   {runtime_call}
  0x00007f779d33882e: mov    %rsi,(%rsp)
  0x00007f779d338832: callq  0x00007f779d333700  ; OopMap{[56]=Oop rdi=Oop [72]=Oop r9=Oop [64]=Oop off=2199}
                                                ;*bastore
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@229 (line 730)
                                                ;   {runtime_call}
  0x00007f779d338837: mov    %rsi,(%rsp)
  0x00007f779d33883b: callq  0x00007f779d333700  ; OopMap{[56]=Oop rdi=Oop [72]=Oop r9=Oop [64]=Oop off=2208}
                                                ;*bastore
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@250 (line 731)
                                                ;   {runtime_call}
  0x00007f779d338840: mov    %rsi,(%rsp)
  0x00007f779d338844: callq  0x00007f779d333700  ; OopMap{[56]=Oop rdi=Oop [72]=Oop r9=Oop [64]=Oop off=2217}
                                                ;*bastore
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@271 (line 732)
                                                ;   {runtime_call}
  0x00007f779d338849: mov    %rsi,(%rsp)
  0x00007f779d33884d: callq  0x00007f779d333700  ; OopMap{[56]=Oop rdi=Oop [72]=Oop r9=Oop [64]=Oop off=2226}
                                                ;*bastore
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@289 (line 733)
                                                ;   {runtime_call}
  0x00007f779d338852: mov    %rsi,(%rsp)
  0x00007f779d338856: callq  0x00007f779d333700  ; OopMap{[56]=Oop rdi=Oop [72]=Oop r9=Oop [64]=Oop off=2235}
                                                ;*bastore
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@313 (line 738)
                                                ;   {runtime_call}
  0x00007f779d33885b: mov    %rsi,(%rsp)
  0x00007f779d33885f: callq  0x00007f779d333700  ; OopMap{[56]=Oop rdi=Oop [72]=Oop r9=Oop [64]=Oop off=2244}
                                                ;*bastore
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@334 (line 739)
                                                ;   {runtime_call}
  0x00007f779d338864: mov    %rsi,(%rsp)
  0x00007f779d338868: callq  0x00007f779d333700  ; OopMap{[56]=Oop rdi=Oop [72]=Oop r9=Oop [64]=Oop off=2253}
                                                ;*bastore
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@352 (line 740)
                                                ;   {runtime_call}
  0x00007f779d33886d: mov    %rsi,0x8(%rsp)
  0x00007f779d338872: movq   $0x161,(%rsp)
  0x00007f779d33887a: callq  0x00007f779d339320  ; OopMap{[56]=Oop rdi=Oop [72]=Oop r9=Oop [64]=Oop off=2271}
                                                ;*goto
                                                ; - sun.nio.cs.UTF_8$Encoder::encode@353 (line 742)
                                                ;   {runtime_call}
  0x00007f779d33887f: jmpq   0x00007f779d338737
  0x00007f779d338884: nop
  0x00007f779d338885: nop
  0x00007f779d338886: mov    0x300(%r15),%rax
  0x00007f779d33888d: movabs $0x0,%r10
  0x00007f779d338897: mov    %r10,0x300(%r15)
  0x00007f779d33889e: movabs $0x0,%r10
  0x00007f779d3388a8: mov    %r10,0x308(%r15)
  0x00007f779d3388af: add    $0x70,%rsp
  0x00007f779d3388b3: pop    %rbp
  0x00007f779d3388b4: jmpq   0x00007f779d0700a0  ;   {runtime_call}
  0x00007f779d3388b9: hlt    
  0x00007f779d3388ba: hlt    
  0x00007f779d3388bb: hlt    
  0x00007f779d3388bc: hlt    
  0x00007f779d3388bd: hlt    
  0x00007f779d3388be: hlt    
  0x00007f779d3388bf: hlt    
[Stub Code]
  0x00007f779d3388c0: nop                       ;   {no_reloc}
  0x00007f779d3388c1: nop
  0x00007f779d3388c2: nop
  0x00007f779d3388c3: nop
  0x00007f779d3388c4: nop
  0x00007f779d3388c5: movabs $0x0,%rbx          ;   {static_stub}
  0x00007f779d3388cf: jmpq   0x00007f779d3388cf  ;   {runtime_call}
  0x00007f779d3388d4: nop
  0x00007f779d3388d5: movabs $0x0,%rbx          ;   {static_stub}
  0x00007f779d3388df: jmpq   0x00007f779d3388df  ;   {runtime_call}
  0x00007f779d3388e4: nop
  0x00007f779d3388e5: movabs $0x0,%rbx          ;   {static_stub}
  0x00007f779d3388ef: jmpq   0x00007f779d3388ef  ;   {runtime_call}
  0x00007f779d3388f4: nop
  0x00007f779d3388f5: movabs $0x0,%rbx          ;   {static_stub}
  0x00007f779d3388ff: jmpq   0x00007f779d3388ff  ;   {runtime_call}
  0x00007f779d338904: nop
  0x00007f779d338905: movabs $0x0,%rbx          ;   {static_stub}
  0x00007f779d33890f: jmpq   0x00007f779d33890f  ;   {runtime_call}
[Exception Handler]
  0x00007f779d338914: callq  0x00007f779d3317a0  ;   {runtime_call}
  0x00007f779d338919: mov    %rsp,-0x28(%rsp)
  0x00007f779d33891e: sub    $0x80,%rsp
  0x00007f779d338925: mov    %rax,0x78(%rsp)
  0x00007f779d33892a: mov    %rcx,0x70(%rsp)
  0x00007f779d33892f: mov    %rdx,0x68(%rsp)
  0x00007f779d338934: mov    %rbx,0x60(%rsp)
  0x00007f779d338939: mov    %rbp,0x50(%rsp)
  0x00007f779d33893e: mov    %rsi,0x48(%rsp)
  0x00007f779d338943: mov    %rdi,0x40(%rsp)
  0x00007f779d338948: mov    %r8,0x38(%rsp)
  0x00007f779d33894d: mov    %r9,0x30(%rsp)
  0x00007f779d338952: mov    %r10,0x28(%rsp)
  0x00007f779d338957: mov    %r11,0x20(%rsp)
  0x00007f779d33895c: mov    %r12,0x18(%rsp)
  0x00007f779d338961: mov    %r13,0x10(%rsp)
  0x00007f779d338966: mov    %r14,0x8(%rsp)
  0x00007f779d33896b: mov    %r15,(%rsp)
  0x00007f779d33896f: movabs $0x7f77b276249e,%rdi  ;   {external_word}
  0x00007f779d338979: movabs $0x7f779d338919,%rsi  ;   {internal_word}
  0x00007f779d338983: mov    %rsp,%rdx
  0x00007f779d338986: and    $0xfffffffffffffff0,%rsp
  0x00007f779d33898a: callq  0x00007f77b2488460  ;   {runtime_call}
  0x00007f779d33898f: hlt    
[Deopt Handler Code]
  0x00007f779d338990: movabs $0x7f779d338990,%r10  ;   {section_word}
  0x00007f779d33899a: push   %r10
  0x00007f779d33899c: jmpq   0x00007f779d046e40  ;   {runtime_call}
  0x00007f779d3389a1: hlt    
  0x00007f779d3389a2: hlt    
  0x00007f779d3389a3: hlt    
  0x00007f779d3389a4: hlt    
  0x00007f779d3389a5: hlt    
  0x00007f779d3389a6: hlt    
  0x00007f779d3389a7: hlt    
Decoding compiled method 0x00007f779d336ad0:
Code:
[Entry Point]
[Constants]
  # {method} {0x00007f77838755b8} 'ensureCapacityInternal' '(I)V' in 'java/lang/AbstractStringBuilder'
  # this:     rsi:rsi   = 'java/lang/AbstractStringBuilder'
  # parm0:    rdx       = int
  #           [sp+0x50]  (sp of caller)
  0x00007f779d336c40: mov    0x8(%rsi),%r10d
  0x00007f779d336c44: shl    $0x3,%r10
  0x00007f779d336c48: cmp    %rax,%r10
  0x00007f779d336c4b: jne    0x00007f779d045ba0  ;   {runtime_call}
  0x00007f779d336c51: nopl   0x0(%rax,%rax,1)
  0x00007f779d336c59: nopl   0x0(%rax)
[Verified Entry Point]
  0x00007f779d336c60: mov    %eax,-0x14000(%rsp)
  0x00007f779d336c67: push   %rbp
  0x00007f779d336c68: sub    $0x40,%rsp
  0x00007f779d336c6c: movabs $0x7f7783a06e28,%rdi  ;   {metadata(method data for {method} {0x00007f77838755b8} 'ensureCapacityInternal' '(I)V' in 'java/lang/AbstractStringBuilder')}
  0x00007f779d336c76: mov    0xdc(%rdi),%ebx
  0x00007f779d336c7c: add    $0x8,%ebx
  0x00007f779d336c7f: mov    %ebx,0xdc(%rdi)
  0x00007f779d336c85: movabs $0x7f77838755b8,%rdi  ;   {metadata({method} {0x00007f77838755b8} 'ensureCapacityInternal' '(I)V' in 'java/lang/AbstractStringBuilder')}
  0x00007f779d336c8f: and    $0x1ff8,%ebx
  0x00007f779d336c95: cmp    $0x0,%ebx
  0x00007f779d336c98: je     0x00007f779d336d62  ;*iload_1
                                                ; - java.lang.AbstractStringBuilder::ensureCapacityInternal@0 (line 123)

  0x00007f779d336c9e: mov    0x10(%rsi),%edi
  0x00007f779d336ca1: shl    $0x3,%rdi          ;*getfield value
                                                ; - java.lang.AbstractStringBuilder::ensureCapacityInternal@2 (line 123)

  0x00007f779d336ca5: mov    0xc(%rdi),%ebx     ;*arraylength
                                                ; - java.lang.AbstractStringBuilder::ensureCapacityInternal@5 (line 123)
                                                ; implicit exception: dispatches to 0x00007f779d336d79
  0x00007f779d336ca8: mov    %rdx,%rax
  0x00007f779d336cab: sub    %ebx,%eax
  0x00007f779d336cad: cmp    $0x0,%eax
  0x00007f779d336cb0: movabs $0x7f7783a06e28,%rbx  ;   {metadata(method data for {method} {0x00007f77838755b8} 'ensureCapacityInternal' '(I)V' in 'java/lang/AbstractStringBuilder')}
  0x00007f779d336cba: movabs $0x108,%rax
  0x00007f779d336cc4: jle    0x00007f779d336cd4
  0x00007f779d336cca: movabs $0x118,%rax
  0x00007f779d336cd4: mov    (%rbx,%rax,1),%rcx
  0x00007f779d336cd8: lea    0x1(%rcx),%rcx
  0x00007f779d336cdc: mov    %rcx,(%rbx,%rax,1)
  0x00007f779d336ce0: jle    0x00007f779d336d56  ;*ifle
                                                ; - java.lang.AbstractStringBuilder::ensureCapacityInternal@7 (line 123)

  0x00007f779d336ce6: mov    %rdi,0x28(%rsp)
  0x00007f779d336ceb: mov    %rsi,%rbx
  0x00007f779d336cee: movabs $0x7f7783a06e28,%rax  ;   {metadata(method data for {method} {0x00007f77838755b8} 'ensureCapacityInternal' '(I)V' in 'java/lang/AbstractStringBuilder')}
  0x00007f779d336cf8: addq   $0x1,0x128(%rax)
  0x00007f779d336d00: mov    %rsi,%rbx
  0x00007f779d336d03: mov    %rbx,%rsi          ;*invokespecial newCapacity
                                                ; - java.lang.AbstractStringBuilder::ensureCapacityInternal@17 (line 125)

  0x00007f779d336d06: mov    %rbx,0x30(%rsp)
  0x00007f779d336d0b: nop
  0x00007f779d336d0c: nop
  0x00007f779d336d0d: nop
  0x00007f779d336d0e: nop
  0x00007f779d336d0f: callq  0x00007f779d045de0  ; OopMap{[48]=Oop [40]=Oop off=212}
                                                ;*invokespecial newCapacity
                                                ; - java.lang.AbstractStringBuilder::ensureCapacityInternal@17 (line 125)
                                                ;   {optimized virtual_call}
  0x00007f779d336d14: movabs $0x7f7783a06e28,%rsi  ;   {metadata(method data for {method} {0x00007f77838755b8} 'ensureCapacityInternal' '(I)V' in 'java/lang/AbstractStringBuilder')}
  0x00007f779d336d1e: addq   $0x1,0x138(%rsi)
  0x00007f779d336d26: mov    0x28(%rsp),%rsi
  0x00007f779d336d2b: mov    %rax,%rdx          ;*invokestatic copyOf
                                                ; - java.lang.AbstractStringBuilder::ensureCapacityInternal@20 (line 124)

  0x00007f779d336d2e: nop
  0x00007f779d336d2f: callq  0x00007f779d046260  ; OopMap{[48]=Oop off=244}
                                                ;*invokestatic copyOf
                                                ; - java.lang.AbstractStringBuilder::ensureCapacityInternal@20 (line 124)
                                                ;   {static_call}
  0x00007f779d336d34: mov    0x30(%rsp),%rsi
  0x00007f779d336d39: mov    %rax,%r10
  0x00007f779d336d3c: shr    $0x3,%r10
  0x00007f779d336d40: mov    %r10d,0x10(%rsi)
  0x00007f779d336d44: shr    $0x9,%rsi
  0x00007f779d336d48: movabs $0x7f77991ff000,%rdi
  0x00007f779d336d52: movb   $0x0,(%rsi,%rdi,1)  ;*putfield value
                                                ; - java.lang.AbstractStringBuilder::ensureCapacityInternal@23 (line 124)

  0x00007f779d336d56: add    $0x40,%rsp
  0x00007f779d336d5a: pop    %rbp
  0x00007f779d336d5b: test   %eax,0x1593d39f(%rip)        # 0x00007f77b2c74100
                                                ;   {poll_return}
  0x00007f779d336d61: retq   
  0x00007f779d336d62: mov    %rdi,0x8(%rsp)
  0x00007f779d336d67: movq   $0xffffffffffffffff,(%rsp)
  0x00007f779d336d6f: callq  0x00007f779d339320  ; OopMap{rsi=Oop off=308}
                                                ;*synchronization entry
                                                ; - java.lang.AbstractStringBuilder::ensureCapacityInternal@-1 (line 123)
                                                ;   {runtime_call}
  0x00007f779d336d74: jmpq   0x00007f779d336c9e
  0x00007f779d336d79: callq  0x00007f779d333ec0  ; OopMap{rsi=Oop rdi=Oop off=318}
                                                ;*arraylength
                                                ; - java.lang.AbstractStringBuilder::ensureCapacityInternal@5 (line 123)
                                                ;   {runtime_call}
  0x00007f779d336d7e: nop
  0x00007f779d336d7f: nop
  0x00007f779d336d80: mov    0x300(%r15),%rax
  0x00007f779d336d87: movabs $0x0,%r10
  0x00007f779d336d91: mov    %r10,0x300(%r15)
  0x00007f779d336d98: movabs $0x0,%r10
  0x00007f779d336da2: mov    %r10,0x308(%r15)
  0x00007f779d336da9: add    $0x40,%rsp
  0x00007f779d336dad: pop    %rbp
  0x00007f779d336dae: jmpq   0x00007f779d0700a0  ;   {runtime_call}
  0x00007f779d336db3: hlt    
  0x00007f779d336db4: hlt    
  0x00007f779d336db5: hlt    
  0x00007f779d336db6: hlt    
  0x00007f779d336db7: hlt    
  0x00007f779d336db8: hlt    
  0x00007f779d336db9: hlt    
  0x00007f779d336dba: hlt    
  0x00007f779d336dbb: hlt    
  0x00007f779d336dbc: hlt    
  0x00007f779d336dbd: hlt    
  0x00007f779d336dbe: hlt    
  0x00007f779d336dbf: hlt    
[Stub Code]
  0x00007f779d336dc0: nop                       ;   {no_reloc}
  0x00007f779d336dc1: nop
  0x00007f779d336dc2: nop
  0x00007f779d336dc3: nop
  0x00007f779d336dc4: nop
  0x00007f779d336dc5: movabs $0x0,%rbx          ;   {static_stub}
  0x00007f779d336dcf: jmpq   0x00007f779d336dcf  ;   {runtime_call}
  0x00007f779d336dd4: nop
  0x00007f779d336dd5: movabs $0x0,%rbx          ;   {static_stub}
  0x00007f779d336ddf: jmpq   0x00007f779d336ddf  ;   {runtime_call}
[Exception Handler]
  0x00007f779d336de4: callq  0x00007f779d3317a0  ;   {runtime_call}
  0x00007f779d336de9: mov    %rsp,-0x28(%rsp)
  0x00007f779d336dee: sub    $0x80,%rsp
  0x00007f779d336df5: mov    %rax,0x78(%rsp)
  0x00007f779d336dfa: mov    %rcx,0x70(%rsp)
  0x00007f779d336dff: mov    %rdx,0x68(%rsp)
  0x00007f779d336e04: mov    %rbx,0x60(%rsp)
  0x00007f779d336e09: mov    %rbp,0x50(%rsp)
  0x00007f779d336e0e: mov    %rsi,0x48(%rsp)
  0x00007f779d336e13: mov    %rdi,0x40(%rsp)
  0x00007f779d336e18: mov    %r8,0x38(%rsp)
  0x00007f779d336e1d: mov    %r9,0x30(%rsp)
  0x00007f779d336e22: mov    %r10,0x28(%rsp)
  0x00007f779d336e27: mov    %r11,0x20(%rsp)
  0x00007f779d336e2c: mov    %r12,0x18(%rsp)
  0x00007f779d336e31: mov    %r13,0x10(%rsp)
  0x00007f779d336e36: mov    %r14,0x8(%rsp)
  0x00007f779d336e3b: mov    %r15,(%rsp)
  0x00007f779d336e3f: movabs $0x7f77b276249e,%rdi  ;   {external_word}
  0x00007f779d336e49: movabs $0x7f779d336de9,%rsi  ;   {internal_word}
  0x00007f779d336e53: mov    %rsp,%rdx
  0x00007f779d336e56: and    $0xfffffffffffffff0,%rsp
  0x00007f779d336e5a: callq  0x00007f77b2488460  ;   {runtime_call}
  0x00007f779d336e5f: hlt    
[Deopt Handler Code]
  0x00007f779d336e60: movabs $0x7f779d336e60,%r10  ;   {section_word}
  0x00007f779d336e6a: push   %r10
  0x00007f779d336e6c: jmpq   0x00007f779d046e40  ;   {runtime_call}
  0x00007f779d336e71: hlt    
  0x00007f779d336e72: hlt    
  0x00007f779d336e73: hlt    
  0x00007f779d336e74: hlt    
  0x00007f779d336e75: hlt    
  0x00007f779d336e76: hlt    
  0x00007f779d336e77: hlt    
Decoding compiled method 0x00007f779d3367d0:
Code:
[Entry Point]
[Constants]
  # {method} {0x00007f77839cba38} 'getSnapshotTransformerList' '()[Lsun/instrument/TransformerManager$TransformerInfo;' in 'sun/instrument/TransformerManager'
  #           [sp+0x40]  (sp of caller)
  0x00007f779d336920: mov    0x8(%rsi),%r10d
  0x00007f779d336924: shl    $0x3,%r10
  0x00007f779d336928: cmp    %rax,%r10
  0x00007f779d33692b: jne    0x00007f779d045ba0  ;   {runtime_call}
  0x00007f779d336931: nopl   0x0(%rax,%rax,1)
  0x00007f779d336939: nopl   0x0(%rax)
[Verified Entry Point]
  0x00007f779d336940: mov    %eax,-0x14000(%rsp)
  0x00007f779d336947: push   %rbp
  0x00007f779d336948: sub    $0x30,%rsp         ;*aload_0
                                                ; - sun.instrument.TransformerManager::getSnapshotTransformerList@0 (line 166)

  0x00007f779d33694c: mov    0x10(%rsi),%eax
  0x00007f779d33694f: shl    $0x3,%rax          ;*getfield mTransformerList
                                                ; - sun.instrument.TransformerManager::getSnapshotTransformerList@1 (line 166)

  0x00007f779d336953: add    $0x30,%rsp
  0x00007f779d336957: pop    %rbp
  0x00007f779d336958: test   %eax,0x1593d7a2(%rip)        # 0x00007f77b2c74100
                                                ;   {poll_return}
  0x00007f779d33695e: retq   
  0x00007f779d33695f: nop
  0x00007f779d336960: nop
  0x00007f779d336961: mov    0x300(%r15),%rax
  0x00007f779d336968: movabs $0x0,%r10
  0x00007f779d336972: mov    %r10,0x300(%r15)
  0x00007f779d336979: movabs $0x0,%r10
  0x00007f779d336983: mov    %r10,0x308(%r15)
  0x00007f779d33698a: add    $0x30,%rsp
  0x00007f779d33698e: pop    %rbp
  0x00007f779d33698f: jmpq   0x00007f779d0700a0  ;   {runtime_call}
  0x00007f779d336994: hlt    
  0x00007f779d336995: hlt    
  0x00007f779d336996: hlt    
  0x00007f779d336997: hlt    
  0x00007f779d336998: hlt    
  0x00007f779d336999: hlt    
  0x00007f779d33699a: hlt    
  0x00007f779d33699b: hlt    
  0x00007f779d33699c: hlt    
  0x00007f779d33699d: hlt    
  0x00007f779d33699e: hlt    
  0x00007f779d33699f: hlt    
[Exception Handler]
[Stub Code]
  0x00007f779d3369a0: callq  0x00007f779d3317a0  ;   {no_reloc}
  0x00007f779d3369a5: mov    %rsp,-0x28(%rsp)
  0x00007f779d3369aa: sub    $0x80,%rsp
  0x00007f779d3369b1: mov    %rax,0x78(%rsp)
  0x00007f779d3369b6: mov    %rcx,0x70(%rsp)
  0x00007f779d3369bb: mov    %rdx,0x68(%rsp)
  0x00007f779d3369c0: mov    %rbx,0x60(%rsp)
  0x00007f779d3369c5: mov    %rbp,0x50(%rsp)
  0x00007f779d3369ca: mov    %rsi,0x48(%rsp)
  0x00007f779d3369cf: mov    %rdi,0x40(%rsp)
  0x00007f779d3369d4: mov    %r8,0x38(%rsp)
  0x00007f779d3369d9: mov    %r9,0x30(%rsp)
  0x00007f779d3369de: mov    %r10,0x28(%rsp)
  0x00007f779d3369e3: mov    %r11,0x20(%rsp)
  0x00007f779d3369e8: mov    %r12,0x18(%rsp)
  0x00007f779d3369ed: mov    %r13,0x10(%rsp)
  0x00007f779d3369f2: mov    %r14,0x8(%rsp)
  0x00007f779d3369f7: mov    %r15,(%rsp)
  0x00007f779d3369fb: movabs $0x7f77b276249e,%rdi  ;   {external_word}
  0x00007f779d336a05: movabs $0x7f779d3369a5,%rsi  ;   {internal_word}
  0x00007f779d336a0f: mov    %rsp,%rdx
  0x00007f779d336a12: and    $0xfffffffffffffff0,%rsp
  0x00007f779d336a16: callq  0x00007f77b2488460  ;   {runtime_call}
  0x00007f779d336a1b: hlt    
[Deopt Handler Code]
  0x00007f779d336a1c: movabs $0x7f779d336a1c,%r10  ;   {section_word}
  0x00007f779d336a26: push   %r10
  0x00007f779d336a28: jmpq   0x00007f779d046e40  ;   {runtime_call}
  0x00007f779d336a2d: hlt    
  0x00007f779d336a2e: hlt    
  0x00007f779d336a2f: hlt    
Decoding compiled method 0x00007f779d336290:
Code:
[Entry Point]
[Verified Entry Point]
[Constants]
  # {method} {0x00007f77838ea5c0} 'hash' '(Ljava/lang/Object;)I' in 'java/util/HashMap'
  # parm0:    rsi:rsi   = 'java/lang/Object'
  #           [sp+0x40]  (sp of caller)
  0x00007f779d336400: mov    %eax,-0x14000(%rsp)
  0x00007f779d336407: push   %rbp
  0x00007f779d336408: sub    $0x30,%rsp
  0x00007f779d33640c: movabs $0x7f7783a7fa88,%rdi  ;   {metadata(method data for {method} {0x00007f77838ea5c0} 'hash' '(Ljava/lang/Object;)I' in 'java/util/HashMap')}
  0x00007f779d336416: mov    0xdc(%rdi),%ebx
  0x00007f779d33641c: add    $0x8,%ebx
  0x00007f779d33641f: mov    %ebx,0xdc(%rdi)
  0x00007f779d336425: movabs $0x7f77838ea5c0,%rdi  ;   {metadata({method} {0x00007f77838ea5c0} 'hash' '(Ljava/lang/Object;)I' in 'java/util/HashMap')}
  0x00007f779d33642f: and    $0x1ff8,%ebx
  0x00007f779d336435: cmp    $0x0,%ebx
  0x00007f779d336438: je     0x00007f779d33654c  ;*aload_0
                                                ; - java.util.HashMap::hash@0 (line 339)

  0x00007f779d33643e: cmp    $0x0,%rsi
  0x00007f779d336442: movabs $0x7f7783a7fa88,%rdi  ;   {metadata(method data for {method} {0x00007f77838ea5c0} 'hash' '(Ljava/lang/Object;)I' in 'java/util/HashMap')}
  0x00007f779d33644c: movabs $0x108,%rbx
  0x00007f779d336456: jne    0x00007f779d336466
  0x00007f779d33645c: movabs $0x118,%rbx
  0x00007f779d336466: mov    (%rdi,%rbx,1),%rax
  0x00007f779d33646a: lea    0x1(%rax),%rax
  0x00007f779d33646e: mov    %rax,(%rdi,%rbx,1)
  0x00007f779d336472: jne    0x00007f779d336492  ;*ifnonnull
                                                ; - java.util.HashMap::hash@1 (line 339)

  0x00007f779d336478: movabs $0x7f7783a7fa88,%rsi  ;   {metadata(method data for {method} {0x00007f77838ea5c0} 'hash' '(Ljava/lang/Object;)I' in 'java/util/HashMap')}
  0x00007f779d336482: incl   0x128(%rsi)
  0x00007f779d336488: mov    $0x0,%esi
  0x00007f779d33648d: jmpq   0x00007f779d33653d  ;*goto
                                                ; - java.util.HashMap::hash@5 (line 339)

  0x00007f779d336492: cmp    (%rsi),%rax        ;*invokevirtual hashCode
                                                ; - java.util.HashMap::hash@9 (line 339)
                                                ; implicit exception: dispatches to 0x00007f779d336563
  0x00007f779d336495: mov    %rsi,%rdi
  0x00007f779d336498: movabs $0x7f7783a7fa88,%rbx  ;   {metadata(method data for {method} {0x00007f77838ea5c0} 'hash' '(Ljava/lang/Object;)I' in 'java/util/HashMap')}
  0x00007f779d3364a2: mov    0x8(%rdi),%edi
  0x00007f779d3364a5: shl    $0x3,%rdi
  0x00007f779d3364a9: cmp    0x148(%rbx),%rdi
  0x00007f779d3364b0: jne    0x00007f779d3364bf
  0x00007f779d3364b2: addq   $0x1,0x150(%rbx)
  0x00007f779d3364ba: jmpq   0x00007f779d336525
  0x00007f779d3364bf: cmp    0x158(%rbx),%rdi
  0x00007f779d3364c6: jne    0x00007f779d3364d5
  0x00007f779d3364c8: addq   $0x1,0x160(%rbx)
  0x00007f779d3364d0: jmpq   0x00007f779d336525
  0x00007f779d3364d5: cmpq   $0x0,0x148(%rbx)
  0x00007f779d3364e0: jne    0x00007f779d3364f9
  0x00007f779d3364e2: mov    %rdi,0x148(%rbx)
  0x00007f779d3364e9: movq   $0x1,0x150(%rbx)
  0x00007f779d3364f4: jmpq   0x00007f779d336525
  0x00007f779d3364f9: cmpq   $0x0,0x158(%rbx)
  0x00007f779d336504: jne    0x00007f779d33651d
  0x00007f779d336506: mov    %rdi,0x158(%rbx)
  0x00007f779d33650d: movq   $0x1,0x160(%rbx)
  0x00007f779d336518: jmpq   0x00007f779d336525
  0x00007f779d33651d: addq   $0x1,0x140(%rbx)
  0x00007f779d336525: movabs $0xffffffffffffffff,%rax
  0x00007f779d33652f: callq  0x00007f779d046020  ; OopMap{off=308}
                                                ;*invokevirtual hashCode
                                                ; - java.util.HashMap::hash@9 (line 339)
                                                ;   {virtual_call}
  0x00007f779d336534: mov    %rax,%rsi
  0x00007f779d336537: shr    $0x10,%esi
  0x00007f779d33653a: xor    %rax,%rsi
  0x00007f779d33653d: mov    %rsi,%rax
  0x00007f779d336540: add    $0x30,%rsp
  0x00007f779d336544: pop    %rbp
  0x00007f779d336545: test   %eax,0x1593dbb5(%rip)        # 0x00007f77b2c74100
                                                ;   {poll_return}
  0x00007f779d33654b: retq   
  0x00007f779d33654c: mov    %rdi,0x8(%rsp)
  0x00007f779d336551: movq   $0xffffffffffffffff,(%rsp)
  0x00007f779d336559: callq  0x00007f779d339320  ; OopMap{rsi=Oop off=350}
                                                ;*synchronization entry
                                                ; - java.util.HashMap::hash@-1 (line 339)
                                                ;   {runtime_call}
  0x00007f779d33655e: jmpq   0x00007f779d33643e
  0x00007f779d336563: callq  0x00007f779d333ec0  ; OopMap{rsi=Oop off=360}
                                                ;*invokevirtual hashCode
                                                ; - java.util.HashMap::hash@9 (line 339)
                                                ;   {runtime_call}
  0x00007f779d336568: nop
  0x00007f779d336569: nop
  0x00007f779d33656a: mov    0x300(%r15),%rax
  0x00007f779d336571: movabs $0x0,%r10
  0x00007f779d33657b: mov    %r10,0x300(%r15)
  0x00007f779d336582: movabs $0x0,%r10
  0x00007f779d33658c: mov    %r10,0x308(%r15)
  0x00007f779d336593: add    $0x30,%rsp
  0x00007f779d336597: pop    %rbp
  0x00007f779d336598: jmpq   0x00007f779d0700a0  ;   {runtime_call}
  0x00007f779d33659d: hlt    
  0x00007f779d33659e: hlt    
  0x00007f779d33659f: hlt    
[Stub Code]
  0x00007f779d3365a0: nop                       ;   {no_reloc}
  0x00007f779d3365a1: nop
  0x00007f779d3365a2: nop
  0x00007f779d3365a3: nop
  0x00007f779d3365a4: nop
  0x00007f779d3365a5: movabs $0x0,%rbx          ;   {static_stub}
  0x00007f779d3365af: jmpq   0x00007f779d3365af  ;   {runtime_call}
[Exception Handler]
  0x00007f779d3365b4: callq  0x00007f779d3317a0  ;   {runtime_call}
  0x00007f779d3365b9: mov    %rsp,-0x28(%rsp)
  0x00007f779d3365be: sub    $0x80,%rsp
  0x00007f779d3365c5: mov    %rax,0x78(%rsp)
  0x00007f779d3365ca: mov    %rcx,0x70(%rsp)
  0x00007f779d3365cf: mov    %rdx,0x68(%rsp)
  0x00007f779d3365d4: mov    %rbx,0x60(%rsp)
  0x00007f779d3365d9: mov    %rbp,0x50(%rsp)
  0x00007f779d3365de: mov    %rsi,0x48(%rsp)
  0x00007f779d3365e3: mov    %rdi,0x40(%rsp)
  0x00007f779d3365e8: mov    %r8,0x38(%rsp)
  0x00007f779d3365ed: mov    %r9,0x30(%rsp)
  0x00007f779d3365f2: mov    %r10,0x28(%rsp)
  0x00007f779d3365f7: mov    %r11,0x20(%rsp)
  0x00007f779d3365fc: mov    %r12,0x18(%rsp)
  0x00007f779d336601: mov    %r13,0x10(%rsp)
  0x00007f779d336606: mov    %r14,0x8(%rsp)
  0x00007f779d33660b: mov    %r15,(%rsp)
  0x00007f779d33660f: movabs $0x7f77b276249e,%rdi  ;   {external_word}
  0x00007f779d336619: movabs $0x7f779d3365b9,%rsi  ;   {internal_word}
  0x00007f779d336623: mov    %rsp,%rdx
  0x00007f779d336626: and    $0xfffffffffffffff0,%rsp
  0x00007f779d33662a: callq  0x00007f77b2488460  ;   {runtime_call}
  0x00007f779d33662f: hlt    
[Deopt Handler Code]
  0x00007f779d336630: movabs $0x7f779d336630,%r10  ;   {section_word}
  0x00007f779d33663a: push   %r10
  0x00007f779d33663c: jmpq   0x00007f779d046e40  ;   {runtime_call}
  0x00007f779d336641: hlt    
  0x00007f779d336642: hlt    
  0x00007f779d336643: hlt    
  0x00007f779d336644: hlt    
  0x00007f779d336645: hlt    
  0x00007f779d336646: hlt    
  0x00007f779d336647: hlt    
Decoding compiled method 0x00007f779d33a550:
Code:
[Entry Point]
[Constants]
  # {method} {0x00007f7783805000} 'hashCode' '()I' in 'java/lang/String'
  #           [sp+0x40]  (sp of caller)
  0x00007f779d33a6c0: mov    0x8(%rsi),%r10d
  0x00007f779d33a6c4: shl    $0x3,%r10
  0x00007f779d33a6c8: cmp    %rax,%r10
  0x00007f779d33a6cb: jne    0x00007f779d045ba0  ;   {runtime_call}
  0x00007f779d33a6d1: nopl   0x0(%rax,%rax,1)
  0x00007f779d33a6d9: nopl   0x0(%rax)
[Verified Entry Point]
  0x00007f779d33a6e0: mov    %eax,-0x14000(%rsp)
  0x00007f779d33a6e7: push   %rbp
  0x00007f779d33a6e8: sub    $0x30,%rsp
  0x00007f779d33a6ec: movabs $0x7f77839c49c0,%rax  ;   {metadata(method data for {method} {0x00007f7783805000} 'hashCode' '()I' in 'java/lang/String')}
  0x00007f779d33a6f6: mov    0xdc(%rax),%edi
  0x00007f779d33a6fc: add    $0x8,%edi
  0x00007f779d33a6ff: mov    %edi,0xdc(%rax)
  0x00007f779d33a705: movabs $0x7f7783805000,%rax  ;   {metadata({method} {0x00007f7783805000} 'hashCode' '()I' in 'java/lang/String')}
  0x00007f779d33a70f: and    $0x1ff8,%edi
  0x00007f779d33a715: cmp    $0x0,%edi
  0x00007f779d33a718: je     0x00007f779d33a851  ;*aload_0
                                                ; - java.lang.String::hashCode@0 (line 1466)

  0x00007f779d33a71e: mov    0x10(%rsi),%eax    ;*getfield hash
                                                ; - java.lang.String::hashCode@1 (line 1466)

  0x00007f779d33a721: cmp    $0x0,%eax
  0x00007f779d33a724: movabs $0x7f77839c49c0,%rdi  ;   {metadata(method data for {method} {0x00007f7783805000} 'hashCode' '()I' in 'java/lang/String')}
  0x00007f779d33a72e: movabs $0x108,%rbx
  0x00007f779d33a738: jne    0x00007f779d33a748
  0x00007f779d33a73e: movabs $0x118,%rbx
  0x00007f779d33a748: mov    (%rdi,%rbx,1),%rdx
  0x00007f779d33a74c: lea    0x1(%rdx),%rdx
  0x00007f779d33a750: mov    %rdx,(%rdi,%rbx,1)
  0x00007f779d33a754: jne    0x00007f779d33a845  ;*ifne
                                                ; - java.lang.String::hashCode@6 (line 1467)

  0x00007f779d33a75a: mov    0xc(%rsi),%edi
  0x00007f779d33a75d: shl    $0x3,%rdi          ;*getfield value
                                                ; - java.lang.String::hashCode@10 (line 1467)

  0x00007f779d33a761: mov    0xc(%rdi),%ebx     ;*arraylength
                                                ; - java.lang.String::hashCode@13 (line 1467)
                                                ; implicit exception: dispatches to 0x00007f779d33a868
  0x00007f779d33a764: cmp    $0x0,%ebx
  0x00007f779d33a767: movabs $0x7f77839c49c0,%rdx  ;   {metadata(method data for {method} {0x00007f7783805000} 'hashCode' '()I' in 'java/lang/String')}
  0x00007f779d33a771: movabs $0x128,%rcx
  0x00007f779d33a77b: jle    0x00007f779d33a78b
  0x00007f779d33a781: movabs $0x138,%rcx
  0x00007f779d33a78b: mov    (%rdx,%rcx,1),%r8
  0x00007f779d33a78f: lea    0x1(%r8),%r8
  0x00007f779d33a793: mov    %r8,(%rdx,%rcx,1)
  0x00007f779d33a797: jle    0x00007f779d33a845  ;*ifle
                                                ; - java.lang.String::hashCode@14 (line 1467)

  0x00007f779d33a79d: mov    $0x0,%edx
  0x00007f779d33a7a2: jmpq   0x00007f779d33a80a  ;*iload_3
                                                ; - java.lang.String::hashCode@24 (line 1470)

  0x00007f779d33a7a7: nop
  0x00007f779d33a7a8: movslq %edx,%rcx
  0x00007f779d33a7ab: movzwl 0x10(%rdi,%rcx,2),%ecx  ;*caload
                                                ; - java.lang.String::hashCode@39 (line 1471)

  0x00007f779d33a7b0: mov    %rax,%r8
  0x00007f779d33a7b3: shl    $0x5,%eax
  0x00007f779d33a7b6: sub    %r8d,%eax
  0x00007f779d33a7b9: add    %ecx,%eax
  0x00007f779d33a7bb: inc    %edx
  0x00007f779d33a7bd: movabs $0x7f77839c49c0,%rcx  ;   {metadata(method data for {method} {0x00007f7783805000} 'hashCode' '()I' in 'java/lang/String')}
  0x00007f779d33a7c7: mov    0xe0(%rcx),%r8d
  0x00007f779d33a7ce: add    $0x8,%r8d
  0x00007f779d33a7d2: mov    %r8d,0xe0(%rcx)
  0x00007f779d33a7d9: movabs $0x7f7783805000,%rcx  ;   {metadata({method} {0x00007f7783805000} 'hashCode' '()I' in 'java/lang/String')}
  0x00007f779d33a7e3: and    $0xfff8,%r8d
  0x00007f779d33a7ea: cmp    $0x0,%r8d
  0x00007f779d33a7ee: je     0x00007f779d33a86d  ; OopMap{rdi=Oop rsi=Oop off=308}
                                                ;*goto
                                                ; - java.lang.String::hashCode@45 (line 1470)

  0x00007f779d33a7f4: test   %eax,0x15939906(%rip)        # 0x00007f77b2c74100
                                                ;   {poll}
  0x00007f779d33a7fa: movabs $0x7f77839c49c0,%rcx  ;   {metadata(method data for {method} {0x00007f7783805000} 'hashCode' '()I' in 'java/lang/String')}
  0x00007f779d33a804: incl   0x168(%rcx)        ;*goto
                                                ; - java.lang.String::hashCode@45 (line 1470)

  0x00007f779d33a80a: cmp    %ebx,%edx
  0x00007f779d33a80c: movabs $0x7f77839c49c0,%rcx  ;   {metadata(method data for {method} {0x00007f7783805000} 'hashCode' '()I' in 'java/lang/String')}
  0x00007f779d33a816: movabs $0x148,%r8
  0x00007f779d33a820: jge    0x00007f779d33a830
  0x00007f779d33a826: movabs $0x158,%r8
  0x00007f779d33a830: mov    (%rcx,%r8,1),%r9
  0x00007f779d33a834: lea    0x1(%r9),%r9
  0x00007f779d33a838: mov    %r9,(%rcx,%r8,1)
  0x00007f779d33a83c: jl     0x00007f779d33a7a8  ;*if_icmpge
                                                ; - java.lang.String::hashCode@30 (line 1470)

  0x00007f779d33a842: mov    %eax,0x10(%rsi)    ;*putfield hash
                                                ; - java.lang.String::hashCode@50 (line 1473)

  0x00007f779d33a845: add    $0x30,%rsp
  0x00007f779d33a849: pop    %rbp
  0x00007f779d33a84a: test   %eax,0x159398b0(%rip)        # 0x00007f77b2c74100
                                                ;   {poll_return}
  0x00007f779d33a850: retq   
  0x00007f779d33a851: mov    %rax,0x8(%rsp)
  0x00007f779d33a856: movq   $0xffffffffffffffff,(%rsp)
  0x00007f779d33a85e: callq  0x00007f779d339320  ; OopMap{rsi=Oop off=419}
                                                ;*synchronization entry
                                                ; - java.lang.String::hashCode@-1 (line 1466)
                                                ;   {runtime_call}
  0x00007f779d33a863: jmpq   0x00007f779d33a71e
  0x00007f779d33a868: callq  0x00007f779d333ec0  ; OopMap{rsi=Oop rdi=Oop off=429}
                                                ;*arraylength
                                                ; - java.lang.String::hashCode@13 (line 1467)
                                                ;   {runtime_call}
  0x00007f779d33a86d: mov    %rcx,0x8(%rsp)
  0x00007f779d33a872: movq   $0x2d,(%rsp)
  0x00007f779d33a87a: callq  0x00007f779d339320  ; OopMap{rdi=Oop rsi=Oop off=447}
                                                ;*goto
                                                ; - java.lang.String::hashCode@45 (line 1470)
                                                ;   {runtime_call}
  0x00007f779d33a87f: jmpq   0x00007f779d33a7f4
  0x00007f779d33a884: nop
  0x00007f779d33a885: nop
  0x00007f779d33a886: mov    0x300(%r15),%rax
  0x00007f779d33a88d: movabs $0x0,%r10
  0x00007f779d33a897: mov    %r10,0x300(%r15)
  0x00007f779d33a89e: movabs $0x0,%r10
  0x00007f779d33a8a8: mov    %r10,0x308(%r15)
  0x00007f779d33a8af: add    $0x30,%rsp
  0x00007f779d33a8b3: pop    %rbp
  0x00007f779d33a8b4: jmpq   0x00007f779d0700a0  ;   {runtime_call}
  0x00007f779d33a8b9: hlt    
  0x00007f779d33a8ba: hlt    
  0x00007f779d33a8bb: hlt    
  0x00007f779d33a8bc: hlt    
  0x00007f779d33a8bd: hlt    
  0x00007f779d33a8be: hlt    
  0x00007f779d33a8bf: hlt    
[Exception Handler]
[Stub Code]
  0x00007f779d33a8c0: callq  0x00007f779d3317a0  ;   {no_reloc}
  0x00007f779d33a8c5: mov    %rsp,-0x28(%rsp)
  0x00007f779d33a8ca: sub    $0x80,%rsp
  0x00007f779d33a8d1: mov    %rax,0x78(%rsp)
  0x00007f779d33a8d6: mov    %rcx,0x70(%rsp)
  0x00007f779d33a8db: mov    %rdx,0x68(%rsp)
  0x00007f779d33a8e0: mov    %rbx,0x60(%rsp)
  0x00007f779d33a8e5: mov    %rbp,0x50(%rsp)
  0x00007f779d33a8ea: mov    %rsi,0x48(%rsp)
  0x00007f779d33a8ef: mov    %rdi,0x40(%rsp)
  0x00007f779d33a8f4: mov    %r8,0x38(%rsp)
  0x00007f779d33a8f9: mov    %r9,0x30(%rsp)
  0x00007f779d33a8fe: mov    %r10,0x28(%rsp)
  0x00007f779d33a903: mov    %r11,0x20(%rsp)
  0x00007f779d33a908: mov    %r12,0x18(%rsp)
  0x00007f779d33a90d: mov    %r13,0x10(%rsp)
  0x00007f779d33a912: mov    %r14,0x8(%rsp)
  0x00007f779d33a917: mov    %r15,(%rsp)
  0x00007f779d33a91b: movabs $0x7f77b276249e,%rdi  ;   {external_word}
  0x00007f779d33a925: movabs $0x7f779d33a8c5,%rsi  ;   {internal_word}
  0x00007f779d33a92f: mov    %rsp,%rdx
  0x00007f779d33a932: and    $0xfffffffffffffff0,%rsp
  0x00007f779d33a936: callq  0x00007f77b2488460  ;   {runtime_call}
  0x00007f779d33a93b: hlt    
[Deopt Handler Code]
  0x00007f779d33a93c: movabs $0x7f779d33a93c,%r10  ;   {section_word}
  0x00007f779d33a946: push   %r10
  0x00007f779d33a948: jmpq   0x00007f779d046e40  ;   {runtime_call}
  0x00007f779d33a94d: hlt    
  0x00007f779d33a94e: hlt    
  0x00007f779d33a94f: hlt    
Decoding compiled method 0x00007f779d345dd0:
Code:
[Entry Point]
[Constants]
  # {method} {0x00007f7783803c60} 'length' '()I' in 'java/lang/String'
  #           [sp+0x40]  (sp of caller)
  0x00007f779d345f40: mov    0x8(%rsi),%r10d
  0x00007f779d345f44: shl    $0x3,%r10
  0x00007f779d345f48: cmp    %rax,%r10
  0x00007f779d345f4b: jne    0x00007f779d045ba0  ;   {runtime_call}
  0x00007f779d345f51: nopl   0x0(%rax,%rax,1)
  0x00007f779d345f59: nopl   0x0(%rax)
[Verified Entry Point]
  0x00007f779d345f60: mov    %eax,-0x14000(%rsp)
  0x00007f779d345f67: push   %rbp
  0x00007f779d345f68: sub    $0x30,%rsp
  0x00007f779d345f6c: movabs $0x7f77839cb0c8,%rax  ;   {metadata(method data for {method} {0x00007f7783803c60} 'length' '()I' in 'java/lang/String')}
  0x00007f779d345f76: mov    0xdc(%rax),%edi
  0x00007f779d345f7c: add    $0x8,%edi
  0x00007f779d345f7f: mov    %edi,0xdc(%rax)
  0x00007f779d345f85: movabs $0x7f7783803c60,%rax  ;   {metadata({method} {0x00007f7783803c60} 'length' '()I' in 'java/lang/String')}
  0x00007f779d345f8f: and    $0x1ff8,%edi
  0x00007f779d345f95: cmp    $0x0,%edi
  0x00007f779d345f98: je     0x00007f779d345fb4  ;*aload_0
                                                ; - java.lang.String::length@0 (line 623)

  0x00007f779d345f9e: mov    0xc(%rsi),%eax
  0x00007f779d345fa1: shl    $0x3,%rax          ;*getfield value
                                                ; - java.lang.String::length@1 (line 623)

  0x00007f779d345fa5: mov    0xc(%rax),%eax     ;*arraylength
                                                ; - java.lang.String::length@4 (line 623)
                                                ; implicit exception: dispatches to 0x00007f779d345fc8
  0x00007f779d345fa8: add    $0x30,%rsp
  0x00007f779d345fac: pop    %rbp
  0x00007f779d345fad: test   %eax,0x1592e14d(%rip)        # 0x00007f77b2c74100
                                                ;   {poll_return}
  0x00007f779d345fb3: retq   
  0x00007f779d345fb4: mov    %rax,0x8(%rsp)
  0x00007f779d345fb9: movq   $0xffffffffffffffff,(%rsp)
  0x00007f779d345fc1: callq  0x00007f779d339320  ; OopMap{rsi=Oop off=134}
                                                ;*synchronization entry
                                                ; - java.lang.String::length@-1 (line 623)
                                                ;   {runtime_call}
  0x00007f779d345fc6: jmp    0x00007f779d345f9e
  0x00007f779d345fc8: callq  0x00007f779d333ec0  ; OopMap{off=141}
                                                ;*arraylength
                                                ; - java.lang.String::length@4 (line 623)
                                                ;   {runtime_call}
  0x00007f779d345fcd: nop
  0x00007f779d345fce: nop
  0x00007f779d345fcf: mov    0x300(%r15),%rax
  0x00007f779d345fd6: movabs $0x0,%r10
  0x00007f779d345fe0: mov    %r10,0x300(%r15)
  0x00007f779d345fe7: movabs $0x0,%r10
  0x00007f779d345ff1: mov    %r10,0x308(%r15)
  0x00007f779d345ff8: add    $0x30,%rsp
  0x00007f779d345ffc: pop    %rbp
  0x00007f779d345ffd: jmpq   0x00007f779d0700a0  ;   {runtime_call}
  0x00007f779d346002: hlt    
  0x00007f779d346003: hlt    
  0x00007f779d346004: hlt    
  0x00007f779d346005: hlt    
  0x00007f779d346006: hlt    
  0x00007f779d346007: hlt    
  0x00007f779d346008: hlt    
  0x00007f779d346009: hlt    
  0x00007f779d34600a: hlt    
  0x00007f779d34600b: hlt    
  0x00007f779d34600c: hlt    
  0x00007f779d34600d: hlt    
  0x00007f779d34600e: hlt    
  0x00007f779d34600f: hlt    
  0x00007f779d346010: hlt    
  0x00007f779d346011: hlt    
  0x00007f779d346012: hlt    
  0x00007f779d346013: hlt    
  0x00007f779d346014: hlt    
  0x00007f779d346015: hlt    
  0x00007f779d346016: hlt    
  0x00007f779d346017: hlt    
  0x00007f779d346018: hlt    
  0x00007f779d346019: hlt    
  0x00007f779d34601a: hlt    
  0x00007f779d34601b: hlt    
  0x00007f779d34601c: hlt    
  0x00007f779d34601d: hlt    
  0x00007f779d34601e: hlt    
  0x00007f779d34601f: hlt    
[Exception Handler]
[Stub Code]
  0x00007f779d346020: callq  0x00007f779d3317a0  ;   {no_reloc}
  0x00007f779d346025: mov    %rsp,-0x28(%rsp)
  0x00007f779d34602a: sub    $0x80,%rsp
  0x00007f779d346031: mov    %rax,0x78(%rsp)
  0x00007f779d346036: mov    %rcx,0x70(%rsp)
  0x00007f779d34603b: mov    %rdx,0x68(%rsp)
  0x00007f779d346040: mov    %rbx,0x60(%rsp)
  0x00007f779d346045: mov    %rbp,0x50(%rsp)
  0x00007f779d34604a: mov    %rsi,0x48(%rsp)
  0x00007f779d34604f: mov    %rdi,0x40(%rsp)
  0x00007f779d346054: mov    %r8,0x38(%rsp)
  0x00007f779d346059: mov    %r9,0x30(%rsp)
  0x00007f779d34605e: mov    %r10,0x28(%rsp)
  0x00007f779d346063: mov    %r11,0x20(%rsp)
  0x00007f779d346068: mov    %r12,0x18(%rsp)
  0x00007f779d34606d: mov    %r13,0x10(%rsp)
  0x00007f779d346072: mov    %r14,0x8(%rsp)
  0x00007f779d346077: mov    %r15,(%rsp)
  0x00007f779d34607b: movabs $0x7f77b276249e,%rdi  ;   {external_word}
  0x00007f779d346085: movabs $0x7f779d346025,%rsi  ;   {internal_word}
  0x00007f779d34608f: mov    %rsp,%rdx
  0x00007f779d346092: and    $0xfffffffffffffff0,%rsp
  0x00007f779d346096: callq  0x00007f77b2488460  ;   {runtime_call}
  0x00007f779d34609b: hlt    
[Deopt Handler Code]
  0x00007f779d34609c: movabs $0x7f779d34609c,%r10  ;   {section_word}
  0x00007f779d3460a6: push   %r10
  0x00007f779d3460a8: jmpq   0x00007f779d046e40  ;   {runtime_call}
  0x00007f779d3460ad: hlt    
  0x00007f779d3460ae: hlt    
  0x00007f779d3460af: hlt    
Decoding compiled method 0x00007f779d33c310:
Code:
[Entry Point]
[Verified Entry Point]
[Constants]
  # {method} {0x00007f77838f70a8} 'min' '(II)I' in 'java/lang/Math'
  # parm0:    rsi       = int
  # parm1:    rdx       = int
  #           [sp+0x40]  (sp of caller)
  0x00007f779d33c480: mov    %eax,-0x14000(%rsp)
  0x00007f779d33c487: push   %rbp
  0x00007f779d33c488: sub    $0x30,%rsp
  0x00007f779d33c48c: movabs $0x7f77839c6ca8,%rax  ;   {metadata(method data for {method} {0x00007f77838f70a8} 'min' '(II)I' in 'java/lang/Math')}
  0x00007f779d33c496: mov    0xdc(%rax),%edi
  0x00007f779d33c49c: add    $0x8,%edi
  0x00007f779d33c49f: mov    %edi,0xdc(%rax)
  0x00007f779d33c4a5: movabs $0x7f77838f70a8,%rax  ;   {metadata({method} {0x00007f77838f70a8} 'min' '(II)I' in 'java/lang/Math')}
  0x00007f779d33c4af: and    $0x1ff8,%edi
  0x00007f779d33c4b5: cmp    $0x0,%edi
  0x00007f779d33c4b8: je     0x00007f779d33c51d  ;*iload_0
                                                ; - java.lang.Math::min@0 (line 1336)

  0x00007f779d33c4be: cmp    %edx,%esi
  0x00007f779d33c4c0: movabs $0x7f77839c6ca8,%rax  ;   {metadata(method data for {method} {0x00007f77838f70a8} 'min' '(II)I' in 'java/lang/Math')}
  0x00007f779d33c4ca: movabs $0x108,%rdi
  0x00007f779d33c4d4: jg     0x00007f779d33c4e4
  0x00007f779d33c4da: movabs $0x118,%rdi
  0x00007f779d33c4e4: mov    (%rax,%rdi,1),%rbx
  0x00007f779d33c4e8: lea    0x1(%rbx),%rbx
  0x00007f779d33c4ec: mov    %rbx,(%rax,%rdi,1)
  0x00007f779d33c4f0: jg     0x00007f779d33c50b  ;*if_icmpgt
                                                ; - java.lang.Math::min@2 (line 1336)

  0x00007f779d33c4f6: movabs $0x7f77839c6ca8,%rax  ;   {metadata(method data for {method} {0x00007f77838f70a8} 'min' '(II)I' in 'java/lang/Math')}
  0x00007f779d33c500: incl   0x128(%rax)
  0x00007f779d33c506: jmpq   0x00007f779d33c50e  ;*goto
                                                ; - java.lang.Math::min@6 (line 1336)

  0x00007f779d33c50b: mov    %rdx,%rsi          ;*ireturn
                                                ; - java.lang.Math::min@10 (line 1336)

  0x00007f779d33c50e: mov    %rsi,%rax
  0x00007f779d33c511: add    $0x30,%rsp
  0x00007f779d33c515: pop    %rbp
  0x00007f779d33c516: test   %eax,0x15937be4(%rip)        # 0x00007f77b2c74100
                                                ;   {poll_return}
  0x00007f779d33c51c: retq   
  0x00007f779d33c51d: mov    %rax,0x8(%rsp)
  0x00007f779d33c522: movq   $0xffffffffffffffff,(%rsp)
  0x00007f779d33c52a: callq  0x00007f779d339320  ; OopMap{off=175}
                                                ;*synchronization entry
                                                ; - java.lang.Math::min@-1 (line 1336)
                                                ;   {runtime_call}
  0x00007f779d33c52f: jmp    0x00007f779d33c4be
  0x00007f779d33c531: nop
  0x00007f779d33c532: nop
  0x00007f779d33c533: mov    0x300(%r15),%rax
  0x00007f779d33c53a: movabs $0x0,%r10
  0x00007f779d33c544: mov    %r10,0x300(%r15)
  0x00007f779d33c54b: movabs $0x0,%r10
  0x00007f779d33c555: mov    %r10,0x308(%r15)
  0x00007f779d33c55c: add    $0x30,%rsp
  0x00007f779d33c560: pop    %rbp
  0x00007f779d33c561: jmpq   0x00007f779d0700a0  ;   {runtime_call}
  0x00007f779d33c566: hlt    
  0x00007f779d33c567: hlt    
  0x00007f779d33c568: hlt    
  0x00007f779d33c569: hlt    
  0x00007f779d33c56a: hlt    
  0x00007f779d33c56b: hlt    
  0x00007f779d33c56c: hlt    
  0x00007f779d33c56d: hlt    
  0x00007f779d33c56e: hlt    
  0x00007f779d33c56f: hlt    
  0x00007f779d33c570: hlt    
  0x00007f779d33c571: hlt    
  0x00007f779d33c572: hlt    
  0x00007f779d33c573: hlt    
  0x00007f779d33c574: hlt    
  0x00007f779d33c575: hlt    
  0x00007f779d33c576: hlt    
  0x00007f779d33c577: hlt    
  0x00007f779d33c578: hlt    
  0x00007f779d33c579: hlt    
  0x00007f779d33c57a: hlt    
  0x00007f779d33c57b: hlt    
  0x00007f779d33c57c: hlt    
  0x00007f779d33c57d: hlt    
  0x00007f779d33c57e: hlt    
  0x00007f779d33c57f: hlt    
[Exception Handler]
[Stub Code]
  0x00007f779d33c580: callq  0x00007f779d3317a0  ;   {no_reloc}
  0x00007f779d33c585: mov    %rsp,-0x28(%rsp)
  0x00007f779d33c58a: sub    $0x80,%rsp
  0x00007f779d33c591: mov    %rax,0x78(%rsp)
  0x00007f779d33c596: mov    %rcx,0x70(%rsp)
  0x00007f779d33c59b: mov    %rdx,0x68(%rsp)
  0x00007f779d33c5a0: mov    %rbx,0x60(%rsp)
  0x00007f779d33c5a5: mov    %rbp,0x50(%rsp)
  0x00007f779d33c5aa: mov    %rsi,0x48(%rsp)
  0x00007f779d33c5af: mov    %rdi,0x40(%rsp)
  0x00007f779d33c5b4: mov    %r8,0x38(%rsp)
  0x00007f779d33c5b9: mov    %r9,0x30(%rsp)
  0x00007f779d33c5be: mov    %r10,0x28(%rsp)
  0x00007f779d33c5c3: mov    %r11,0x20(%rsp)
  0x00007f779d33c5c8: mov    %r12,0x18(%rsp)
  0x00007f779d33c5cd: mov    %r13,0x10(%rsp)
  0x00007f779d33c5d2: mov    %r14,0x8(%rsp)
  0x00007f779d33c5d7: mov    %r15,(%rsp)
  0x00007f779d33c5db: movabs $0x7f77b276249e,%rdi  ;   {external_word}
  0x00007f779d33c5e5: movabs $0x7f779d33c585,%rsi  ;   {internal_word}
  0x00007f779d33c5ef: mov    %rsp,%rdx
  0x00007f779d33c5f2: and    $0xfffffffffffffff0,%rsp
  0x00007f779d33c5f6: callq  0x00007f77b2488460  ;   {runtime_call}
  0x00007f779d33c5fb: hlt    
[Deopt Handler Code]
  0x00007f779d33c5fc: movabs $0x7f779d33c5fc,%r10  ;   {section_word}
  0x00007f779d33c606: push   %r10
  0x00007f779d33c608: jmpq   0x00007f779d046e40  ;   {runtime_call}
  0x00007f779d33c60d: hlt    
  0x00007f779d33c60e: hlt    
  0x00007f779d33c60f: hlt    
Decoding compiled method 0x00007f779d33be50:
Code:
[Entry Point]
[Constants]
  # {method} {0x00007f7783828da0} 'get' '()Ljava/lang/Object;' in 'java/lang/ref/SoftReference'
  #           [sp+0x50]  (sp of caller)
  0x00007f779d33bfc0: mov    0x8(%rsi),%r10d
  0x00007f779d33bfc4: shl    $0x3,%r10
  0x00007f779d33bfc8: cmp    %rax,%r10
  0x00007f779d33bfcb: jne    0x00007f779d045ba0  ;   {runtime_call}
  0x00007f779d33bfd1: nopl   0x0(%rax,%rax,1)
  0x00007f779d33bfd9: nopl   0x0(%rax)
[Verified Entry Point]
  0x00007f779d33bfe0: mov    %eax,-0x14000(%rsp)
  0x00007f779d33bfe7: push   %rbp
  0x00007f779d33bfe8: sub    $0x40,%rsp
  0x00007f779d33bfec: movabs $0x7f7783a988a8,%rdi  ;   {metadata(method data for {method} {0x00007f7783828da0} 'get' '()Ljava/lang/Object;' in 'java/lang/ref/SoftReference')}
  0x00007f779d33bff6: mov    0xdc(%rdi),%ebx
  0x00007f779d33bffc: add    $0x8,%ebx
  0x00007f779d33bfff: mov    %ebx,0xdc(%rdi)
  0x00007f779d33c005: movabs $0x7f7783828da0,%rdi  ;   {metadata({method} {0x00007f7783828da0} 'get' '()Ljava/lang/Object;' in 'java/lang/ref/SoftReference')}
  0x00007f779d33c00f: and    $0x1ff8,%ebx
  0x00007f779d33c015: cmp    $0x0,%ebx
  0x00007f779d33c018: je     0x00007f779d33c0de  ;*aload_0
                                                ; - java.lang.ref.SoftReference::get@0 (line 112)

  0x00007f779d33c01e: mov    %rsi,%rdi
  0x00007f779d33c021: movabs $0x7f7783a988a8,%rbx  ;   {metadata(method data for {method} {0x00007f7783828da0} 'get' '()Ljava/lang/Object;' in 'java/lang/ref/SoftReference')}
  0x00007f779d33c02b: addq   $0x1,0x108(%rbx)
  0x00007f779d33c033: mov    %rsi,%rdi
  0x00007f779d33c036: mov    %rdi,%rsi          ;*invokespecial get
                                                ; - java.lang.ref.SoftReference::get@1 (line 112)

  0x00007f779d33c039: mov    %rdi,0x28(%rsp)
  0x00007f779d33c03e: nop
  0x00007f779d33c03f: callq  0x00007f779d045de0  ; OopMap{[40]=Oop off=132}
                                                ;*invokespecial get
                                                ; - java.lang.ref.SoftReference::get@1 (line 112)
                                                ;   {optimized virtual_call}
  0x00007f779d33c044: cmp    $0x0,%rax
  0x00007f779d33c048: movabs $0x7f7783a988a8,%rsi  ;   {metadata(method data for {method} {0x00007f7783828da0} 'get' '()Ljava/lang/Object;' in 'java/lang/ref/SoftReference')}
  0x00007f779d33c052: movabs $0x118,%rdi
  0x00007f779d33c05c: je     0x00007f779d33c06c
  0x00007f779d33c062: movabs $0x128,%rdi
  0x00007f779d33c06c: mov    (%rsi,%rdi,1),%rbx
  0x00007f779d33c070: lea    0x1(%rbx),%rbx
  0x00007f779d33c074: mov    %rbx,(%rsi,%rdi,1)
  0x00007f779d33c078: je     0x00007f779d33c0d2  ;*ifnull
                                                ; - java.lang.ref.SoftReference::get@6 (line 113)

  0x00007f779d33c07e: mov    0x28(%rsp),%rsi
  0x00007f779d33c083: mov    0x20(%rsi),%rdi    ;*getfield timestamp
                                                ; - java.lang.ref.SoftReference::get@10 (line 113)

  0x00007f779d33c087: movabs $0x6b49018a0,%rbx  ;   {oop(a 'java/lang/Class' = 'java/lang/ref/SoftReference')}
  0x00007f779d33c091: mov    0x68(%rbx),%rdx    ;*getstatic clock
                                                ; - java.lang.ref.SoftReference::get@13 (line 113)

  0x00007f779d33c095: cmp    %rdx,%rdi
  0x00007f779d33c098: movabs $0x7f7783a988a8,%rdi  ;   {metadata(method data for {method} {0x00007f7783828da0} 'get' '()Ljava/lang/Object;' in 'java/lang/ref/SoftReference')}
  0x00007f779d33c0a2: movabs $0x148,%rbx
  0x00007f779d33c0ac: jne    0x00007f779d33c0bc
  0x00007f779d33c0b2: movabs $0x138,%rbx
  0x00007f779d33c0bc: mov    (%rdi,%rbx,1),%rcx
  0x00007f779d33c0c0: lea    0x1(%rcx),%rcx
  0x00007f779d33c0c4: mov    %rcx,(%rdi,%rbx,1)
  0x00007f779d33c0c8: je     0x00007f779d33c0d2  ;*lcmp
                                                ; - java.lang.ref.SoftReference::get@16 (line 113)

  0x00007f779d33c0ce: mov    %rdx,0x20(%rsi)    ;*putfield timestamp
                                                ; - java.lang.ref.SoftReference::get@24 (line 114)

  0x00007f779d33c0d2: add    $0x40,%rsp
  0x00007f779d33c0d6: pop    %rbp
  0x00007f779d33c0d7: test   %eax,0x15938023(%rip)        # 0x00007f77b2c74100
                                                ;   {poll_return}
  0x00007f779d33c0dd: retq   
  0x00007f779d33c0de: mov    %rdi,0x8(%rsp)
  0x00007f779d33c0e3: movq   $0xffffffffffffffff,(%rsp)
  0x00007f779d33c0eb: callq  0x00007f779d339320  ; OopMap{rsi=Oop off=304}
                                                ;*synchronization entry
                                                ; - java.lang.ref.SoftReference::get@-1 (line 112)
                                                ;   {runtime_call}
  0x00007f779d33c0f0: jmpq   0x00007f779d33c01e
  0x00007f779d33c0f5: nop
  0x00007f779d33c0f6: nop
  0x00007f779d33c0f7: mov    0x300(%r15),%rax
  0x00007f779d33c0fe: movabs $0x0,%r10
  0x00007f779d33c108: mov    %r10,0x300(%r15)
  0x00007f779d33c10f: movabs $0x0,%r10
  0x00007f779d33c119: mov    %r10,0x308(%r15)
  0x00007f779d33c120: add    $0x40,%rsp
  0x00007f779d33c124: pop    %rbp
  0x00007f779d33c125: jmpq   0x00007f779d0700a0  ;   {runtime_call}
  0x00007f779d33c12a: hlt    
  0x00007f779d33c12b: hlt    
  0x00007f779d33c12c: hlt    
  0x00007f779d33c12d: hlt    
  0x00007f779d33c12e: hlt    
  0x00007f779d33c12f: hlt    
  0x00007f779d33c130: hlt    
  0x00007f779d33c131: hlt    
  0x00007f779d33c132: hlt    
  0x00007f779d33c133: hlt    
  0x00007f779d33c134: hlt    
  0x00007f779d33c135: hlt    
  0x00007f779d33c136: hlt    
  0x00007f779d33c137: hlt    
  0x00007f779d33c138: hlt    
  0x00007f779d33c139: hlt    
  0x00007f779d33c13a: hlt    
  0x00007f779d33c13b: hlt    
  0x00007f779d33c13c: hlt    
  0x00007f779d33c13d: hlt    
  0x00007f779d33c13e: hlt    
  0x00007f779d33c13f: hlt    
[Stub Code]
  0x00007f779d33c140: nop                       ;   {no_reloc}
  0x00007f779d33c141: nop
  0x00007f779d33c142: nop
  0x00007f779d33c143: nop
  0x00007f779d33c144: nop
  0x00007f779d33c145: movabs $0x0,%rbx          ;   {static_stub}
  0x00007f779d33c14f: jmpq   0x00007f779d33c14f  ;   {runtime_call}
[Exception Handler]
  0x00007f779d33c154: callq  0x00007f779d3317a0  ;   {runtime_call}
  0x00007f779d33c159: mov    %rsp,-0x28(%rsp)
  0x00007f779d33c15e: sub    $0x80,%rsp
  0x00007f779d33c165: mov    %rax,0x78(%rsp)
  0x00007f779d33c16a: mov    %rcx,0x70(%rsp)
  0x00007f779d33c16f: mov    %rdx,0x68(%rsp)
  0x00007f779d33c174: mov    %rbx,0x60(%rsp)
  0x00007f779d33c179: mov    %rbp,0x50(%rsp)
  0x00007f779d33c17e: mov    %rsi,0x48(%rsp)
  0x00007f779d33c183: mov    %rdi,0x40(%rsp)
  0x00007f779d33c188: mov    %r8,0x38(%rsp)
  0x00007f779d33c18d: mov    %r9,0x30(%rsp)
  0x00007f779d33c192: mov    %r10,0x28(%rsp)
  0x00007f779d33c197: mov    %r11,0x20(%rsp)
  0x00007f779d33c19c: mov    %r12,0x18(%rsp)
  0x00007f779d33c1a1: mov    %r13,0x10(%rsp)
  0x00007f779d33c1a6: mov    %r14,0x8(%rsp)
  0x00007f779d33c1ab: mov    %r15,(%rsp)
  0x00007f779d33c1af: movabs $0x7f77b276249e,%rdi  ;   {external_word}
  0x00007f779d33c1b9: movabs $0x7f779d33c159,%rsi  ;   {internal_word}
  0x00007f779d33c1c3: mov    %rsp,%rdx
  0x00007f779d33c1c6: and    $0xfffffffffffffff0,%rsp
  0x00007f779d33c1ca: callq  0x00007f77b2488460  ;   {runtime_call}
  0x00007f779d33c1cf: hlt    
[Deopt Handler Code]
  0x00007f779d33c1d0: movabs $0x7f779d33c1d0,%r10  ;   {section_word}
  0x00007f779d33c1da: push   %r10
  0x00007f779d33c1dc: jmpq   0x00007f779d046e40  ;   {runtime_call}
  0x00007f779d33c1e1: hlt    
  0x00007f779d33c1e2: hlt    
  0x00007f779d33c1e3: hlt    
  0x00007f779d33c1e4: hlt    
  0x00007f779d33c1e5: hlt    
  0x00007f779d33c1e6: hlt    
  0x00007f779d33c1e7: hlt    
Decoding compiled method 0x00007f779d33b490:
Code:
[Entry Point]
[Constants]
  # {method} {0x00007f7783805180} 'indexOf' '(II)I' in 'java/lang/String'
  # this:     rsi:rsi   = 'java/lang/String'
  # parm0:    rdx       = int
  # parm1:    rcx       = int
  #           [sp+0x40]  (sp of caller)
  0x00007f779d33b620: mov    0x8(%rsi),%r10d
  0x00007f779d33b624: shl    $0x3,%r10
  0x00007f779d33b628: cmp    %rax,%r10
  0x00007f779d33b62b: jne    0x00007f779d045ba0  ;   {runtime_call}
  0x00007f779d33b631: nopl   0x0(%rax,%rax,1)
  0x00007f779d33b639: nopl   0x0(%rax)
[Verified Entry Point]
  0x00007f779d33b640: mov    %eax,-0x14000(%rsp)
  0x00007f779d33b647: push   %rbp
  0x00007f779d33b648: sub    $0x30,%rsp
  0x00007f779d33b64c: movabs $0x7f77839c7b98,%rax  ;   {metadata(method data for {method} {0x00007f7783805180} 'indexOf' '(II)I' in 'java/lang/String')}
  0x00007f779d33b656: mov    0xdc(%rax),%edi
  0x00007f779d33b65c: add    $0x8,%edi
  0x00007f779d33b65f: mov    %edi,0xdc(%rax)
  0x00007f779d33b665: movabs $0x7f7783805180,%rax  ;   {metadata({method} {0x00007f7783805180} 'indexOf' '(II)I' in 'java/lang/String')}
  0x00007f779d33b66f: and    $0x1ff8,%edi
  0x00007f779d33b675: cmp    $0x0,%edi
  0x00007f779d33b678: je     0x00007f779d33b881  ;*aload_0
                                                ; - java.lang.String::indexOf@0 (line 1546)

  0x00007f779d33b67e: mov    0xc(%rsi),%eax
  0x00007f779d33b681: shl    $0x3,%rax          ;*getfield value
                                                ; - java.lang.String::indexOf@1 (line 1546)

  0x00007f779d33b685: mov    0xc(%rax),%edi     ;*arraylength
                                                ; - java.lang.String::indexOf@4 (line 1546)
                                                ; implicit exception: dispatches to 0x00007f779d33b898
  0x00007f779d33b688: cmp    $0x0,%ecx
  0x00007f779d33b68b: movabs $0x7f77839c7b98,%rbx  ;   {metadata(method data for {method} {0x00007f7783805180} 'indexOf' '(II)I' in 'java/lang/String')}
  0x00007f779d33b695: movabs $0x108,%r8
  0x00007f779d33b69f: jge    0x00007f779d33b6af
  0x00007f779d33b6a5: movabs $0x118,%r8
  0x00007f779d33b6af: mov    (%rbx,%r8,1),%r9
  0x00007f779d33b6b3: lea    0x1(%r9),%r9
  0x00007f779d33b6b7: mov    %r9,(%rbx,%r8,1)
  0x00007f779d33b6bb: jge    0x00007f779d33b6db  ;*ifge
                                                ; - java.lang.String::indexOf@7 (line 1547)

  0x00007f779d33b6c1: movabs $0x7f77839c7b98,%rcx  ;   {metadata(method data for {method} {0x00007f7783805180} 'indexOf' '(II)I' in 'java/lang/String')}
  0x00007f779d33b6cb: incl   0x128(%rcx)
  0x00007f779d33b6d1: mov    $0x0,%ecx
  0x00007f779d33b6d6: jmpq   0x00007f779d33b713  ;*goto
                                                ; - java.lang.String::indexOf@12 (line 1548)

  0x00007f779d33b6db: cmp    %edi,%ecx
  0x00007f779d33b6dd: movabs $0x7f77839c7b98,%rbx  ;   {metadata(method data for {method} {0x00007f7783805180} 'indexOf' '(II)I' in 'java/lang/String')}
  0x00007f779d33b6e7: movabs $0x140,%r8
  0x00007f779d33b6f1: jl     0x00007f779d33b701
  0x00007f779d33b6f7: movabs $0x150,%r8
  0x00007f779d33b701: mov    (%rbx,%r8,1),%r9
  0x00007f779d33b705: lea    0x1(%r9),%r9
  0x00007f779d33b709: mov    %r9,(%rbx,%r8,1)
  0x00007f779d33b70d: jge    0x00007f779d33b870  ;*if_icmplt
                                                ; - java.lang.String::indexOf@17 (line 1549)

  0x00007f779d33b713: cmp    $0x10000,%edx
  0x00007f779d33b719: movabs $0x7f77839c7b98,%rbx  ;   {metadata(method data for {method} {0x00007f7783805180} 'indexOf' '(II)I' in 'java/lang/String')}
  0x00007f779d33b723: movabs $0x160,%r8
  0x00007f779d33b72d: jge    0x00007f779d33b73d
  0x00007f779d33b733: movabs $0x170,%r8
  0x00007f779d33b73d: mov    (%rbx,%r8,1),%r9
  0x00007f779d33b741: lea    0x1(%r9),%r9
  0x00007f779d33b745: mov    %r9,(%rbx,%r8,1)
  0x00007f779d33b749: jge    0x00007f779d33b848
  0x00007f779d33b74f: jmpq   0x00007f779d33b7eb  ;*if_icmpge
                                                ; - java.lang.String::indexOf@25 (line 1554)

  0x00007f779d33b754: nopl   0x0(%rax)
  0x00007f779d33b758: movslq %ecx,%rsi
  0x00007f779d33b75b: cmp    0xc(%rax),%ecx
  0x00007f779d33b75e: jae    0x00007f779d33b89d
  0x00007f779d33b764: movzwl 0x10(%rax,%rsi,2),%esi  ;*caload
                                                ; - java.lang.String::indexOf@47 (line 1559)

  0x00007f779d33b769: cmp    %edx,%esi
  0x00007f779d33b76b: movabs $0x7f77839c7b98,%rsi  ;   {metadata(method data for {method} {0x00007f7783805180} 'indexOf' '(II)I' in 'java/lang/String')}
  0x00007f779d33b775: movabs $0x1a0,%rbx
  0x00007f779d33b77f: jne    0x00007f779d33b78f
  0x00007f779d33b785: movabs $0x1b0,%rbx
  0x00007f779d33b78f: mov    (%rsi,%rbx,1),%r8
  0x00007f779d33b793: lea    0x1(%r8),%r8
  0x00007f779d33b797: mov    %r8,(%rsi,%rbx,1)
  0x00007f779d33b79b: je     0x00007f779d33b828  ;*if_icmpne
                                                ; - java.lang.String::indexOf@49 (line 1559)

  0x00007f779d33b7a1: inc    %ecx
  0x00007f779d33b7a3: movabs $0x7f77839c7b98,%rsi  ;   {metadata(method data for {method} {0x00007f7783805180} 'indexOf' '(II)I' in 'java/lang/String')}
  0x00007f779d33b7ad: mov    0xe0(%rsi),%ebx
  0x00007f779d33b7b3: add    $0x8,%ebx
  0x00007f779d33b7b6: mov    %ebx,0xe0(%rsi)
  0x00007f779d33b7bc: movabs $0x7f7783805180,%rsi  ;   {metadata({method} {0x00007f7783805180} 'indexOf' '(II)I' in 'java/lang/String')}
  0x00007f779d33b7c6: and    $0xfff8,%ebx
  0x00007f779d33b7cc: cmp    $0x0,%ebx
  0x00007f779d33b7cf: je     0x00007f779d33b8a6  ; OopMap{rax=Oop off=437}
                                                ;*goto
                                                ; - java.lang.String::indexOf@58 (line 1558)

  0x00007f779d33b7d5: test   %eax,0x15938925(%rip)        # 0x00007f77b2c74100
                                                ;   {poll}
  0x00007f779d33b7db: movabs $0x7f77839c7b98,%rsi  ;   {metadata(method data for {method} {0x00007f7783805180} 'indexOf' '(II)I' in 'java/lang/String')}
  0x00007f779d33b7e5: incl   0x1c0(%rsi)        ;*goto
                                                ; - java.lang.String::indexOf@58 (line 1558)

  0x00007f779d33b7eb: cmp    %edi,%ecx
  0x00007f779d33b7ed: movabs $0x7f77839c7b98,%rsi  ;   {metadata(method data for {method} {0x00007f7783805180} 'indexOf' '(II)I' in 'java/lang/String')}
  0x00007f779d33b7f7: movabs $0x180,%rbx
  0x00007f779d33b801: jge    0x00007f779d33b811
  0x00007f779d33b807: movabs $0x190,%rbx
  0x00007f779d33b811: mov    (%rsi,%rbx,1),%r8
  0x00007f779d33b815: lea    0x1(%r8),%r8
  0x00007f779d33b819: mov    %r8,(%rsi,%rbx,1)
  0x00007f779d33b81d: jge    0x00007f779d33b837
  0x00007f779d33b823: jmpq   0x00007f779d33b758  ;*if_icmpge
                                                ; - java.lang.String::indexOf@40 (line 1558)

  0x00007f779d33b828: mov    %rcx,%rax
  0x00007f779d33b82b: add    $0x30,%rsp
  0x00007f779d33b82f: pop    %rbp
  0x00007f779d33b830: test   %eax,0x159388ca(%rip)        # 0x00007f77b2c74100
                                                ;   {poll_return}
  0x00007f779d33b836: retq                      ;*ireturn
                                                ; - java.lang.String::indexOf@54 (line 1560)

  0x00007f779d33b837: mov    $0xffffffff,%eax
  0x00007f779d33b83c: add    $0x30,%rsp
  0x00007f779d33b840: pop    %rbp
  0x00007f779d33b841: test   %eax,0x159388b9(%rip)        # 0x00007f77b2c74100
                                                ;   {poll_return}
  0x00007f779d33b847: retq                      ;*ireturn
                                                ; - java.lang.String::indexOf@62 (line 1563)

  0x00007f779d33b848: mov    %rsi,%rdi
  0x00007f779d33b84b: movabs $0x7f77839c7b98,%rbx  ;   {metadata(method data for {method} {0x00007f7783805180} 'indexOf' '(II)I' in 'java/lang/String')}
  0x00007f779d33b855: addq   $0x1,0x1d8(%rbx)
  0x00007f779d33b85d: nop
  0x00007f779d33b85e: nop
  0x00007f779d33b85f: callq  0x00007f779d045de0  ; OopMap{off=580}
                                                ;*invokespecial indexOfSupplementary
                                                ; - java.lang.String::indexOf@66 (line 1565)
                                                ;   {optimized virtual_call}
  0x00007f779d33b864: add    $0x30,%rsp
  0x00007f779d33b868: pop    %rbp
  0x00007f779d33b869: test   %eax,0x15938891(%rip)        # 0x00007f77b2c74100
                                                ;   {poll_return}
  0x00007f779d33b86f: retq                      ;*ireturn
                                                ; - java.lang.String::indexOf@69 (line 1565)

  0x00007f779d33b870: mov    $0xffffffff,%eax
  0x00007f779d33b875: add    $0x30,%rsp
  0x00007f779d33b879: pop    %rbp
  0x00007f779d33b87a: test   %eax,0x15938880(%rip)        # 0x00007f77b2c74100
                                                ;   {poll_return}
  0x00007f779d33b880: retq   
  0x00007f779d33b881: mov    %rax,0x8(%rsp)
  0x00007f779d33b886: movq   $0xffffffffffffffff,(%rsp)
  0x00007f779d33b88e: callq  0x00007f779d339320  ; OopMap{rsi=Oop off=627}
                                                ;*synchronization entry
                                                ; - java.lang.String::indexOf@-1 (line 1546)
                                                ;   {runtime_call}
  0x00007f779d33b893: jmpq   0x00007f779d33b67e
  0x00007f779d33b898: callq  0x00007f779d333ec0  ; OopMap{rsi=Oop rax=Oop off=637}
                                                ;*arraylength
                                                ; - java.lang.String::indexOf@4 (line 1546)
                                                ;   {runtime_call}
  0x00007f779d33b89d: mov    %rcx,(%rsp)
  0x00007f779d33b8a1: callq  0x00007f779d333700  ; OopMap{rax=Oop off=646}
                                                ;*caload
                                                ; - java.lang.String::indexOf@47 (line 1559)
                                                ;   {runtime_call}
  0x00007f779d33b8a6: mov    %rsi,0x8(%rsp)
  0x00007f779d33b8ab: movq   $0x3a,(%rsp)
  0x00007f779d33b8b3: callq  0x00007f779d339320  ; OopMap{rax=Oop off=664}
                                                ;*goto
                                                ; - java.lang.String::indexOf@58 (line 1558)
                                                ;   {runtime_call}
  0x00007f779d33b8b8: jmpq   0x00007f779d33b7d5
  0x00007f779d33b8bd: nop
  0x00007f779d33b8be: nop
  0x00007f779d33b8bf: mov    0x300(%r15),%rax
  0x00007f779d33b8c6: movabs $0x0,%r10
  0x00007f779d33b8d0: mov    %r10,0x300(%r15)
  0x00007f779d33b8d7: movabs $0x0,%r10
  0x00007f779d33b8e1: mov    %r10,0x308(%r15)
  0x00007f779d33b8e8: add    $0x30,%rsp
  0x00007f779d33b8ec: pop    %rbp
  0x00007f779d33b8ed: jmpq   0x00007f779d0700a0  ;   {runtime_call}
  0x00007f779d33b8f2: hlt    
  0x00007f779d33b8f3: hlt    
  0x00007f779d33b8f4: hlt    
  0x00007f779d33b8f5: hlt    
  0x00007f779d33b8f6: hlt    
  0x00007f779d33b8f7: hlt    
  0x00007f779d33b8f8: hlt    
  0x00007f779d33b8f9: hlt    
  0x00007f779d33b8fa: hlt    
  0x00007f779d33b8fb: hlt    
  0x00007f779d33b8fc: hlt    
  0x00007f779d33b8fd: hlt    
  0x00007f779d33b8fe: hlt    
  0x00007f779d33b8ff: hlt    
[Stub Code]
  0x00007f779d33b900: nop                       ;   {no_reloc}
  0x00007f779d33b901: nop
  0x00007f779d33b902: nop
  0x00007f779d33b903: nop
  0x00007f779d33b904: nop
  0x00007f779d33b905: movabs $0x0,%rbx          ;   {static_stub}
  0x00007f779d33b90f: jmpq   0x00007f779d33b90f  ;   {runtime_call}
[Exception Handler]
  0x00007f779d33b914: callq  0x00007f779d3317a0  ;   {runtime_call}
  0x00007f779d33b919: mov    %rsp,-0x28(%rsp)
  0x00007f779d33b91e: sub    $0x80,%rsp
  0x00007f779d33b925: mov    %rax,0x78(%rsp)
  0x00007f779d33b92a: mov    %rcx,0x70(%rsp)
  0x00007f779d33b92f: mov    %rdx,0x68(%rsp)
  0x00007f779d33b934: mov    %rbx,0x60(%rsp)
  0x00007f779d33b939: mov    %rbp,0x50(%rsp)
  0x00007f779d33b93e: mov    %rsi,0x48(%rsp)
  0x00007f779d33b943: mov    %rdi,0x40(%rsp)
  0x00007f779d33b948: mov    %r8,0x38(%rsp)
  0x00007f779d33b94d: mov    %r9,0x30(%rsp)
  0x00007f779d33b952: mov    %r10,0x28(%rsp)
  0x00007f779d33b957: mov    %r11,0x20(%rsp)
  0x00007f779d33b95c: mov    %r12,0x18(%rsp)
  0x00007f779d33b961: mov    %r13,0x10(%rsp)
  0x00007f779d33b966: mov    %r14,0x8(%rsp)
  0x00007f779d33b96b: mov    %r15,(%rsp)
  0x00007f779d33b96f: movabs $0x7f77b276249e,%rdi  ;   {external_word}
  0x00007f779d33b979: movabs $0x7f779d33b919,%rsi  ;   {internal_word}
  0x00007f779d33b983: mov    %rsp,%rdx
  0x00007f779d33b986: and    $0xfffffffffffffff0,%rsp
  0x00007f779d33b98a: callq  0x00007f77b2488460  ;   {runtime_call}
  0x00007f779d33b98f: hlt    
[Deopt Handler Code]
  0x00007f779d33b990: movabs $0x7f779d33b990,%r10  ;   {section_word}
  0x00007f779d33b99a: push   %r10
  0x00007f779d33b99c: jmpq   0x00007f779d046e40  ;   {runtime_call}
  0x00007f779d33b9a1: hlt    
  0x00007f779d33b9a2: hlt    
  0x00007f779d33b9a3: hlt    
  0x00007f779d33b9a4: hlt    
  0x00007f779d33b9a5: hlt    
  0x00007f779d33b9a6: hlt    
  0x00007f779d33b9a7: hlt    
Decoding compiled method 0x00007f779d33d190:
Code:
[Entry Point]
[Constants]
  # {method} {0x00007f7783804df8} 'startsWith' '(Ljava/lang/String;I)Z' in 'java/lang/String'
  # this:     rsi:rsi   = 'java/lang/String'
  # parm0:    rdx:rdx   = 'java/lang/String'
  # parm1:    rcx       = int
  #           [sp+0x40]  (sp of caller)
  0x00007f779d33d300: mov    0x8(%rsi),%r10d
  0x00007f779d33d304: shl    $0x3,%r10
  0x00007f779d33d308: cmp    %rax,%r10
  0x00007f779d33d30b: jne    0x00007f779d045ba0  ;   {runtime_call}
  0x00007f779d33d311: nopl   0x0(%rax,%rax,1)
  0x00007f779d33d319: nopl   0x0(%rax)
[Verified Entry Point]
  0x00007f779d33d320: mov    %eax,-0x14000(%rsp)
  0x00007f779d33d327: push   %rbp
  0x00007f779d33d328: sub    $0x30,%rsp
  0x00007f779d33d32c: movabs $0x7f7783a998d8,%rax  ;   {metadata(method data for {method} {0x00007f7783804df8} 'startsWith' '(Ljava/lang/String;I)Z' in 'java/lang/String')}
  0x00007f779d33d336: mov    0xdc(%rax),%edi
  0x00007f779d33d33c: add    $0x8,%edi
  0x00007f779d33d33f: mov    %edi,0xdc(%rax)
  0x00007f779d33d345: movabs $0x7f7783804df8,%rax  ;   {metadata({method} {0x00007f7783804df8} 'startsWith' '(Ljava/lang/String;I)Z' in 'java/lang/String')}
  0x00007f779d33d34f: and    $0x1ff8,%edi
  0x00007f779d33d355: cmp    $0x0,%edi
  0x00007f779d33d358: je     0x00007f779d33d50d  ;*aload_0
                                                ; - java.lang.String::startsWith@0 (line 1403)

  0x00007f779d33d35e: mov    0xc(%rsi),%eax
  0x00007f779d33d361: shl    $0x3,%rax          ;*getfield value
                                                ; - java.lang.String::startsWith@1 (line 1403)

  0x00007f779d33d365: mov    0xc(%rdx),%esi     ; implicit exception: dispatches to 0x00007f779d33d524
  0x00007f779d33d368: shl    $0x3,%rsi          ;*getfield value
                                                ; - java.lang.String::startsWith@9 (line 1405)

  0x00007f779d33d36c: mov    0xc(%rsi),%edi     ;*arraylength
                                                ; - java.lang.String::startsWith@21 (line 1407)
                                                ; implicit exception: dispatches to 0x00007f779d33d529
  0x00007f779d33d36f: cmp    $0x0,%ecx
  0x00007f779d33d372: movabs $0x7f7783a998d8,%rbx  ;   {metadata(method data for {method} {0x00007f7783804df8} 'startsWith' '(Ljava/lang/String;I)Z' in 'java/lang/String')}
  0x00007f779d33d37c: movabs $0x108,%rdx
  0x00007f779d33d386: jl     0x00007f779d33d396
  0x00007f779d33d38c: movabs $0x118,%rdx
  0x00007f779d33d396: mov    (%rbx,%rdx,1),%r8
  0x00007f779d33d39a: lea    0x1(%r8),%r8
  0x00007f779d33d39e: mov    %r8,(%rbx,%rdx,1)
  0x00007f779d33d3a2: jl     0x00007f779d33d4da  ;*iflt
                                                ; - java.lang.String::startsWith@25 (line 1409)

  0x00007f779d33d3a8: mov    0xc(%rax),%ebx     ;*arraylength
                                                ; - java.lang.String::startsWith@33 (line 1409)
                                                ; implicit exception: dispatches to 0x00007f779d33d52e
  0x00007f779d33d3ab: sub    %edi,%ebx
  0x00007f779d33d3ad: cmp    %ebx,%ecx
  0x00007f779d33d3af: movabs $0x7f7783a998d8,%rbx  ;   {metadata(method data for {method} {0x00007f7783804df8} 'startsWith' '(Ljava/lang/String;I)Z' in 'java/lang/String')}
  0x00007f779d33d3b9: movabs $0x128,%rdx
  0x00007f779d33d3c3: jle    0x00007f779d33d3d3
  0x00007f779d33d3c9: movabs $0x138,%rdx
  0x00007f779d33d3d3: mov    (%rbx,%rdx,1),%r8
  0x00007f779d33d3d7: lea    0x1(%r8),%r8
  0x00007f779d33d3db: mov    %r8,(%rbx,%rdx,1)
  0x00007f779d33d3df: jg     0x00007f779d33d4da  ;*if_icmple
                                                ; - java.lang.String::startsWith@37 (line 1409)

  0x00007f779d33d3e5: mov    $0x0,%ebx
  0x00007f779d33d3ea: jmpq   0x00007f779d33d49a  ;*iinc
                                                ; - java.lang.String::startsWith@42 (line 1412)

  0x00007f779d33d3ef: nop
  0x00007f779d33d3f0: mov    %rcx,%rdx
  0x00007f779d33d3f3: inc    %edx
  0x00007f779d33d3f5: movslq %ecx,%r8
  0x00007f779d33d3f8: cmp    0xc(%rax),%ecx
  0x00007f779d33d3fb: jae    0x00007f779d33d533
  0x00007f779d33d401: movzwl 0x10(%rax,%r8,2),%ecx  ;*caload
                                                ; - java.lang.String::startsWith@56 (line 1413)

  0x00007f779d33d407: mov    %rbx,%r8
  0x00007f779d33d40a: inc    %r8d
  0x00007f779d33d40d: movslq %ebx,%r9
  0x00007f779d33d410: cmp    0xc(%rsi),%ebx
  0x00007f779d33d413: jae    0x00007f779d33d53c
  0x00007f779d33d419: movzwl 0x10(%rsi,%r9,2),%ebx  ;*caload
                                                ; - java.lang.String::startsWith@64 (line 1413)

  0x00007f779d33d41f: movabs $0x7f7783a998d8,%r9  ;   {metadata(method data for {method} {0x00007f7783804df8} 'startsWith' '(Ljava/lang/String;I)Z' in 'java/lang/String')}
  0x00007f779d33d429: mov    0xe0(%r9),%r11d
  0x00007f779d33d430: add    $0x8,%r11d
  0x00007f779d33d434: mov    %r11d,0xe0(%r9)
  0x00007f779d33d43b: movabs $0x7f7783804df8,%r9  ;   {metadata({method} {0x00007f7783804df8} 'startsWith' '(Ljava/lang/String;I)Z' in 'java/lang/String')}
  0x00007f779d33d445: and    $0xfff8,%r11d
  0x00007f779d33d44c: cmp    $0x0,%r11d
  0x00007f779d33d450: je     0x00007f779d33d545  ; OopMap{rsi=Oop rax=Oop off=342}
                                                ;*if_icmpeq
                                                ; - java.lang.String::startsWith@65 (line 1413)

  0x00007f779d33d456: test   %eax,0x15936ca4(%rip)        # 0x00007f77b2c74100
                                                ;   {poll}
  0x00007f779d33d45c: cmp    %ebx,%ecx
  0x00007f779d33d45e: movabs $0x7f7783a998d8,%rbx  ;   {metadata(method data for {method} {0x00007f7783804df8} 'startsWith' '(Ljava/lang/String;I)Z' in 'java/lang/String')}
  0x00007f779d33d468: movabs $0x168,%rcx
  0x00007f779d33d472: je     0x00007f779d33d482
  0x00007f779d33d478: movabs $0x178,%rcx
  0x00007f779d33d482: mov    (%rbx,%rcx,1),%r9
  0x00007f779d33d486: lea    0x1(%r9),%r9
  0x00007f779d33d48a: mov    %r9,(%rbx,%rcx,1)
  0x00007f779d33d48e: jne    0x00007f779d33d4eb  ;*if_icmpeq
                                                ; - java.lang.String::startsWith@65 (line 1413)

  0x00007f779d33d494: mov    %r8,%rbx
  0x00007f779d33d497: mov    %rdx,%rcx          ;*iinc
                                                ; - java.lang.String::startsWith@42 (line 1412)

  0x00007f779d33d49a: dec    %edi
  0x00007f779d33d49c: cmp    $0x0,%edi
  0x00007f779d33d49f: movabs $0x7f7783a998d8,%rdx  ;   {metadata(method data for {method} {0x00007f7783804df8} 'startsWith' '(Ljava/lang/String;I)Z' in 'java/lang/String')}
  0x00007f779d33d4a9: movabs $0x148,%r8
  0x00007f779d33d4b3: jl     0x00007f779d33d4c3
  0x00007f779d33d4b9: movabs $0x158,%r8
  0x00007f779d33d4c3: mov    (%rdx,%r8,1),%r9
  0x00007f779d33d4c7: lea    0x1(%r9),%r9
  0x00007f779d33d4cb: mov    %r9,(%rdx,%r8,1)
  0x00007f779d33d4cf: jl     0x00007f779d33d4fc
  0x00007f779d33d4d5: jmpq   0x00007f779d33d3f0  ;*iflt
                                                ; - java.lang.String::startsWith@47 (line 1412)

  0x00007f779d33d4da: mov    $0x0,%eax
  0x00007f779d33d4df: add    $0x30,%rsp
  0x00007f779d33d4e3: pop    %rbp
  0x00007f779d33d4e4: test   %eax,0x15936c16(%rip)        # 0x00007f77b2c74100
                                                ;   {poll_return}
  0x00007f779d33d4ea: retq                      ;*ireturn
                                                ; - java.lang.String::startsWith@41 (line 1410)

  0x00007f779d33d4eb: mov    $0x0,%eax
  0x00007f779d33d4f0: add    $0x30,%rsp
  0x00007f779d33d4f4: pop    %rbp
  0x00007f779d33d4f5: test   %eax,0x15936c05(%rip)        # 0x00007f77b2c74100
                                                ;   {poll_return}
  0x00007f779d33d4fb: retq                      ;*ireturn
                                                ; - java.lang.String::startsWith@69 (line 1414)

  0x00007f779d33d4fc: mov    $0x1,%eax
  0x00007f779d33d501: add    $0x30,%rsp
  0x00007f779d33d505: pop    %rbp
  0x00007f779d33d506: test   %eax,0x15936bf4(%rip)        # 0x00007f77b2c74100
                                                ;   {poll_return}
  0x00007f779d33d50c: retq   
  0x00007f779d33d50d: mov    %rax,0x8(%rsp)
  0x00007f779d33d512: movq   $0xffffffffffffffff,(%rsp)
  0x00007f779d33d51a: callq  0x00007f779d339320  ; OopMap{rsi=Oop rdx=Oop off=543}
                                                ;*synchronization entry
                                                ; - java.lang.String::startsWith@-1 (line 1403)
                                                ;   {runtime_call}
  0x00007f779d33d51f: jmpq   0x00007f779d33d35e
  0x00007f779d33d524: callq  0x00007f779d333ec0  ; OopMap{rax=Oop off=553}
                                                ;*getfield value
                                                ; - java.lang.String::startsWith@9 (line 1405)
                                                ;   {runtime_call}
  0x00007f779d33d529: callq  0x00007f779d333ec0  ; OopMap{rax=Oop rsi=Oop off=558}
                                                ;*arraylength
                                                ; - java.lang.String::startsWith@21 (line 1407)
                                                ;   {runtime_call}
  0x00007f779d33d52e: callq  0x00007f779d333ec0  ; OopMap{rsi=Oop rax=Oop off=563}
                                                ;*arraylength
                                                ; - java.lang.String::startsWith@33 (line 1409)
                                                ;   {runtime_call}
  0x00007f779d33d533: mov    %rcx,(%rsp)
  0x00007f779d33d537: callq  0x00007f779d333700  ; OopMap{rsi=Oop rax=Oop off=572}
                                                ;*caload
                                                ; - java.lang.String::startsWith@56 (line 1413)
                                                ;   {runtime_call}
  0x00007f779d33d53c: mov    %rbx,(%rsp)
  0x00007f779d33d540: callq  0x00007f779d333700  ; OopMap{rsi=Oop rax=Oop off=581}
                                                ;*caload
                                                ; - java.lang.String::startsWith@64 (line 1413)
                                                ;   {runtime_call}
  0x00007f779d33d545: mov    %r9,0x8(%rsp)
  0x00007f779d33d54a: movq   $0x41,(%rsp)
  0x00007f779d33d552: callq  0x00007f779d339320  ; OopMap{rsi=Oop rax=Oop off=599}
                                                ;*if_icmpeq
                                                ; - java.lang.String::startsWith@65 (line 1413)
                                                ;   {runtime_call}
  0x00007f779d33d557: jmpq   0x00007f779d33d456
  0x00007f779d33d55c: nop
  0x00007f779d33d55d: nop
  0x00007f779d33d55e: mov    0x300(%r15),%rax
  0x00007f779d33d565: movabs $0x0,%r10
  0x00007f779d33d56f: mov    %r10,0x300(%r15)
  0x00007f779d33d576: movabs $0x0,%r10
  0x00007f779d33d580: mov    %r10,0x308(%r15)
  0x00007f779d33d587: add    $0x30,%rsp
  0x00007f779d33d58b: pop    %rbp
  0x00007f779d33d58c: jmpq   0x00007f779d0700a0  ;   {runtime_call}
  0x00007f779d33d591: hlt    
  0x00007f779d33d592: hlt    
  0x00007f779d33d593: hlt    
  0x00007f779d33d594: hlt    
  0x00007f779d33d595: hlt    
  0x00007f779d33d596: hlt    
  0x00007f779d33d597: hlt    
  0x00007f779d33d598: hlt    
  0x00007f779d33d599: hlt    
  0x00007f779d33d59a: hlt    
  0x00007f779d33d59b: hlt    
  0x00007f779d33d59c: hlt    
  0x00007f779d33d59d: hlt    
  0x00007f779d33d59e: hlt    
  0x00007f779d33d59f: hlt    
[Exception Handler]
[Stub Code]
  0x00007f779d33d5a0: callq  0x00007f779d3317a0  ;   {no_reloc}
  0x00007f779d33d5a5: mov    %rsp,-0x28(%rsp)
  0x00007f779d33d5aa: sub    $0x80,%rsp
  0x00007f779d33d5b1: mov    %rax,0x78(%rsp)
  0x00007f779d33d5b6: mov    %rcx,0x70(%rsp)
  0x00007f779d33d5bb: mov    %rdx,0x68(%rsp)
  0x00007f779d33d5c0: mov    %rbx,0x60(%rsp)
  0x00007f779d33d5c5: mov    %rbp,0x50(%rsp)
  0x00007f779d33d5ca: mov    %rsi,0x48(%rsp)
  0x00007f779d33d5cf: mov    %rdi,0x40(%rsp)
  0x00007f779d33d5d4: mov    %r8,0x38(%rsp)
  0x00007f779d33d5d9: mov    %r9,0x30(%rsp)
  0x00007f779d33d5de: mov    %r10,0x28(%rsp)
  0x00007f779d33d5e3: mov    %r11,0x20(%rsp)
  0x00007f779d33d5e8: mov    %r12,0x18(%rsp)
  0x00007f779d33d5ed: mov    %r13,0x10(%rsp)
  0x00007f779d33d5f2: mov    %r14,0x8(%rsp)
  0x00007f779d33d5f7: mov    %r15,(%rsp)
  0x00007f779d33d5fb: movabs $0x7f77b276249e,%rdi  ;   {external_word}
  0x00007f779d33d605: movabs $0x7f779d33d5a5,%rsi  ;   {internal_word}
  0x00007f779d33d60f: mov    %rsp,%rdx
  0x00007f779d33d612: and    $0xfffffffffffffff0,%rsp
  0x00007f779d33d616: callq  0x00007f77b2488460  ;   {runtime_call}
  0x00007f779d33d61b: hlt    
[Deopt Handler Code]
  0x00007f779d33d61c: movabs $0x7f779d33d61c,%r10  ;   {section_word}
  0x00007f779d33d626: push   %r10
  0x00007f779d33d628: jmpq   0x00007f779d046e40  ;   {runtime_call}
  0x00007f779d33d62d: hlt    
  0x00007f779d33d62e: hlt    
  0x00007f779d33d62f: hlt    
Decoding compiled method 0x00007f779d33cdd0:
Code:
[Entry Point]
[Constants]
  # {method} {0x00007f7783803db0} 'charAt' '(I)C' in 'java/lang/String'
  # this:     rsi:rsi   = 'java/lang/String'
  # parm0:    rdx       = int
  #           [sp+0x30]  (sp of caller)
  0x00007f779d33cf20: mov    0x8(%rsi),%r10d
  0x00007f779d33cf24: shl    $0x3,%r10
  0x00007f779d33cf28: cmp    %r10,%rax
  0x00007f779d33cf2b: jne    0x00007f779d045ba0  ;   {runtime_call}
  0x00007f779d33cf31: data16 xchg %ax,%ax
  0x00007f779d33cf34: nopw   0x0(%rax,%rax,1)
  0x00007f779d33cf3a: nopw   0x0(%rax,%rax,1)
[Verified Entry Point]
  0x00007f779d33cf40: mov    %eax,-0x14000(%rsp)
  0x00007f779d33cf47: push   %rbp
  0x00007f779d33cf48: sub    $0x20,%rsp         ;*synchronization entry
                                                ; - java.lang.String::charAt@-1 (line 657)

  0x00007f779d33cf4c: test   %edx,%edx
  0x00007f779d33cf4e: jl     0x00007f779d33cf8d  ;*iflt
                                                ; - java.lang.String::charAt@1 (line 657)

  0x00007f779d33cf50: mov    0xc(%rsi),%r10d    ;*getfield value
                                                ; - java.lang.String::charAt@6 (line 657)

  0x00007f779d33cf54: mov    0xc(%r12,%r10,8),%ebp  ;*arraylength
                                                ; - java.lang.String::charAt@9 (line 657)
                                                ; implicit exception: dispatches to 0x00007f779d33cfbd
  0x00007f779d33cf59: cmp    %ebp,%edx
  0x00007f779d33cf5b: jge    0x00007f779d33cfa5  ;*if_icmplt
                                                ; - java.lang.String::charAt@10 (line 657)

  0x00007f779d33cf5d: cmp    %ebp,%edx
  0x00007f779d33cf5f: jae    0x00007f779d33cf77
  0x00007f779d33cf61: shl    $0x3,%r10
  0x00007f779d33cf65: movzwl 0x10(%r10,%rdx,2),%eax
  0x00007f779d33cf6b: add    $0x20,%rsp
  0x00007f779d33cf6f: pop    %rbp
  0x00007f779d33cf70: test   %eax,0x1593708a(%rip)        # 0x00007f77b2c74000
                                                ;   {poll_return}
  0x00007f779d33cf76: retq   
  0x00007f779d33cf77: mov    $0xffffffe4,%esi
  0x00007f779d33cf7c: mov    %edx,%ebp
  0x00007f779d33cf7e: mov    %r10d,(%rsp)
  0x00007f779d33cf82: nop
  0x00007f779d33cf83: callq  0x00007f779d0453e0  ; OopMap{[0]=NarrowOop off=104}
                                                ;*caload
                                                ; - java.lang.String::charAt@27 (line 660)
                                                ;   {runtime_call}
  0x00007f779d33cf88: callq  0x00007f77b256d2e0  ;*caload
                                                ; - java.lang.String::charAt@27 (line 660)
                                                ;   {runtime_call}
  0x00007f779d33cf8d: mov    %rsi,%rbp
  0x00007f779d33cf90: mov    %edx,0x4(%rsp)
  0x00007f779d33cf94: mov    $0xffffff65,%esi
  0x00007f779d33cf99: xchg   %ax,%ax
  0x00007f779d33cf9b: callq  0x00007f779d0453e0  ; OopMap{rbp=Oop off=128}
                                                ;*iflt
                                                ; - java.lang.String::charAt@1 (line 657)
                                                ;   {runtime_call}
  0x00007f779d33cfa0: callq  0x00007f77b256d2e0  ;*iflt
                                                ; - java.lang.String::charAt@1 (line 657)
                                                ;   {runtime_call}
  0x00007f779d33cfa5: mov    %rsi,(%rsp)
  0x00007f779d33cfa9: mov    %edx,0xc(%rsp)
  0x00007f779d33cfad: mov    $0xffffff65,%esi
  0x00007f779d33cfb2: nop
  0x00007f779d33cfb3: callq  0x00007f779d0453e0  ; OopMap{[0]=Oop off=152}
                                                ;*if_icmplt
                                                ; - java.lang.String::charAt@10 (line 657)
                                                ;   {runtime_call}
  0x00007f779d33cfb8: callq  0x00007f77b256d2e0  ;*if_icmplt
                                                ; - java.lang.String::charAt@10 (line 657)
                                                ;   {runtime_call}
  0x00007f779d33cfbd: mov    $0xfffffff6,%esi
  0x00007f779d33cfc2: nop
  0x00007f779d33cfc3: callq  0x00007f779d0453e0  ; OopMap{off=168}
                                                ;*arraylength
                                                ; - java.lang.String::charAt@9 (line 657)
                                                ;   {runtime_call}
  0x00007f779d33cfc8: callq  0x00007f77b256d2e0  ;*arraylength
                                                ; - java.lang.String::charAt@9 (line 657)
                                                ;   {runtime_call}
  0x00007f779d33cfcd: hlt    
  0x00007f779d33cfce: hlt    
  0x00007f779d33cfcf: hlt    
  0x00007f779d33cfd0: hlt    
  0x00007f779d33cfd1: hlt    
  0x00007f779d33cfd2: hlt    
  0x00007f779d33cfd3: hlt    
  0x00007f779d33cfd4: hlt    
  0x00007f779d33cfd5: hlt    
  0x00007f779d33cfd6: hlt    
  0x00007f779d33cfd7: hlt    
  0x00007f779d33cfd8: hlt    
  0x00007f779d33cfd9: hlt    
  0x00007f779d33cfda: hlt    
  0x00007f779d33cfdb: hlt    
  0x00007f779d33cfdc: hlt    
  0x00007f779d33cfdd: hlt    
  0x00007f779d33cfde: hlt    
  0x00007f779d33cfdf: hlt    
[Exception Handler]
[Stub Code]
  0x00007f779d33cfe0: jmpq   0x00007f779d070720  ;   {no_reloc}
[Deopt Handler Code]
  0x00007f779d33cfe5: callq  0x00007f779d33cfea
  0x00007f779d33cfea: subq   $0x5,(%rsp)
  0x00007f779d33cfef: jmpq   0x00007f779d046e40  ;   {runtime_call}
  0x00007f779d33cff4: hlt    
  0x00007f779d33cff5: hlt    
  0x00007f779d33cff6: hlt    
  0x00007f779d33cff7: hlt    
Decoding compiled method 0x00007f779d348910:
Code:
[Entry Point]
[Verified Entry Point]
[Constants]
  # {method} {0x00007f778391b550} 'copyOf' '([BI)[B' in 'java/util/Arrays'
  # parm0:    rsi:rsi   = '[B'
  # parm1:    rdx       = int
  #           [sp+0x60]  (sp of caller)
  0x00007f779d348a80: mov    %eax,-0x14000(%rsp)
  0x00007f779d348a87: push   %rbp
  0x00007f779d348a88: sub    $0x50,%rsp
  0x00007f779d348a8c: mov    %rdx,%r8
  0x00007f779d348a8f: movabs $0x7f7783a9e350,%rbx  ;   {metadata(method data for {method} {0x00007f778391b550} 'copyOf' '([BI)[B' in 'java/util/Arrays')}
  0x00007f779d348a99: mov    0xdc(%rbx),%edx
  0x00007f779d348a9f: add    $0x8,%edx
  0x00007f779d348aa2: mov    %edx,0xdc(%rbx)
  0x00007f779d348aa8: movabs $0x7f778391b550,%rbx  ;   {metadata({method} {0x00007f778391b550} 'copyOf' '([BI)[B' in 'java/util/Arrays')}
  0x00007f779d348ab2: and    $0x1ff8,%edx
  0x00007f779d348ab8: cmp    $0x0,%edx
  0x00007f779d348abb: je     0x00007f779d348bad  ;*iload_1
                                                ; - java.util.Arrays::copyOf@0 (line 3236)

  0x00007f779d348ac1: mov    %r8,%rbx
  0x00007f779d348ac4: movabs $0x7c00007a8,%rdx  ;   {metadata({type array byte})}
  0x00007f779d348ace: mov    %rsi,%r9
  0x00007f779d348ad1: movslq %ebx,%rbx
  0x00007f779d348ad4: mov    %rbx,%rdi
  0x00007f779d348ad7: cmp    $0xffffff,%rbx
  0x00007f779d348ade: ja     0x00007f779d348bc4
  0x00007f779d348ae4: movabs $0x17,%rsi
  0x00007f779d348aee: lea    (%rsi,%rbx,1),%rsi
  0x00007f779d348af2: and    $0xfffffffffffffff8,%rsi
  0x00007f779d348af6: mov    0x60(%r15),%rax
  0x00007f779d348afa: lea    (%rax,%rsi,1),%rsi
  0x00007f779d348afe: cmp    0x70(%r15),%rsi
  0x00007f779d348b02: ja     0x00007f779d348bc4
  0x00007f779d348b08: mov    %rsi,0x60(%r15)
  0x00007f779d348b0c: sub    %rax,%rsi
  0x00007f779d348b0f: movq   $0x1,(%rax)
  0x00007f779d348b16: mov    %rdx,%rcx
  0x00007f779d348b19: shr    $0x3,%rcx
  0x00007f779d348b1d: mov    %ecx,0x8(%rax)
  0x00007f779d348b20: mov    %ebx,0xc(%rax)
  0x00007f779d348b23: sub    $0x10,%rsi
  0x00007f779d348b27: je     0x00007f779d348b3e
  0x00007f779d348b2d: xor    %rbx,%rbx
  0x00007f779d348b30: shr    $0x3,%rsi
  0x00007f779d348b34: mov    %rbx,0x8(%rax,%rsi,8)
  0x00007f779d348b39: dec    %rsi
  0x00007f779d348b3c: jne    0x00007f779d348b34  ;*newarray
                                                ; - java.util.Arrays::copyOf@1 (line 3236)

  0x00007f779d348b3e: mov    0xc(%r9),%esi      ;*arraylength
                                                ; - java.util.Arrays::copyOf@9 (line 3237)
                                                ; implicit exception: dispatches to 0x00007f779d348bce
  0x00007f779d348b42: movabs $0x7f7783a9e350,%rdx  ;   {metadata(method data for {method} {0x00007f778391b550} 'copyOf' '([BI)[B' in 'java/util/Arrays')}
  0x00007f779d348b4c: addq   $0x1,0x108(%rdx)
  0x00007f779d348b54: mov    %r8,%rdx           ;*invokestatic min
                                                ; - java.util.Arrays::copyOf@11 (line 3238)

  0x00007f779d348b57: mov    %rax,0x40(%rsp)
  0x00007f779d348b5c: mov    %r9,0x38(%rsp)
  0x00007f779d348b61: nop
  0x00007f779d348b62: nop
  0x00007f779d348b63: nop
  0x00007f779d348b64: nop
  0x00007f779d348b65: nop
  0x00007f779d348b66: nop
  0x00007f779d348b67: callq  0x00007f779d046260  ; OopMap{[64]=Oop [56]=Oop off=236}
                                                ;*invokestatic min
                                                ; - java.util.Arrays::copyOf@11 (line 3238)
                                                ;   {static_call}
  0x00007f779d348b6c: movabs $0x7f7783a9e350,%rsi  ;   {metadata(method data for {method} {0x00007f778391b550} 'copyOf' '([BI)[B' in 'java/util/Arrays')}
  0x00007f779d348b76: addq   $0x1,0x118(%rsi)
  0x00007f779d348b7e: mov    0x38(%rsp),%rsi
  0x00007f779d348b83: mov    $0x0,%edx
  0x00007f779d348b88: mov    0x40(%rsp),%rcx
  0x00007f779d348b8d: mov    $0x0,%r8d
  0x00007f779d348b93: mov    %rax,%r9           ;*invokestatic arraycopy
                                                ; - java.util.Arrays::copyOf@14 (line 3237)

  0x00007f779d348b96: nop
  0x00007f779d348b97: callq  0x00007f779d046260  ; OopMap{[64]=Oop off=284}
                                                ;*invokestatic arraycopy
                                                ; - java.util.Arrays::copyOf@14 (line 3237)
                                                ;   {static_call}
  0x00007f779d348b9c: mov    0x40(%rsp),%rax
  0x00007f779d348ba1: add    $0x50,%rsp
  0x00007f779d348ba5: pop    %rbp
  0x00007f779d348ba6: test   %eax,0x1592b554(%rip)        # 0x00007f77b2c74100
                                                ;   {poll_return}
  0x00007f779d348bac: retq   
  0x00007f779d348bad: mov    %rbx,0x8(%rsp)
  0x00007f779d348bb2: movq   $0xffffffffffffffff,(%rsp)
  0x00007f779d348bba: callq  0x00007f779d339320  ; OopMap{rsi=Oop off=319}
                                                ;*synchronization entry
                                                ; - java.util.Arrays::copyOf@-1 (line 3236)
                                                ;   {runtime_call}
  0x00007f779d348bbf: jmpq   0x00007f779d348ac1
  0x00007f779d348bc4: callq  0x00007f779d332460  ; OopMap{r9=Oop off=329}
                                                ;*newarray
                                                ; - java.util.Arrays::copyOf@1 (line 3236)
                                                ;   {runtime_call}
  0x00007f779d348bc9: jmpq   0x00007f779d348b3e
  0x00007f779d348bce: callq  0x00007f779d333ec0  ; OopMap{r9=Oop rax=Oop off=339}
                                                ;*arraylength
                                                ; - java.util.Arrays::copyOf@9 (line 3237)
                                                ;   {runtime_call}
  0x00007f779d348bd3: nop
  0x00007f779d348bd4: nop
  0x00007f779d348bd5: mov    0x300(%r15),%rax
  0x00007f779d348bdc: movabs $0x0,%r10
  0x00007f779d348be6: mov    %r10,0x300(%r15)
  0x00007f779d348bed: movabs $0x0,%r10
  0x00007f779d348bf7: mov    %r10,0x308(%r15)
  0x00007f779d348bfe: add    $0x50,%rsp
  0x00007f779d348c02: pop    %rbp
  0x00007f779d348c03: jmpq   0x00007f779d0700a0  ;   {runtime_call}
  0x00007f779d348c08: hlt    
  0x00007f779d348c09: hlt    
  0x00007f779d348c0a: hlt    
  0x00007f779d348c0b: hlt    
  0x00007f779d348c0c: hlt    
  0x00007f779d348c0d: hlt    
  0x00007f779d348c0e: hlt    
  0x00007f779d348c0f: hlt    
  0x00007f779d348c10: hlt    
  0x00007f779d348c11: hlt    
  0x00007f779d348c12: hlt    
  0x00007f779d348c13: hlt    
  0x00007f779d348c14: hlt    
  0x00007f779d348c15: hlt    
  0x00007f779d348c16: hlt    
  0x00007f779d348c17: hlt    
  0x00007f779d348c18: hlt    
  0x00007f779d348c19: hlt    
  0x00007f779d348c1a: hlt    
  0x00007f779d348c1b: hlt    
  0x00007f779d348c1c: hlt    
  0x00007f779d348c1d: hlt    
  0x00007f779d348c1e: hlt    
  0x00007f779d348c1f: hlt    
[Stub Code]
  0x00007f779d348c20: nop                       ;   {no_reloc}
  0x00007f779d348c21: nop
  0x00007f779d348c22: nop
  0x00007f779d348c23: nop
  0x00007f779d348c24: nop
  0x00007f779d348c25: movabs $0x0,%rbx          ;   {static_stub}
  0x00007f779d348c2f: jmpq   0x00007f779d348c2f  ;   {runtime_call}
  0x00007f779d348c34: nop
  0x00007f779d348c35: movabs $0x0,%rbx          ;   {static_stub}
  0x00007f779d348c3f: jmpq   0x00007f779d348c3f  ;   {runtime_call}
[Exception Handler]
  0x00007f779d348c44: callq  0x00007f779d3317a0  ;   {runtime_call}
  0x00007f779d348c49: mov    %rsp,-0x28(%rsp)
  0x00007f779d348c4e: sub    $0x80,%rsp
  0x00007f779d348c55: mov    %rax,0x78(%rsp)
  0x00007f779d348c5a: mov    %rcx,0x70(%rsp)
  0x00007f779d348c5f: mov    %rdx,0x68(%rsp)
  0x00007f779d348c64: mov    %rbx,0x60(%rsp)
  0x00007f779d348c69: mov    %rbp,0x50(%rsp)
  0x00007f779d348c6e: mov    %rsi,0x48(%rsp)
  0x00007f779d348c73: mov    %rdi,0x40(%rsp)
  0x00007f779d348c78: mov    %r8,0x38(%rsp)
  0x00007f779d348c7d: mov    %r9,0x30(%rsp)
  0x00007f779d348c82: mov    %r10,0x28(%rsp)
  0x00007f779d348c87: mov    %r11,0x20(%rsp)
  0x00007f779d348c8c: mov    %r12,0x18(%rsp)
  0x00007f779d348c91: mov    %r13,0x10(%rsp)
  0x00007f779d348c96: mov    %r14,0x8(%rsp)
  0x00007f779d348c9b: mov    %r15,(%rsp)
  0x00007f779d348c9f: movabs $0x7f77b276249e,%rdi  ;   {external_word}
  0x00007f779d348ca9: movabs $0x7f779d348c49,%rsi  ;   {internal_word}
  0x00007f779d348cb3: mov    %rsp,%rdx
  0x00007f779d348cb6: and    $0xfffffffffffffff0,%rsp
  0x00007f779d348cba: callq  0x00007f77b2488460  ;   {runtime_call}
  0x00007f779d348cbf: hlt    
[Deopt Handler Code]
  0x00007f779d348cc0: movabs $0x7f779d348cc0,%r10  ;   {section_word}
  0x00007f779d348cca: push   %r10
  0x00007f779d348ccc: jmpq   0x00007f779d046e40  ;   {runtime_call}
  0x00007f779d348cd1: hlt    
  0x00007f779d348cd2: hlt    
  0x00007f779d348cd3: hlt    
  0x00007f779d348cd4: hlt    
  0x00007f779d348cd5: hlt    
  0x00007f779d348cd6: hlt    
  0x00007f779d348cd7: hlt    
Decoding compiled method 0x00007f779d33c8d0:
Code:
[Entry Point]
[Constants]
  # {method} {0x00007f7783875338} '<init>' '(I)V' in 'java/lang/AbstractStringBuilder'
  # this:     rsi:rsi   = 'java/lang/AbstractStringBuilder'
  # parm0:    rdx       = int
  #           [sp+0x50]  (sp of caller)
  0x00007f779d33ca40: mov    0x8(%rsi),%r10d
  0x00007f779d33ca44: shl    $0x3,%r10
  0x00007f779d33ca48: cmp    %rax,%r10
  0x00007f779d33ca4b: jne    0x00007f779d045ba0  ;   {runtime_call}
  0x00007f779d33ca51: nopl   0x0(%rax,%rax,1)
  0x00007f779d33ca59: nopl   0x0(%rax)
[Verified Entry Point]
  0x00007f779d33ca60: mov    %eax,-0x14000(%rsp)
  0x00007f779d33ca67: push   %rbp
  0x00007f779d33ca68: sub    $0x40,%rsp
  0x00007f779d33ca6c: movabs $0x7f7783a9e1f8,%rdi  ;   {metadata(method data for {method} {0x00007f7783875338} '<init>' '(I)V' in 'java/lang/AbstractStringBuilder')}
  0x00007f779d33ca76: mov    0xdc(%rdi),%ebx
  0x00007f779d33ca7c: add    $0x8,%ebx
  0x00007f779d33ca7f: mov    %ebx,0xdc(%rdi)
  0x00007f779d33ca85: movabs $0x7f7783875338,%rdi  ;   {metadata({method} {0x00007f7783875338} '<init>' '(I)V' in 'java/lang/AbstractStringBuilder')}
  0x00007f779d33ca8f: and    $0x1ff8,%ebx
  0x00007f779d33ca95: cmp    $0x0,%ebx
  0x00007f779d33ca98: je     0x00007f779d33cb75  ;*aload_0
                                                ; - java.lang.AbstractStringBuilder::<init>@0 (line 67)

  0x00007f779d33ca9e: mov    %edx,0x20(%rsp)
  0x00007f779d33caa2: mov    %rsi,%rdi
  0x00007f779d33caa5: movabs $0x7f7783a9e1f8,%rbx  ;   {metadata(method data for {method} {0x00007f7783875338} '<init>' '(I)V' in 'java/lang/AbstractStringBuilder')}
  0x00007f779d33caaf: addq   $0x1,0x108(%rbx)
  0x00007f779d33cab7: mov    %rsi,%rdi
  0x00007f779d33caba: mov    %rdi,%rsi          ;*invokespecial <init>
                                                ; - java.lang.AbstractStringBuilder::<init>@1 (line 67)

  0x00007f779d33cabd: mov    %rdi,0x28(%rsp)
  0x00007f779d33cac2: nop
  0x00007f779d33cac3: nop
  0x00007f779d33cac4: nop
  0x00007f779d33cac5: nop
  0x00007f779d33cac6: nop
  0x00007f779d33cac7: callq  0x00007f779d045de0  ; OopMap{[40]=Oop off=140}
                                                ;*invokespecial <init>
                                                ; - java.lang.AbstractStringBuilder::<init>@1 (line 67)
                                                ;   {optimized virtual_call}
  0x00007f779d33cacc: mov    0x20(%rsp),%ebx
  0x00007f779d33cad0: movabs $0x7c0000208,%rdx  ;   {metadata({type array char})}
  0x00007f779d33cada: movslq %ebx,%rbx
  0x00007f779d33cadd: mov    %rbx,%rdi
  0x00007f779d33cae0: cmp    $0xffffff,%rbx
  0x00007f779d33cae7: ja     0x00007f779d33cb8c
  0x00007f779d33caed: movabs $0x17,%rsi
  0x00007f779d33caf7: lea    (%rsi,%rbx,2),%rsi
  0x00007f779d33cafb: and    $0xfffffffffffffff8,%rsi
  0x00007f779d33caff: mov    0x60(%r15),%rax
  0x00007f779d33cb03: lea    (%rax,%rsi,1),%rsi
  0x00007f779d33cb07: cmp    0x70(%r15),%rsi
  0x00007f779d33cb0b: ja     0x00007f779d33cb8c
  0x00007f779d33cb11: mov    %rsi,0x60(%r15)
  0x00007f779d33cb15: sub    %rax,%rsi
  0x00007f779d33cb18: movq   $0x1,(%rax)
  0x00007f779d33cb1f: mov    %rdx,%rcx
  0x00007f779d33cb22: shr    $0x3,%rcx
  0x00007f779d33cb26: mov    %ecx,0x8(%rax)
  0x00007f779d33cb29: mov    %ebx,0xc(%rax)
  0x00007f779d33cb2c: sub    $0x10,%rsi
  0x00007f779d33cb30: je     0x00007f779d33cb47
  0x00007f779d33cb36: xor    %rbx,%rbx
  0x00007f779d33cb39: shr    $0x3,%rsi
  0x00007f779d33cb3d: mov    %rbx,0x8(%rax,%rsi,8)
  0x00007f779d33cb42: dec    %rsi
  0x00007f779d33cb45: jne    0x00007f779d33cb3d  ;*newarray
                                                ; - java.lang.AbstractStringBuilder::<init>@6 (line 68)

  0x00007f779d33cb47: mov    0x28(%rsp),%rsi
  0x00007f779d33cb4c: mov    %rax,%r10
  0x00007f779d33cb4f: shr    $0x3,%r10
  0x00007f779d33cb53: mov    %r10d,0x10(%rsi)
  0x00007f779d33cb57: shr    $0x9,%rsi
  0x00007f779d33cb5b: movabs $0x7f77991ff000,%rdi
  0x00007f779d33cb65: movb   $0x0,(%rsi,%rdi,1)  ;*putfield value
                                                ; - java.lang.AbstractStringBuilder::<init>@8 (line 68)

  0x00007f779d33cb69: add    $0x40,%rsp
  0x00007f779d33cb6d: pop    %rbp
  0x00007f779d33cb6e: test   %eax,0x1593758c(%rip)        # 0x00007f77b2c74100
                                                ;   {poll_return}
  0x00007f779d33cb74: retq   
  0x00007f779d33cb75: mov    %rdi,0x8(%rsp)
  0x00007f779d33cb7a: movq   $0xffffffffffffffff,(%rsp)
  0x00007f779d33cb82: callq  0x00007f779d339320  ; OopMap{rsi=Oop off=327}
                                                ;*synchronization entry
                                                ; - java.lang.AbstractStringBuilder::<init>@-1 (line 67)
                                                ;   {runtime_call}
  0x00007f779d33cb87: jmpq   0x00007f779d33ca9e
  0x00007f779d33cb8c: callq  0x00007f779d332460  ; OopMap{[40]=Oop off=337}
                                                ;*newarray
                                                ; - java.lang.AbstractStringBuilder::<init>@6 (line 68)
                                                ;   {runtime_call}
  0x00007f779d33cb91: jmp    0x00007f779d33cb47
  0x00007f779d33cb93: nop
  0x00007f779d33cb94: nop
  0x00007f779d33cb95: mov    0x300(%r15),%rax
  0x00007f779d33cb9c: movabs $0x0,%r10
  0x00007f779d33cba6: mov    %r10,0x300(%r15)
  0x00007f779d33cbad: movabs $0x0,%r10
  0x00007f779d33cbb7: mov    %r10,0x308(%r15)
  0x00007f779d33cbbe: add    $0x40,%rsp
  0x00007f779d33cbc2: pop    %rbp
  0x00007f779d33cbc3: jmpq   0x00007f779d0700a0  ;   {runtime_call}
  0x00007f779d33cbc8: hlt    
  0x00007f779d33cbc9: hlt    
  0x00007f779d33cbca: hlt    
  0x00007f779d33cbcb: hlt    
  0x00007f779d33cbcc: hlt    
  0x00007f779d33cbcd: hlt    
  0x00007f779d33cbce: hlt    
  0x00007f779d33cbcf: hlt    
  0x00007f779d33cbd0: hlt    
  0x00007f779d33cbd1: hlt    
  0x00007f779d33cbd2: hlt    
  0x00007f779d33cbd3: hlt    
  0x00007f779d33cbd4: hlt    
  0x00007f779d33cbd5: hlt    
  0x00007f779d33cbd6: hlt    
  0x00007f779d33cbd7: hlt    
  0x00007f779d33cbd8: hlt    
  0x00007f779d33cbd9: hlt    
  0x00007f779d33cbda: hlt    
  0x00007f779d33cbdb: hlt    
  0x00007f779d33cbdc: hlt    
  0x00007f779d33cbdd: hlt    
  0x00007f779d33cbde: hlt    
  0x00007f779d33cbdf: hlt    
[Stub Code]
  0x00007f779d33cbe0: nop                       ;   {no_reloc}
  0x00007f779d33cbe1: nop
  0x00007f779d33cbe2: nop
  0x00007f779d33cbe3: nop
  0x00007f779d33cbe4: nop
  0x00007f779d33cbe5: movabs $0x0,%rbx          ;   {static_stub}
  0x00007f779d33cbef: jmpq   0x00007f779d33cbef  ;   {runtime_call}
[Exception Handler]
  0x00007f779d33cbf4: callq  0x00007f779d3317a0  ;   {runtime_call}
  0x00007f779d33cbf9: mov    %rsp,-0x28(%rsp)
  0x00007f779d33cbfe: sub    $0x80,%rsp
  0x00007f779d33cc05: mov    %rax,0x78(%rsp)
  0x00007f779d33cc0a: mov    %rcx,0x70(%rsp)
  0x00007f779d33cc0f: mov    %rdx,0x68(%rsp)
  0x00007f779d33cc14: mov    %rbx,0x60(%rsp)
  0x00007f779d33cc19: mov    %rbp,0x50(%rsp)
  0x00007f779d33cc1e: mov    %rsi,0x48(%rsp)
  0x00007f779d33cc23: mov    %rdi,0x40(%rsp)
  0x00007f779d33cc28: mov    %r8,0x38(%rsp)
  0x00007f779d33cc2d: mov    %r9,0x30(%rsp)
  0x00007f779d33cc32: mov    %r10,0x28(%rsp)
  0x00007f779d33cc37: mov    %r11,0x20(%rsp)
  0x00007f779d33cc3c: mov    %r12,0x18(%rsp)
  0x00007f779d33cc41: mov    %r13,0x10(%rsp)
  0x00007f779d33cc46: mov    %r14,0x8(%rsp)
  0x00007f779d33cc4b: mov    %r15,(%rsp)
  0x00007f779d33cc4f: movabs $0x7f77b276249e,%rdi  ;   {external_word}
  0x00007f779d33cc59: movabs $0x7f779d33cbf9,%rsi  ;   {internal_word}
  0x00007f779d33cc63: mov    %rsp,%rdx
  0x00007f779d33cc66: and    $0xfffffffffffffff0,%rsp
  0x00007f779d33cc6a: callq  0x00007f77b2488460  ;   {runtime_call}
  0x00007f779d33cc6f: hlt    
[Deopt Handler Code]
  0x00007f779d33cc70: movabs $0x7f779d33cc70,%r10  ;   {section_word}
  0x00007f779d33cc7a: push   %r10
  0x00007f779d33cc7c: jmpq   0x00007f779d046e40  ;   {runtime_call}
  0x00007f779d33cc81: hlt    
  0x00007f779d33cc82: hlt    
  0x00007f779d33cc83: hlt    
  0x00007f779d33cc84: hlt    
  0x00007f779d33cc85: hlt    
  0x00007f779d33cc86: hlt    
  0x00007f779d33cc87: hlt    
Decoding compiled method 0x00007f779d347f10:
Code:
[Entry Point]
[Constants]
  # {method} {0x00007f7783804618} 'equals' '(Ljava/lang/Object;)Z' in 'java/lang/String'
  # this:     rsi:rsi   = 'java/lang/String'
  # parm0:    rdx:rdx   = 'java/lang/Object'
  #           [sp+0x40]  (sp of caller)
  0x00007f779d3480a0: mov    0x8(%rsi),%r10d
  0x00007f779d3480a4: shl    $0x3,%r10
  0x00007f779d3480a8: cmp    %rax,%r10
  0x00007f779d3480ab: jne    0x00007f779d045ba0  ;   {runtime_call}
  0x00007f779d3480b1: nopl   0x0(%rax,%rax,1)
  0x00007f779d3480b9: nopl   0x0(%rax)
[Verified Entry Point]
  0x00007f779d3480c0: mov    %eax,-0x14000(%rsp)
  0x00007f779d3480c7: push   %rbp
  0x00007f779d3480c8: sub    $0x30,%rsp
  0x00007f779d3480cc: movabs $0x7f7783a06a40,%rax  ;   {metadata(method data for {method} {0x00007f7783804618} 'equals' '(Ljava/lang/Object;)Z' in 'java/lang/String')}
  0x00007f779d3480d6: mov    0xdc(%rax),%edi
  0x00007f779d3480dc: add    $0x8,%edi
  0x00007f779d3480df: mov    %edi,0xdc(%rax)
  0x00007f779d3480e5: movabs $0x7f7783804618,%rax  ;   {metadata({method} {0x00007f7783804618} 'equals' '(Ljava/lang/Object;)Z' in 'java/lang/String')}
  0x00007f779d3480ef: and    $0x1ff8,%edi
  0x00007f779d3480f5: cmp    $0x0,%edi
  0x00007f779d3480f8: je     0x00007f779d3484c6  ;*aload_0
                                                ; - java.lang.String::equals@0 (line 977)

  0x00007f779d3480fe: cmp    %rdx,%rsi
  0x00007f779d348101: movabs $0x7f7783a06a40,%rax  ;   {metadata(method data for {method} {0x00007f7783804618} 'equals' '(Ljava/lang/Object;)Z' in 'java/lang/String')}
  0x00007f779d34810b: movabs $0x108,%rdi
  0x00007f779d348115: jne    0x00007f779d348125
  0x00007f779d34811b: movabs $0x118,%rdi
  0x00007f779d348125: mov    (%rax,%rdi,1),%rbx
  0x00007f779d348129: lea    0x1(%rbx),%rbx
  0x00007f779d34812d: mov    %rbx,(%rax,%rdi,1)
  0x00007f779d348131: je     0x00007f779d3484b5  ;*if_acmpne
                                                ; - java.lang.String::equals@2 (line 977)

  0x00007f779d348137: cmp    $0x0,%rdx
  0x00007f779d34813b: jne    0x00007f779d348156
  0x00007f779d34813d: movabs $0x7f7783a06a40,%rbx  ;   {metadata(method data for {method} {0x00007f7783804618} 'equals' '(Ljava/lang/Object;)Z' in 'java/lang/String')}
  0x00007f779d348147: orl    $0x100,0x120(%rbx)
  0x00007f779d348151: jmpq   0x00007f779d348216
  0x00007f779d348156: movabs $0x7c00016d0,%rcx  ;   {metadata('java/lang/String')}
  0x00007f779d348160: mov    0x8(%rdx),%edi
  0x00007f779d348163: shl    $0x3,%rdi
  0x00007f779d348167: cmp    %rdi,%rcx
  0x00007f779d34816a: jne    0x00007f779d3481fa
  0x00007f779d348170: movabs $0x7f7783a06a40,%rbx  ;   {metadata(method data for {method} {0x00007f7783804618} 'equals' '(Ljava/lang/Object;)Z' in 'java/lang/String')}
  0x00007f779d34817a: mov    0x8(%rdx),%ecx
  0x00007f779d34817d: shl    $0x3,%rcx
  0x00007f779d348181: cmp    0x130(%rbx),%rcx
  0x00007f779d348188: jne    0x00007f779d348197
  0x00007f779d34818a: addq   $0x1,0x138(%rbx)
  0x00007f779d348192: jmpq   0x00007f779d34821b
  0x00007f779d348197: cmp    0x140(%rbx),%rcx
  0x00007f779d34819e: jne    0x00007f779d3481ad
  0x00007f779d3481a0: addq   $0x1,0x148(%rbx)
  0x00007f779d3481a8: jmpq   0x00007f779d34821b
  0x00007f779d3481ad: cmpq   $0x0,0x130(%rbx)
  0x00007f779d3481b8: jne    0x00007f779d3481d1
  0x00007f779d3481ba: mov    %rcx,0x130(%rbx)
  0x00007f779d3481c1: movq   $0x1,0x138(%rbx)
  0x00007f779d3481cc: jmpq   0x00007f779d34821b
  0x00007f779d3481d1: cmpq   $0x0,0x140(%rbx)
  0x00007f779d3481dc: jne    0x00007f779d3481f5
  0x00007f779d3481de: mov    %rcx,0x140(%rbx)
  0x00007f779d3481e5: movq   $0x1,0x148(%rbx)
  0x00007f779d3481f0: jmpq   0x00007f779d34821b
  0x00007f779d3481f5: jmpq   0x00007f779d34821b
  0x00007f779d3481fa: movabs $0x7f7783a06a40,%rbx  ;   {metadata(method data for {method} {0x00007f7783804618} 'equals' '(Ljava/lang/Object;)Z' in 'java/lang/String')}
  0x00007f779d348204: subq   $0x1,0x128(%rbx)
  0x00007f779d34820c: jmpq   0x00007f779d348216
  0x00007f779d348211: jmpq   0x00007f779d34821b
  0x00007f779d348216: xor    %rax,%rax
  0x00007f779d348219: jmp    0x00007f779d348225
  0x00007f779d34821b: movabs $0x1,%rax          ;*instanceof
                                                ; - java.lang.String::equals@8 (line 980)

  0x00007f779d348225: cmp    $0x0,%eax
  0x00007f779d348228: movabs $0x7f7783a06a40,%rax  ;   {metadata(method data for {method} {0x00007f7783804618} 'equals' '(Ljava/lang/Object;)Z' in 'java/lang/String')}
  0x00007f779d348232: movabs $0x158,%rdi
  0x00007f779d34823c: je     0x00007f779d34824c
  0x00007f779d348242: movabs $0x168,%rdi
  0x00007f779d34824c: mov    (%rax,%rdi,1),%rbx
  0x00007f779d348250: lea    0x1(%rbx),%rbx
  0x00007f779d348254: mov    %rbx,(%rax,%rdi,1)
  0x00007f779d348258: je     0x00007f779d3484a4  ;*ifeq
                                                ; - java.lang.String::equals@11 (line 980)

  0x00007f779d34825e: cmp    $0x0,%rdx
  0x00007f779d348262: jne    0x00007f779d34827d
  0x00007f779d348264: movabs $0x7f7783a06a40,%rbx  ;   {metadata(method data for {method} {0x00007f7783804618} 'equals' '(Ljava/lang/Object;)Z' in 'java/lang/String')}
  0x00007f779d34826e: orl    $0x100,0x170(%rbx)
  0x00007f779d348278: jmpq   0x00007f779d34833d
  0x00007f779d34827d: movabs $0x7c00016d0,%rax  ;   {metadata('java/lang/String')}
  0x00007f779d348287: mov    0x8(%rdx),%edi
  0x00007f779d34828a: shl    $0x3,%rdi
  0x00007f779d34828e: cmp    %rdi,%rax
  0x00007f779d348291: jne    0x00007f779d348321
  0x00007f779d348297: movabs $0x7f7783a06a40,%rbx  ;   {metadata(method data for {method} {0x00007f7783804618} 'equals' '(Ljava/lang/Object;)Z' in 'java/lang/String')}
  0x00007f779d3482a1: mov    0x8(%rdx),%eax
  0x00007f779d3482a4: shl    $0x3,%rax
  0x00007f779d3482a8: cmp    0x180(%rbx),%rax
  0x00007f779d3482af: jne    0x00007f779d3482be
  0x00007f779d3482b1: addq   $0x1,0x188(%rbx)
  0x00007f779d3482b9: jmpq   0x00007f779d34833d
  0x00007f779d3482be: cmp    0x190(%rbx),%rax
  0x00007f779d3482c5: jne    0x00007f779d3482d4
  0x00007f779d3482c7: addq   $0x1,0x198(%rbx)
  0x00007f779d3482cf: jmpq   0x00007f779d34833d
  0x00007f779d3482d4: cmpq   $0x0,0x180(%rbx)
  0x00007f779d3482df: jne    0x00007f779d3482f8
  0x00007f779d3482e1: mov    %rax,0x180(%rbx)
  0x00007f779d3482e8: movq   $0x1,0x188(%rbx)
  0x00007f779d3482f3: jmpq   0x00007f779d34833d
  0x00007f779d3482f8: cmpq   $0x0,0x190(%rbx)
  0x00007f779d348303: jne    0x00007f779d34831c
  0x00007f779d348305: mov    %rax,0x190(%rbx)
  0x00007f779d34830c: movq   $0x1,0x198(%rbx)
  0x00007f779d348317: jmpq   0x00007f779d34833d
  0x00007f779d34831c: jmpq   0x00007f779d34833d
  0x00007f779d348321: movabs $0x7f7783a06a40,%rbx  ;   {metadata(method data for {method} {0x00007f7783804618} 'equals' '(Ljava/lang/Object;)Z' in 'java/lang/String')}
  0x00007f779d34832b: subq   $0x1,0x178(%rbx)
  0x00007f779d348333: jmpq   0x00007f779d3484dd
  0x00007f779d348338: jmpq   0x00007f779d34833d
  0x00007f779d34833d: mov    %rdx,%rax          ;*checkcast
                                                ; - java.lang.String::equals@15 (line 981)

  0x00007f779d348340: mov    0xc(%rsi),%esi
  0x00007f779d348343: shl    $0x3,%rsi          ;*getfield value
                                                ; - java.lang.String::equals@20 (line 982)

  0x00007f779d348347: mov    0xc(%rsi),%edi     ;*arraylength
                                                ; - java.lang.String::equals@23 (line 982)
                                                ; implicit exception: dispatches to 0x00007f779d3484e6
  0x00007f779d34834a: mov    0xc(%rax),%eax     ; implicit exception: dispatches to 0x00007f779d3484eb
  0x00007f779d34834d: shl    $0x3,%rax          ;*getfield value
                                                ; - java.lang.String::equals@27 (line 983)

  0x00007f779d348351: mov    0xc(%rax),%ebx     ;*arraylength
                                                ; - java.lang.String::equals@30 (line 983)
                                                ; implicit exception: dispatches to 0x00007f779d3484f0
  0x00007f779d348354: cmp    %ebx,%edi
  0x00007f779d348356: movabs $0x7f7783a06a40,%rbx  ;   {metadata(method data for {method} {0x00007f7783804618} 'equals' '(Ljava/lang/Object;)Z' in 'java/lang/String')}
  0x00007f779d348360: movabs $0x1a8,%rdx
  0x00007f779d34836a: jne    0x00007f779d34837a
  0x00007f779d348370: movabs $0x1b8,%rdx
  0x00007f779d34837a: mov    (%rbx,%rdx,1),%rcx
  0x00007f779d34837e: lea    0x1(%rcx),%rcx
  0x00007f779d348382: mov    %rcx,(%rbx,%rdx,1)
  0x00007f779d348386: jne    0x00007f779d3484a4  ;*if_icmpne
                                                ; - java.lang.String::equals@31 (line 983)

  0x00007f779d34838c: mov    $0x0,%ebx
  0x00007f779d348391: jmpq   0x00007f779d34843f  ;*iload_3
                                                ; - java.lang.String::equals@49 (line 987)

  0x00007f779d348396: xchg   %ax,%ax
  0x00007f779d348398: movslq %ebx,%rdi
  0x00007f779d34839b: cmp    0xc(%rsi),%ebx
  0x00007f779d34839e: jae    0x00007f779d3484f5
  0x00007f779d3483a4: movzwl 0x10(%rsi,%rdi,2),%edi  ;*caload
                                                ; - java.lang.String::equals@60 (line 988)

  0x00007f779d3483a9: movslq %ebx,%rcx
  0x00007f779d3483ac: cmp    0xc(%rax),%ebx
  0x00007f779d3483af: jae    0x00007f779d3484fe
  0x00007f779d3483b5: movzwl 0x10(%rax,%rcx,2),%ecx  ;*caload
                                                ; - java.lang.String::equals@65 (line 988)

  0x00007f779d3483ba: cmp    %ecx,%edi
  0x00007f779d3483bc: movabs $0x7f7783a06a40,%rdi  ;   {metadata(method data for {method} {0x00007f7783804618} 'equals' '(Ljava/lang/Object;)Z' in 'java/lang/String')}
  0x00007f779d3483c6: movabs $0x1e8,%rcx
  0x00007f779d3483d0: je     0x00007f779d3483e0
  0x00007f779d3483d6: movabs $0x1f8,%rcx
  0x00007f779d3483e0: mov    (%rdi,%rcx,1),%r8
  0x00007f779d3483e4: lea    0x1(%r8),%r8
  0x00007f779d3483e8: mov    %r8,(%rdi,%rcx,1)
  0x00007f779d3483ec: jne    0x00007f779d348482  ;*if_icmpeq
                                                ; - java.lang.String::equals@66 (line 988)

  0x00007f779d3483f2: inc    %ebx
  0x00007f779d3483f4: movabs $0x7f7783a06a40,%rdi  ;   {metadata(method data for {method} {0x00007f7783804618} 'equals' '(Ljava/lang/Object;)Z' in 'java/lang/String')}
  0x00007f779d3483fe: mov    0xe0(%rdi),%ecx
  0x00007f779d348404: add    $0x8,%ecx
  0x00007f779d348407: mov    %ecx,0xe0(%rdi)
  0x00007f779d34840d: movabs $0x7f7783804618,%rdi  ;   {metadata({method} {0x00007f7783804618} 'equals' '(Ljava/lang/Object;)Z' in 'java/lang/String')}
  0x00007f779d348417: and    $0xfff8,%ecx
  0x00007f779d34841d: cmp    $0x0,%ecx
  0x00007f779d348420: je     0x00007f779d348507  ; OopMap{rax=Oop rsi=Oop off=902}
                                                ;*goto
                                                ; - java.lang.String::equals@74 (line 990)

  0x00007f779d348426: test   %eax,0x1592bcd4(%rip)        # 0x00007f77b2c74100
                                                ;   {poll}
  0x00007f779d34842c: movabs $0x7f7783a06a40,%rdi  ;   {metadata(method data for {method} {0x00007f7783804618} 'equals' '(Ljava/lang/Object;)Z' in 'java/lang/String')}
  0x00007f779d348436: incl   0x208(%rdi)
  0x00007f779d34843c: mov    %rdx,%rdi          ;*goto
                                                ; - java.lang.String::equals@74 (line 990)

  0x00007f779d34843f: mov    %rdi,%rdx
  0x00007f779d348442: dec    %edx
  0x00007f779d348444: cmp    $0x0,%edi
  0x00007f779d348447: movabs $0x7f7783a06a40,%rdi  ;   {metadata(method data for {method} {0x00007f7783804618} 'equals' '(Ljava/lang/Object;)Z' in 'java/lang/String')}
  0x00007f779d348451: movabs $0x1c8,%rcx
  0x00007f779d34845b: je     0x00007f779d34846b
  0x00007f779d348461: movabs $0x1d8,%rcx
  0x00007f779d34846b: mov    (%rdi,%rcx,1),%r8
  0x00007f779d34846f: lea    0x1(%r8),%r8
  0x00007f779d348473: mov    %r8,(%rdi,%rcx,1)
  0x00007f779d348477: je     0x00007f779d348493
  0x00007f779d34847d: jmpq   0x00007f779d348398  ;*ifeq
                                                ; - java.lang.String::equals@53 (line 987)

  0x00007f779d348482: mov    $0x0,%eax
  0x00007f779d348487: add    $0x30,%rsp
  0x00007f779d34848b: pop    %rbp
  0x00007f779d34848c: test   %eax,0x1592bc6e(%rip)        # 0x00007f77b2c74100
                                                ;   {poll_return}
  0x00007f779d348492: retq                      ;*ireturn
                                                ; - java.lang.String::equals@70 (line 989)

  0x00007f779d348493: mov    $0x1,%eax
  0x00007f779d348498: add    $0x30,%rsp
  0x00007f779d34849c: pop    %rbp
  0x00007f779d34849d: test   %eax,0x1592bc5d(%rip)        # 0x00007f77b2c74100
                                                ;   {poll_return}
  0x00007f779d3484a3: retq                      ;*ireturn
                                                ; - java.lang.String::equals@78 (line 992)

  0x00007f779d3484a4: mov    $0x0,%eax
  0x00007f779d3484a9: add    $0x30,%rsp
  0x00007f779d3484ad: pop    %rbp
  0x00007f779d3484ae: test   %eax,0x1592bc4c(%rip)        # 0x00007f77b2c74100
                                                ;   {poll_return}
  0x00007f779d3484b4: retq                      ;*ireturn
                                                ; - java.lang.String::equals@80 (line 995)

  0x00007f779d3484b5: mov    $0x1,%eax
  0x00007f779d3484ba: add    $0x30,%rsp
  0x00007f779d3484be: pop    %rbp
  0x00007f779d3484bf: test   %eax,0x1592bc3b(%rip)        # 0x00007f77b2c74100
                                                ;   {poll_return}
  0x00007f779d3484c5: retq   
  0x00007f779d3484c6: mov    %rax,0x8(%rsp)
  0x00007f779d3484cb: movq   $0xffffffffffffffff,(%rsp)
  0x00007f779d3484d3: callq  0x00007f779d339320  ; OopMap{rsi=Oop rdx=Oop off=1080}
                                                ;*synchronization entry
                                                ; - java.lang.String::equals@-1 (line 977)
                                                ;   {runtime_call}
  0x00007f779d3484d8: jmpq   0x00007f779d3480fe
  0x00007f779d3484dd: mov    %rdx,(%rsp)
  0x00007f779d3484e1: callq  0x00007f779d331340  ; OopMap{rsi=Oop off=1094}
                                                ;*checkcast
                                                ; - java.lang.String::equals@15 (line 981)
                                                ;   {runtime_call}
  0x00007f779d3484e6: callq  0x00007f779d333ec0  ; OopMap{rax=Oop rsi=Oop off=1099}
                                                ;*arraylength
                                                ; - java.lang.String::equals@23 (line 982)
                                                ;   {runtime_call}
  0x00007f779d3484eb: callq  0x00007f779d333ec0  ; OopMap{rsi=Oop off=1104}
                                                ;*getfield value
                                                ; - java.lang.String::equals@27 (line 983)
                                                ;   {runtime_call}
  0x00007f779d3484f0: callq  0x00007f779d333ec0  ; OopMap{rsi=Oop rax=Oop off=1109}
                                                ;*arraylength
                                                ; - java.lang.String::equals@30 (line 983)
                                                ;   {runtime_call}
  0x00007f779d3484f5: mov    %rbx,(%rsp)
  0x00007f779d3484f9: callq  0x00007f779d333700  ; OopMap{rax=Oop rsi=Oop off=1118}
                                                ;*caload
                                                ; - java.lang.String::equals@60 (line 988)
                                                ;   {runtime_call}
  0x00007f779d3484fe: mov    %rbx,(%rsp)
  0x00007f779d348502: callq  0x00007f779d333700  ; OopMap{rax=Oop rsi=Oop off=1127}
                                                ;*caload
                                                ; - java.lang.String::equals@65 (line 988)
                                                ;   {runtime_call}
  0x00007f779d348507: mov    %rdi,0x8(%rsp)
  0x00007f779d34850c: movq   $0x4a,(%rsp)
  0x00007f779d348514: callq  0x00007f779d339320  ; OopMap{rax=Oop rsi=Oop off=1145}
                                                ;*goto
                                                ; - java.lang.String::equals@74 (line 990)
                                                ;   {runtime_call}
  0x00007f779d348519: jmpq   0x00007f779d348426
  0x00007f779d34851e: nop
  0x00007f779d34851f: nop
  0x00007f779d348520: mov    0x300(%r15),%rax
  0x00007f779d348527: movabs $0x0,%r10
  0x00007f779d348531: mov    %r10,0x300(%r15)
  0x00007f779d348538: movabs $0x0,%r10
  0x00007f779d348542: mov    %r10,0x308(%r15)
  0x00007f779d348549: add    $0x30,%rsp
  0x00007f779d34854d: pop    %rbp
  0x00007f779d34854e: jmpq   0x00007f779d0700a0  ;   {runtime_call}
  0x00007f779d348553: hlt    
  0x00007f779d348554: hlt    
  0x00007f779d348555: hlt    
  0x00007f779d348556: hlt    
  0x00007f779d348557: hlt    
  0x00007f779d348558: hlt    
  0x00007f779d348559: hlt    
  0x00007f779d34855a: hlt    
  0x00007f779d34855b: hlt    
  0x00007f779d34855c: hlt    
  0x00007f779d34855d: hlt    
  0x00007f779d34855e: hlt    
  0x00007f779d34855f: hlt    
[Exception Handler]
[Stub Code]
  0x00007f779d348560: callq  0x00007f779d3317a0  ;   {no_reloc}
  0x00007f779d348565: mov    %rsp,-0x28(%rsp)
  0x00007f779d34856a: sub    $0x80,%rsp
  0x00007f779d348571: mov    %rax,0x78(%rsp)
  0x00007f779d348576: mov    %rcx,0x70(%rsp)
  0x00007f779d34857b: mov    %rdx,0x68(%rsp)
  0x00007f779d348580: mov    %rbx,0x60(%rsp)
  0x00007f779d348585: mov    %rbp,0x50(%rsp)
  0x00007f779d34858a: mov    %rsi,0x48(%rsp)
  0x00007f779d34858f: mov    %rdi,0x40(%rsp)
  0x00007f779d348594: mov    %r8,0x38(%rsp)
  0x00007f779d348599: mov    %r9,0x30(%rsp)
  0x00007f779d34859e: mov    %r10,0x28(%rsp)
  0x00007f779d3485a3: mov    %r11,0x20(%rsp)
  0x00007f779d3485a8: mov    %r12,0x18(%rsp)
  0x00007f779d3485ad: mov    %r13,0x10(%rsp)
  0x00007f779d3485b2: mov    %r14,0x8(%rsp)
  0x00007f779d3485b7: mov    %r15,(%rsp)
  0x00007f779d3485bb: movabs $0x7f77b276249e,%rdi  ;   {external_word}
  0x00007f779d3485c5: movabs $0x7f779d348565,%rsi  ;   {internal_word}
  0x00007f779d3485cf: mov    %rsp,%rdx
  0x00007f779d3485d2: and    $0xfffffffffffffff0,%rsp
  0x00007f779d3485d6: callq  0x00007f77b2488460  ;   {runtime_call}
  0x00007f779d3485db: hlt    
[Deopt Handler Code]
  0x00007f779d3485dc: movabs $0x7f779d3485dc,%r10  ;   {section_word}
  0x00007f779d3485e6: push   %r10
  0x00007f779d3485e8: jmpq   0x00007f779d046e40  ;   {runtime_call}
  0x00007f779d3485ed: hlt    
  0x00007f779d3485ee: hlt    
  0x00007f779d3485ef: hlt    
Decoding compiled method 0x00007f779d347b90:
Code:
[Entry Point]
[Constants]
  # {method} {0x00007f7783905da8} 'getMap' '(Ljava/lang/Thread;)Ljava/lang/ThreadLocal$ThreadLocalMap;' in 'java/lang/ThreadLocal'
  # this:     rsi:rsi   = 'java/lang/ThreadLocal'
  # parm0:    rdx:rdx   = 'java/lang/Thread'
  #           [sp+0x40]  (sp of caller)
  0x00007f779d347d00: mov    0x8(%rsi),%r10d
  0x00007f779d347d04: shl    $0x3,%r10
  0x00007f779d347d08: cmp    %rax,%r10
  0x00007f779d347d0b: jne    0x00007f779d045ba0  ;   {runtime_call}
  0x00007f779d347d11: nopl   0x0(%rax,%rax,1)
  0x00007f779d347d19: nopl   0x0(%rax)
[Verified Entry Point]
  0x00007f779d347d20: mov    %eax,-0x14000(%rsp)
  0x00007f779d347d27: push   %rbp
  0x00007f779d347d28: sub    $0x30,%rsp
  0x00007f779d347d2c: movabs $0x7f7783aa1f60,%rax  ;   {metadata(method data for {method} {0x00007f7783905da8} 'getMap' '(Ljava/lang/Thread;)Ljava/lang/ThreadLocal$ThreadLocalMap;' in 'java/lang/ThreadLocal')}
  0x00007f779d347d36: mov    0xdc(%rax),%edi
  0x00007f779d347d3c: add    $0x8,%edi
  0x00007f779d347d3f: mov    %edi,0xdc(%rax)
  0x00007f779d347d45: movabs $0x7f7783905da8,%rax  ;   {metadata({method} {0x00007f7783905da8} 'getMap' '(Ljava/lang/Thread;)Ljava/lang/ThreadLocal$ThreadLocalMap;' in 'java/lang/ThreadLocal')}
  0x00007f779d347d4f: and    $0x1ff8,%edi
  0x00007f779d347d55: cmp    $0x0,%edi
  0x00007f779d347d58: je     0x00007f779d347d71  ;*aload_1
                                                ; - java.lang.ThreadLocal::getMap@0 (line 233)

  0x00007f779d347d5e: mov    0x50(%rdx),%eax    ; implicit exception: dispatches to 0x00007f779d347d85
  0x00007f779d347d61: shl    $0x3,%rax          ;*getfield threadLocals
                                                ; - java.lang.ThreadLocal::getMap@1 (line 233)

  0x00007f779d347d65: add    $0x30,%rsp
  0x00007f779d347d69: pop    %rbp
  0x00007f779d347d6a: test   %eax,0x1592c390(%rip)        # 0x00007f77b2c74100
                                                ;   {poll_return}
  0x00007f779d347d70: retq   
  0x00007f779d347d71: mov    %rax,0x8(%rsp)
  0x00007f779d347d76: movq   $0xffffffffffffffff,(%rsp)
  0x00007f779d347d7e: callq  0x00007f779d339320  ; OopMap{rsi=Oop rdx=Oop off=131}
                                                ;*synchronization entry
                                                ; - java.lang.ThreadLocal::getMap@-1 (line 233)
                                                ;   {runtime_call}
  0x00007f779d347d83: jmp    0x00007f779d347d5e
  0x00007f779d347d85: callq  0x00007f779d333ec0  ; OopMap{off=138}
                                                ;*getfield threadLocals
                                                ; - java.lang.ThreadLocal::getMap@1 (line 233)
                                                ;   {runtime_call}
  0x00007f779d347d8a: nop
  0x00007f779d347d8b: nop
  0x00007f779d347d8c: mov    0x300(%r15),%rax
  0x00007f779d347d93: movabs $0x0,%r10
  0x00007f779d347d9d: mov    %r10,0x300(%r15)
  0x00007f779d347da4: movabs $0x0,%r10
  0x00007f779d347dae: mov    %r10,0x308(%r15)
  0x00007f779d347db5: add    $0x30,%rsp
  0x00007f779d347db9: pop    %rbp
  0x00007f779d347dba: jmpq   0x00007f779d0700a0  ;   {runtime_call}
  0x00007f779d347dbf: hlt    
[Exception Handler]
[Stub Code]
  0x00007f779d347dc0: callq  0x00007f779d3317a0  ;   {no_reloc}
  0x00007f779d347dc5: mov    %rsp,-0x28(%rsp)
  0x00007f779d347dca: sub    $0x80,%rsp
  0x00007f779d347dd1: mov    %rax,0x78(%rsp)
  0x00007f779d347dd6: mov    %rcx,0x70(%rsp)
  0x00007f779d347ddb: mov    %rdx,0x68(%rsp)
  0x00007f779d347de0: mov    %rbx,0x60(%rsp)
  0x00007f779d347de5: mov    %rbp,0x50(%rsp)
  0x00007f779d347dea: mov    %rsi,0x48(%rsp)
  0x00007f779d347def: mov    %rdi,0x40(%rsp)
  0x00007f779d347df4: mov    %r8,0x38(%rsp)
  0x00007f779d347df9: mov    %r9,0x30(%rsp)
  0x00007f779d347dfe: mov    %r10,0x28(%rsp)
  0x00007f779d347e03: mov    %r11,0x20(%rsp)
  0x00007f779d347e08: mov    %r12,0x18(%rsp)
  0x00007f779d347e0d: mov    %r13,0x10(%rsp)
  0x00007f779d347e12: mov    %r14,0x8(%rsp)
  0x00007f779d347e17: mov    %r15,(%rsp)
  0x00007f779d347e1b: movabs $0x7f77b276249e,%rdi  ;   {external_word}
  0x00007f779d347e25: movabs $0x7f779d347dc5,%rsi  ;   {internal_word}
  0x00007f779d347e2f: mov    %rsp,%rdx
  0x00007f779d347e32: and    $0xfffffffffffffff0,%rsp
  0x00007f779d347e36: callq  0x00007f77b2488460  ;   {runtime_call}
  0x00007f779d347e3b: hlt    
[Deopt Handler Code]
  0x00007f779d347e3c: movabs $0x7f779d347e3c,%r10  ;   {section_word}
  0x00007f779d347e46: push   %r10
  0x00007f779d347e48: jmpq   0x00007f779d046e40  ;   {runtime_call}
  0x00007f779d347e4d: hlt    
  0x00007f779d347e4e: hlt    
  0x00007f779d347e4f: hlt    
Decoding compiled method 0x00007f779d347890:
Code:
[Entry Point]
[Verified Entry Point]
[Constants]
  # {method} {0x00007f7783906010} 'access$400' '(Ljava/lang/ThreadLocal;)I' in 'java/lang/ThreadLocal'
  # parm0:    rsi:rsi   = 'java/lang/ThreadLocal'
  #           [sp+0x40]  (sp of caller)
  0x00007f779d3479e0: mov    %eax,-0x14000(%rsp)
  0x00007f779d3479e7: push   %rbp
  0x00007f779d3479e8: sub    $0x30,%rsp         ;*aload_0
                                                ; - java.lang.ThreadLocal::access$400@0 (line 74)

  0x00007f779d3479ec: mov    0xc(%rsi),%eax     ;*getfield threadLocalHashCode
                                                ; - java.lang.ThreadLocal::access$400@1 (line 74)
                                                ; implicit exception: dispatches to 0x00007f779d3479fb
  0x00007f779d3479ef: add    $0x30,%rsp
  0x00007f779d3479f3: pop    %rbp
  0x00007f779d3479f4: test   %eax,0x1592c706(%rip)        # 0x00007f77b2c74100
                                                ;   {poll_return}
  0x00007f779d3479fa: retq   
  0x00007f779d3479fb: callq  0x00007f779d333ec0  ; OopMap{off=32}
                                                ;*getfield threadLocalHashCode
                                                ; - java.lang.ThreadLocal::access$400@1 (line 74)
                                                ;   {runtime_call}
  0x00007f779d347a00: nop
  0x00007f779d347a01: nop
  0x00007f779d347a02: mov    0x300(%r15),%rax
  0x00007f779d347a09: movabs $0x0,%r10
  0x00007f779d347a13: mov    %r10,0x300(%r15)
  0x00007f779d347a1a: movabs $0x0,%r10
  0x00007f779d347a24: mov    %r10,0x308(%r15)
  0x00007f779d347a2b: add    $0x30,%rsp
  0x00007f779d347a2f: pop    %rbp
  0x00007f779d347a30: jmpq   0x00007f779d0700a0  ;   {runtime_call}
  0x00007f779d347a35: hlt    
  0x00007f779d347a36: hlt    
  0x00007f779d347a37: hlt    
  0x00007f779d347a38: hlt    
  0x00007f779d347a39: hlt    
  0x00007f779d347a3a: hlt    
  0x00007f779d347a3b: hlt    
  0x00007f779d347a3c: hlt    
  0x00007f779d347a3d: hlt    
  0x00007f779d347a3e: hlt    
  0x00007f779d347a3f: hlt    
[Exception Handler]
[Stub Code]
  0x00007f779d347a40: callq  0x00007f779d3317a0  ;   {no_reloc}
  0x00007f779d347a45: mov    %rsp,-0x28(%rsp)
  0x00007f779d347a4a: sub    $0x80,%rsp
  0x00007f779d347a51: mov    %rax,0x78(%rsp)
  0x00007f779d347a56: mov    %rcx,0x70(%rsp)
  0x00007f779d347a5b: mov    %rdx,0x68(%rsp)
  0x00007f779d347a60: mov    %rbx,0x60(%rsp)
  0x00007f779d347a65: mov    %rbp,0x50(%rsp)
  0x00007f779d347a6a: mov    %rsi,0x48(%rsp)
  0x00007f779d347a6f: mov    %rdi,0x40(%rsp)
  0x00007f779d347a74: mov    %r8,0x38(%rsp)
  0x00007f779d347a79: mov    %r9,0x30(%rsp)
  0x00007f779d347a7e: mov    %r10,0x28(%rsp)
  0x00007f779d347a83: mov    %r11,0x20(%rsp)
  0x00007f779d347a88: mov    %r12,0x18(%rsp)
  0x00007f779d347a8d: mov    %r13,0x10(%rsp)
  0x00007f779d347a92: mov    %r14,0x8(%rsp)
  0x00007f779d347a97: mov    %r15,(%rsp)
  0x00007f779d347a9b: movabs $0x7f77b276249e,%rdi  ;   {external_word}
  0x00007f779d347aa5: movabs $0x7f779d347a45,%rsi  ;   {internal_word}
  0x00007f779d347aaf: mov    %rsp,%rdx
  0x00007f779d347ab2: and    $0xfffffffffffffff0,%rsp
  0x00007f779d347ab6: callq  0x00007f77b2488460  ;   {runtime_call}
  0x00007f779d347abb: hlt    
[Deopt Handler Code]
  0x00007f779d347abc: movabs $0x7f779d347abc,%r10  ;   {section_word}
  0x00007f779d347ac6: push   %r10
  0x00007f779d347ac8: jmpq   0x00007f779d046e40  ;   {runtime_call}
  0x00007f779d347acd: hlt    
  0x00007f779d347ace: hlt    
  0x00007f779d347acf: hlt    
Decoding compiled method 0x00007f779d346c10:
Code:
[Entry Point]
[Verified Entry Point]
[Constants]
  # {method} {0x00007f778391bfb8} 'copyOfRange' '([CII)[C' in 'java/util/Arrays'
  # parm0:    rsi:rsi   = '[C'
  # parm1:    rdx       = int
  # parm2:    rcx       = int
  #           [sp+0x80]  (sp of caller)
  0x00007f779d346e00: mov    %eax,-0x14000(%rsp)
  0x00007f779d346e07: push   %rbp
  0x00007f779d346e08: sub    $0x70,%rsp
  0x00007f779d346e0c: mov    %edx,0x40(%rsp)
  0x00007f779d346e10: movabs $0x7f7783aa1c00,%rbx  ;   {metadata(method data for {method} {0x00007f778391bfb8} 'copyOfRange' '([CII)[C' in 'java/util/Arrays')}
  0x00007f779d346e1a: mov    0xdc(%rbx),%edi
  0x00007f779d346e20: add    $0x8,%edi
  0x00007f779d346e23: mov    %edi,0xdc(%rbx)
  0x00007f779d346e29: movabs $0x7f778391bfb8,%rbx  ;   {metadata({method} {0x00007f778391bfb8} 'copyOfRange' '([CII)[C' in 'java/util/Arrays')}
  0x00007f779d346e33: and    $0x1ff8,%edi
  0x00007f779d346e39: cmp    $0x0,%edi
  0x00007f779d346e3c: je     0x00007f779d3472ee  ;*iload_2
                                                ; - java.util.Arrays::copyOfRange@0 (line 3661)

  0x00007f779d346e42: mov    %rcx,%r8
  0x00007f779d346e45: sub    %edx,%r8d
  0x00007f779d346e48: cmp    $0x0,%r8d
  0x00007f779d346e4c: movabs $0x7f7783aa1c00,%rbx  ;   {metadata(method data for {method} {0x00007f778391bfb8} 'copyOfRange' '([CII)[C' in 'java/util/Arrays')}
  0x00007f779d346e56: movabs $0x108,%rdi
  0x00007f779d346e60: jge    0x00007f779d346e70
  0x00007f779d346e66: movabs $0x118,%rdi
  0x00007f779d346e70: mov    (%rbx,%rdi,1),%rax
  0x00007f779d346e74: lea    0x1(%rax),%rax
  0x00007f779d346e78: mov    %rax,(%rbx,%rdi,1)
  0x00007f779d346e7c: jl     0x00007f779d346f75  ;*ifge
                                                ; - java.util.Arrays::copyOfRange@5 (line 3662)

  0x00007f779d346e82: mov    %r8,%rbx
  0x00007f779d346e85: mov    %rdx,%r9
  0x00007f779d346e88: movabs $0x7c0000208,%rdx  ;   {metadata({type array char})}
  0x00007f779d346e92: mov    %rsi,%r11
  0x00007f779d346e95: movslq %ebx,%rbx
  0x00007f779d346e98: mov    %rbx,%rdi
  0x00007f779d346e9b: cmp    $0xffffff,%rbx
  0x00007f779d346ea2: ja     0x00007f779d347305
  0x00007f779d346ea8: movabs $0x17,%rsi
  0x00007f779d346eb2: lea    (%rsi,%rbx,2),%rsi
  0x00007f779d346eb6: and    $0xfffffffffffffff8,%rsi
  0x00007f779d346eba: mov    0x60(%r15),%rax
  0x00007f779d346ebe: lea    (%rax,%rsi,1),%rsi
  0x00007f779d346ec2: cmp    0x70(%r15),%rsi
  0x00007f779d346ec6: ja     0x00007f779d347305
  0x00007f779d346ecc: mov    %rsi,0x60(%r15)
  0x00007f779d346ed0: sub    %rax,%rsi
  0x00007f779d346ed3: movq   $0x1,(%rax)
  0x00007f779d346eda: mov    %rdx,%rcx
  0x00007f779d346edd: shr    $0x3,%rcx
  0x00007f779d346ee1: mov    %ecx,0x8(%rax)
  0x00007f779d346ee4: mov    %ebx,0xc(%rax)
  0x00007f779d346ee7: sub    $0x10,%rsi
  0x00007f779d346eeb: je     0x00007f779d346f02
  0x00007f779d346ef1: xor    %rbx,%rbx
  0x00007f779d346ef4: shr    $0x3,%rsi
  0x00007f779d346ef8: mov    %rbx,0x8(%rax,%rsi,8)
  0x00007f779d346efd: dec    %rsi
  0x00007f779d346f00: jne    0x00007f779d346ef8  ;*newarray
                                                ; - java.util.Arrays::copyOfRange@40 (line 3664)

  0x00007f779d346f02: mov    0xc(%r11),%esi     ;*arraylength
                                                ; - java.util.Arrays::copyOfRange@50 (line 3665)
                                                ; implicit exception: dispatches to 0x00007f779d34730f
  0x00007f779d346f06: movabs $0x7f7783aa1c00,%rdx  ;   {metadata(method data for {method} {0x00007f778391bfb8} 'copyOfRange' '([CII)[C' in 'java/util/Arrays')}
  0x00007f779d346f10: addq   $0x1,0x208(%rdx)
  0x00007f779d346f18: sub    %r9d,%esi
  0x00007f779d346f1b: mov    %r8,%rdx           ;*invokestatic min
                                                ; - java.util.Arrays::copyOfRange@54 (line 3666)

  0x00007f779d346f1e: mov    %rax,0x48(%rsp)
  0x00007f779d346f23: mov    %r11,0x38(%rsp)
  0x00007f779d346f28: nop
  0x00007f779d346f29: nop
  0x00007f779d346f2a: nop
  0x00007f779d346f2b: nop
  0x00007f779d346f2c: nop
  0x00007f779d346f2d: nop
  0x00007f779d346f2e: nop
  0x00007f779d346f2f: callq  0x00007f779d046260  ; OopMap{[72]=Oop [56]=Oop off=308}
                                                ;*invokestatic min
                                                ; - java.util.Arrays::copyOfRange@54 (line 3666)
                                                ;   {static_call}
  0x00007f779d346f34: movabs $0x7f7783aa1c00,%rsi  ;   {metadata(method data for {method} {0x00007f778391bfb8} 'copyOfRange' '([CII)[C' in 'java/util/Arrays')}
  0x00007f779d346f3e: addq   $0x1,0x218(%rsi)
  0x00007f779d346f46: mov    0x38(%rsp),%rsi
  0x00007f779d346f4b: mov    0x40(%rsp),%edx
  0x00007f779d346f4f: mov    0x48(%rsp),%rcx
  0x00007f779d346f54: mov    $0x0,%r8d
  0x00007f779d346f5a: mov    %rax,%r9           ;*invokestatic arraycopy
                                                ; - java.util.Arrays::copyOfRange@57 (line 3665)

  0x00007f779d346f5d: nop
  0x00007f779d346f5e: nop
  0x00007f779d346f5f: callq  0x00007f779d046260  ; OopMap{[72]=Oop off=356}
                                                ;*invokestatic arraycopy
                                                ; - java.util.Arrays::copyOfRange@57 (line 3665)
                                                ;   {static_call}
  0x00007f779d346f64: mov    0x48(%rsp),%rax
  0x00007f779d346f69: add    $0x70,%rsp
  0x00007f779d346f6d: pop    %rbp
  0x00007f779d346f6e: test   %eax,0x1592d18c(%rip)        # 0x00007f77b2c74100
                                                ;   {poll_return}
  0x00007f779d346f74: retq                      ;*areturn
                                                ; - java.util.Arrays::copyOfRange@62 (line 3667)

  0x00007f779d346f75: mov    %ecx,0x44(%rsp)
  0x00007f779d346f79: nopl   0x0(%rax)
  0x00007f779d346f80: jmpq   0x00007f779d347323  ;   {no_reloc}
  0x00007f779d346f85: add    %al,(%rax)
  0x00007f779d346f87: add    %al,(%rax)
  0x00007f779d346f89: add    %cl,-0x75(%rcx)
  0x00007f779d346f8c: rex.RXB (bad) 
  0x00007f779d346f8e: lea    0x20(%rax),%rdi
  0x00007f779d346f92: cmp    0x70(%r15),%rdi
  0x00007f779d346f96: ja     0x00007f779d34732d
  0x00007f779d346f9c: mov    %rdi,0x60(%r15)
  0x00007f779d346fa0: mov    0xa8(%rdx),%rcx
  0x00007f779d346fa7: mov    %rcx,(%rax)
  0x00007f779d346faa: mov    %rdx,%rcx
  0x00007f779d346fad: shr    $0x3,%rcx
  0x00007f779d346fb1: mov    %ecx,0x8(%rax)
  0x00007f779d346fb4: xor    %rcx,%rcx
  0x00007f779d346fb7: mov    %ecx,0xc(%rax)
  0x00007f779d346fba: xor    %rcx,%rcx
  0x00007f779d346fbd: mov    %rcx,0x10(%rax)
  0x00007f779d346fc1: mov    %rcx,0x18(%rax)    ;*new  ; - java.util.Arrays::copyOfRange@8 (line 3663)

  0x00007f779d346fc5: data16 xchg %ax,%ax
  0x00007f779d346fc8: jmpq   0x00007f779d347349  ;   {no_reloc}
  0x00007f779d346fcd: add    %al,(%rax)
  0x00007f779d346fcf: add    %al,(%rax)
  0x00007f779d346fd1: add    %cl,-0x77(%rax)
  0x00007f779d346fd4: rex.R and $0x58,%al
  0x00007f779d346fd7: mov    0x60(%r15),%rax
  0x00007f779d346fdb: lea    0x18(%rax),%rdi
  0x00007f779d346fdf: cmp    0x70(%r15),%rdi
  0x00007f779d346fe3: ja     0x00007f779d347353
  0x00007f779d346fe9: mov    %rdi,0x60(%r15)
  0x00007f779d346fed: mov    0xa8(%rdx),%rcx
  0x00007f779d346ff4: mov    %rcx,(%rax)
  0x00007f779d346ff7: mov    %rdx,%rcx
  0x00007f779d346ffa: shr    $0x3,%rcx
  0x00007f779d346ffe: mov    %ecx,0x8(%rax)
  0x00007f779d347001: xor    %rcx,%rcx
  0x00007f779d347004: mov    %ecx,0xc(%rax)
  0x00007f779d347007: xor    %rcx,%rcx
  0x00007f779d34700a: mov    %rcx,0x10(%rax)    ;*new  ; - java.util.Arrays::copyOfRange@12 (line 3663)

  0x00007f779d34700e: mov    %rax,%rsi
  0x00007f779d347011: movabs $0x7f7783aa1c00,%rdi  ;   {metadata(method data for {method} {0x00007f778391bfb8} 'copyOfRange' '([CII)[C' in 'java/util/Arrays')}
  0x00007f779d34701b: addq   $0x1,0x128(%rdi)
  0x00007f779d347023: mov    %rax,%rsi          ;*invokespecial <init>
                                                ; - java.util.Arrays::copyOfRange@16 (line 3663)

  0x00007f779d347026: mov    %rax,0x50(%rsp)
  0x00007f779d34702b: nop
  0x00007f779d34702c: nop
  0x00007f779d34702d: nop
  0x00007f779d34702e: nop
  0x00007f779d34702f: callq  0x00007f779d045de0  ; OopMap{[80]=Oop [88]=Oop off=564}
                                                ;*invokespecial <init>
                                                ; - java.util.Arrays::copyOfRange@16 (line 3663)
                                                ;   {optimized virtual_call}
  0x00007f779d347034: mov    0x50(%rsp),%rax
  0x00007f779d347039: movabs $0x7f7783aa1c00,%rdx  ;   {metadata(method data for {method} {0x00007f778391bfb8} 'copyOfRange' '([CII)[C' in 'java/util/Arrays')}
  0x00007f779d347043: mov    0x8(%rax),%eax
  0x00007f779d347046: shl    $0x3,%rax
  0x00007f779d34704a: cmp    0x140(%rdx),%rax
  0x00007f779d347051: jne    0x00007f779d347060
  0x00007f779d347053: addq   $0x1,0x148(%rdx)
  0x00007f779d34705b: jmpq   0x00007f779d3470c6
  0x00007f779d347060: cmp    0x150(%rdx),%rax
  0x00007f779d347067: jne    0x00007f779d347076
  0x00007f779d347069: addq   $0x1,0x158(%rdx)
  0x00007f779d347071: jmpq   0x00007f779d3470c6
  0x00007f779d347076: cmpq   $0x0,0x140(%rdx)
  0x00007f779d347081: jne    0x00007f779d34709a
  0x00007f779d347083: mov    %rax,0x140(%rdx)
  0x00007f779d34708a: movq   $0x1,0x148(%rdx)
  0x00007f779d347095: jmpq   0x00007f779d3470c6
  0x00007f779d34709a: cmpq   $0x0,0x150(%rdx)
  0x00007f779d3470a5: jne    0x00007f779d3470be
  0x00007f779d3470a7: mov    %rax,0x150(%rdx)
  0x00007f779d3470ae: movq   $0x1,0x158(%rdx)
  0x00007f779d3470b9: jmpq   0x00007f779d3470c6
  0x00007f779d3470be: addq   $0x1,0x138(%rdx)
  0x00007f779d3470c6: mov    0x40(%rsp),%edx
  0x00007f779d3470ca: mov    0x50(%rsp),%rsi    ;*invokevirtual append
                                                ; - java.util.Arrays::copyOfRange@20 (line 3663)

  0x00007f779d3470cf: callq  0x00007f779d045de0  ; OopMap{[88]=Oop off=724}
                                                ;*invokevirtual append
                                                ; - java.util.Arrays::copyOfRange@20 (line 3663)
                                                ;   {optimized virtual_call}
  0x00007f779d3470d4: cmp    (%rax),%rax        ; implicit exception: dispatches to 0x00007f779d347360
  0x00007f779d3470d7: mov    %rax,%rdx
  0x00007f779d3470da: movabs $0x7f7783aa1c00,%rsi  ;   {metadata(method data for {method} {0x00007f778391bfb8} 'copyOfRange' '([CII)[C' in 'java/util/Arrays')}
  0x00007f779d3470e4: mov    0x8(%rdx),%edx
  0x00007f779d3470e7: shl    $0x3,%rdx
  0x00007f779d3470eb: cmp    0x170(%rsi),%rdx
  0x00007f779d3470f2: jne    0x00007f779d347101
  0x00007f779d3470f4: addq   $0x1,0x178(%rsi)
  0x00007f779d3470fc: jmpq   0x00007f779d347167
  0x00007f779d347101: cmp    0x180(%rsi),%rdx
  0x00007f779d347108: jne    0x00007f779d347117
  0x00007f779d34710a: addq   $0x1,0x188(%rsi)
  0x00007f779d347112: jmpq   0x00007f779d347167
  0x00007f779d347117: cmpq   $0x0,0x170(%rsi)
  0x00007f779d347122: jne    0x00007f779d34713b
  0x00007f779d347124: mov    %rdx,0x170(%rsi)
  0x00007f779d34712b: movq   $0x1,0x178(%rsi)
  0x00007f779d347136: jmpq   0x00007f779d347167
  0x00007f779d34713b: cmpq   $0x0,0x180(%rsi)
  0x00007f779d347146: jne    0x00007f779d34715f
  0x00007f779d347148: mov    %rdx,0x180(%rsi)
  0x00007f779d34714f: movq   $0x1,0x188(%rsi)
  0x00007f779d34715a: jmpq   0x00007f779d347167
  0x00007f779d34715f: addq   $0x1,0x168(%rsi)
  0x00007f779d347167: movabs $0x6b510a3f8,%rdx  ;   {oop(" > ")}
  0x00007f779d347171: mov    %rax,%rsi          ;*invokevirtual append
                                                ; - java.util.Arrays::copyOfRange@25 (line 3663)

  0x00007f779d347174: nop
  0x00007f779d347175: nop
  0x00007f779d347176: nop
  0x00007f779d347177: callq  0x00007f779d045de0  ; OopMap{[88]=Oop off=892}
                                                ;*invokevirtual append
                                                ; - java.util.Arrays::copyOfRange@25 (line 3663)
                                                ;   {optimized virtual_call}
  0x00007f779d34717c: cmp    (%rax),%rax        ; implicit exception: dispatches to 0x00007f779d347365
  0x00007f779d34717f: mov    %rax,%rdx
  0x00007f779d347182: movabs $0x7f7783aa1c00,%rsi  ;   {metadata(method data for {method} {0x00007f778391bfb8} 'copyOfRange' '([CII)[C' in 'java/util/Arrays')}
  0x00007f779d34718c: mov    0x8(%rdx),%edx
  0x00007f779d34718f: shl    $0x3,%rdx
  0x00007f779d347193: cmp    0x1a0(%rsi),%rdx
  0x00007f779d34719a: jne    0x00007f779d3471a9
  0x00007f779d34719c: addq   $0x1,0x1a8(%rsi)
  0x00007f779d3471a4: jmpq   0x00007f779d34720f
  0x00007f779d3471a9: cmp    0x1b0(%rsi),%rdx
  0x00007f779d3471b0: jne    0x00007f779d3471bf
  0x00007f779d3471b2: addq   $0x1,0x1b8(%rsi)
  0x00007f779d3471ba: jmpq   0x00007f779d34720f
  0x00007f779d3471bf: cmpq   $0x0,0x1a0(%rsi)
  0x00007f779d3471ca: jne    0x00007f779d3471e3
  0x00007f779d3471cc: mov    %rdx,0x1a0(%rsi)
  0x00007f779d3471d3: movq   $0x1,0x1a8(%rsi)
  0x00007f779d3471de: jmpq   0x00007f779d34720f
  0x00007f779d3471e3: cmpq   $0x0,0x1b0(%rsi)
  0x00007f779d3471ee: jne    0x00007f779d347207
  0x00007f779d3471f0: mov    %rdx,0x1b0(%rsi)
  0x00007f779d3471f7: movq   $0x1,0x1b8(%rsi)
  0x00007f779d347202: jmpq   0x00007f779d34720f
  0x00007f779d347207: addq   $0x1,0x198(%rsi)
  0x00007f779d34720f: mov    0x44(%rsp),%edx
  0x00007f779d347213: mov    %rax,%rsi          ;*invokevirtual append
                                                ; - java.util.Arrays::copyOfRange@29 (line 3663)

  0x00007f779d347216: nop
  0x00007f779d347217: callq  0x00007f779d045de0  ; OopMap{[88]=Oop off=1052}
                                                ;*invokevirtual append
                                                ; - java.util.Arrays::copyOfRange@29 (line 3663)
                                                ;   {optimized virtual_call}
  0x00007f779d34721c: cmp    (%rax),%rax        ; implicit exception: dispatches to 0x00007f779d34736a
  0x00007f779d34721f: mov    %rax,%rsi
  0x00007f779d347222: movabs $0x7f7783aa1c00,%rdi  ;   {metadata(method data for {method} {0x00007f778391bfb8} 'copyOfRange' '([CII)[C' in 'java/util/Arrays')}
  0x00007f779d34722c: mov    0x8(%rsi),%esi
  0x00007f779d34722f: shl    $0x3,%rsi
  0x00007f779d347233: cmp    0x1d0(%rdi),%rsi
  0x00007f779d34723a: jne    0x00007f779d347249
  0x00007f779d34723c: addq   $0x1,0x1d8(%rdi)
  0x00007f779d347244: jmpq   0x00007f779d3472af
  0x00007f779d347249: cmp    0x1e0(%rdi),%rsi
  0x00007f779d347250: jne    0x00007f779d34725f
  0x00007f779d347252: addq   $0x1,0x1e8(%rdi)
  0x00007f779d34725a: jmpq   0x00007f779d3472af
  0x00007f779d34725f: cmpq   $0x0,0x1d0(%rdi)
  0x00007f779d34726a: jne    0x00007f779d347283
  0x00007f779d34726c: mov    %rsi,0x1d0(%rdi)
  0x00007f779d347273: movq   $0x1,0x1d8(%rdi)
  0x00007f779d34727e: jmpq   0x00007f779d3472af
  0x00007f779d347283: cmpq   $0x0,0x1e0(%rdi)
  0x00007f779d34728e: jne    0x00007f779d3472a7
  0x00007f779d347290: mov    %rsi,0x1e0(%rdi)
  0x00007f779d347297: movq   $0x1,0x1e8(%rdi)
  0x00007f779d3472a2: jmpq   0x00007f779d3472af
  0x00007f779d3472a7: addq   $0x1,0x1c8(%rdi)
  0x00007f779d3472af: mov    %rax,%rsi          ;*invokevirtual toString
                                                ; - java.util.Arrays::copyOfRange@32 (line 3663)

  0x00007f779d3472b2: nop
  0x00007f779d3472b3: nop
  0x00007f779d3472b4: nop
  0x00007f779d3472b5: nop
  0x00007f779d3472b6: nop
  0x00007f779d3472b7: callq  0x00007f779d045de0  ; OopMap{[88]=Oop off=1212}
                                                ;*invokevirtual toString
                                                ; - java.util.Arrays::copyOfRange@32 (line 3663)
                                                ;   {optimized virtual_call}
  0x00007f779d3472bc: mov    0x58(%rsp),%rdx
  0x00007f779d3472c1: movabs $0x7f7783aa1c00,%rsi  ;   {metadata(method data for {method} {0x00007f778391bfb8} 'copyOfRange' '([CII)[C' in 'java/util/Arrays')}
  0x00007f779d3472cb: addq   $0x1,0x1f8(%rsi)
  0x00007f779d3472d3: mov    %rax,%rdx
  0x00007f779d3472d6: mov    0x58(%rsp),%rsi    ;*invokespecial <init>
                                                ; - java.util.Arrays::copyOfRange@35 (line 3663)

  0x00007f779d3472db: nop
  0x00007f779d3472dc: nop
  0x00007f779d3472dd: nop
  0x00007f779d3472de: nop
  0x00007f779d3472df: callq  0x00007f779d045de0  ; OopMap{[88]=Oop off=1252}
                                                ;*invokespecial <init>
                                                ; - java.util.Arrays::copyOfRange@35 (line 3663)
                                                ;   {optimized virtual_call}
  0x00007f779d3472e4: mov    0x58(%rsp),%rax
  0x00007f779d3472e9: jmpq   0x00007f779d34739a
  0x00007f779d3472ee: mov    %rbx,0x8(%rsp)
  0x00007f779d3472f3: movq   $0xffffffffffffffff,(%rsp)
  0x00007f779d3472fb: callq  0x00007f779d339320  ; OopMap{rsi=Oop off=1280}
                                                ;*synchronization entry
                                                ; - java.util.Arrays::copyOfRange@-1 (line 3661)
                                                ;   {runtime_call}
  0x00007f779d347300: jmpq   0x00007f779d346e42
  0x00007f779d347305: callq  0x00007f779d332460  ; OopMap{r11=Oop off=1290}
                                                ;*newarray
                                                ; - java.util.Arrays::copyOfRange@40 (line 3664)
                                                ;   {runtime_call}
  0x00007f779d34730a: jmpq   0x00007f779d346f02
  0x00007f779d34730f: callq  0x00007f779d333ec0  ; OopMap{r11=Oop rax=Oop off=1300}
                                                ;*arraylength
                                                ; - java.util.Arrays::copyOfRange@50 (line 3665)
                                                ;   {runtime_call}
  0x00007f779d347314: movabs $0x0,%rdx          ;   {metadata(NULL)}
  0x00007f779d34731e: mov    $0xa050f00,%eax
  0x00007f779d347323: callq  0x00007f779d3354e0  ; OopMap{off=1320}
                                                ;*new  ; - java.util.Arrays::copyOfRange@8 (line 3663)
                                                ;   {runtime_call}
  0x00007f779d347328: jmpq   0x00007f779d346f80
  0x00007f779d34732d: mov    %rdx,%rdx
  0x00007f779d347330: callq  0x00007f779d332da0  ; OopMap{off=1333}
                                                ;*new  ; - java.util.Arrays::copyOfRange@8 (line 3663)
                                                ;   {runtime_call}
  0x00007f779d347335: jmpq   0x00007f779d346fc5
  0x00007f779d34733a: movabs $0x0,%rdx          ;   {metadata(NULL)}
  0x00007f779d347344: mov    $0xa050f00,%eax
  0x00007f779d347349: callq  0x00007f779d3354e0  ; OopMap{rax=Oop off=1358}
                                                ;*new  ; - java.util.Arrays::copyOfRange@12 (line 3663)
                                                ;   {runtime_call}
  0x00007f779d34734e: jmpq   0x00007f779d346fc8
  0x00007f779d347353: mov    %rdx,%rdx
  0x00007f779d347356: callq  0x00007f779d332da0  ; OopMap{[88]=Oop off=1371}
                                                ;*new  ; - java.util.Arrays::copyOfRange@12 (line 3663)
                                                ;   {runtime_call}
  0x00007f779d34735b: jmpq   0x00007f779d34700e
  0x00007f779d347360: callq  0x00007f779d333ec0  ; OopMap{[88]=Oop rax=Oop off=1381}
                                                ;*invokevirtual append
                                                ; - java.util.Arrays::copyOfRange@25 (line 3663)
                                                ;   {runtime_call}
  0x00007f779d347365: callq  0x00007f779d333ec0  ; OopMap{[88]=Oop rax=Oop off=1386}
                                                ;*invokevirtual append
                                                ; - java.util.Arrays::copyOfRange@29 (line 3663)
                                                ;   {runtime_call}
  0x00007f779d34736a: callq  0x00007f779d333ec0  ; OopMap{[88]=Oop rax=Oop off=1391}
                                                ;*invokevirtual toString
                                                ; - java.util.Arrays::copyOfRange@32 (line 3663)
                                                ;   {runtime_call}
  0x00007f779d34736f: nop
  0x00007f779d347370: nop
  0x00007f779d347371: mov    0x300(%r15),%rax
  0x00007f779d347378: movabs $0x0,%r10
  0x00007f779d347382: mov    %r10,0x300(%r15)
  0x00007f779d347389: movabs $0x0,%r10
  0x00007f779d347393: mov    %r10,0x308(%r15)
  0x00007f779d34739a: add    $0x70,%rsp
  0x00007f779d34739e: pop    %rbp
  0x00007f779d34739f: jmpq   0x00007f779d0700a0  ;   {runtime_call}
  0x00007f779d3473a4: hlt    
  0x00007f779d3473a5: hlt    
  0x00007f779d3473a6: hlt    
  0x00007f779d3473a7: hlt    
  0x00007f779d3473a8: hlt    
  0x00007f779d3473a9: hlt    
  0x00007f779d3473aa: hlt    
  0x00007f779d3473ab: hlt    
  0x00007f779d3473ac: hlt    
  0x00007f779d3473ad: hlt    
  0x00007f779d3473ae: hlt    
  0x00007f779d3473af: hlt    
  0x00007f779d3473b0: hlt    
  0x00007f779d3473b1: hlt    
  0x00007f779d3473b2: hlt    
  0x00007f779d3473b3: hlt    
  0x00007f779d3473b4: hlt    
  0x00007f779d3473b5: hlt    
  0x00007f779d3473b6: hlt    
  0x00007f779d3473b7: hlt    
  0x00007f779d3473b8: hlt    
  0x00007f779d3473b9: hlt    
  0x00007f779d3473ba: hlt    
  0x00007f779d3473bb: hlt    
  0x00007f779d3473bc: hlt    
  0x00007f779d3473bd: hlt    
  0x00007f779d3473be: hlt    
  0x00007f779d3473bf: hlt    
[Stub Code]
  0x00007f779d3473c0: nop                       ;   {no_reloc}
  0x00007f779d3473c1: nop
  0x00007f779d3473c2: nop
  0x00007f779d3473c3: nop
  0x00007f779d3473c4: nop
  0x00007f779d3473c5: movabs $0x0,%rbx          ;   {static_stub}
  0x00007f779d3473cf: jmpq   0x00007f779d3473cf  ;   {runtime_call}
  0x00007f779d3473d4: nop
  0x00007f779d3473d5: movabs $0x0,%rbx          ;   {static_stub}
  0x00007f779d3473df: jmpq   0x00007f779d3473df  ;   {runtime_call}
  0x00007f779d3473e4: nop
  0x00007f779d3473e5: movabs $0x0,%rbx          ;   {static_stub}
  0x00007f779d3473ef: jmpq   0x00007f779d3473ef  ;   {runtime_call}
  0x00007f779d3473f4: nop
  0x00007f779d3473f5: movabs $0x0,%rbx          ;   {static_stub}
  0x00007f779d3473ff: jmpq   0x00007f779d3473ff  ;   {runtime_call}
  0x00007f779d347404: nop
  0x00007f779d347405: movabs $0x0,%rbx          ;   {static_stub}
  0x00007f779d34740f: jmpq   0x00007f779d34740f  ;   {runtime_call}
  0x00007f779d347414: nop
  0x00007f779d347415: movabs $0x0,%rbx          ;   {static_stub}
  0x00007f779d34741f: jmpq   0x00007f779d34741f  ;   {runtime_call}
  0x00007f779d347424: nop
  0x00007f779d347425: movabs $0x0,%rbx          ;   {static_stub}
  0x00007f779d34742f: jmpq   0x00007f779d34742f  ;   {runtime_call}
  0x00007f779d347434: nop
  0x00007f779d347435: movabs $0x0,%rbx          ;   {static_stub}
  0x00007f779d34743f: jmpq   0x00007f779d34743f  ;   {runtime_call}
[Exception Handler]
  0x00007f779d347444: callq  0x00007f779d3317a0  ;   {runtime_call}
  0x00007f779d347449: mov    %rsp,-0x28(%rsp)
  0x00007f779d34744e: sub    $0x80,%rsp
  0x00007f779d347455: mov    %rax,0x78(%rsp)
  0x00007f779d34745a: mov    %rcx,0x70(%rsp)
  0x00007f779d34745f: mov    %rdx,0x68(%rsp)
  0x00007f779d347464: mov    %rbx,0x60(%rsp)
  0x00007f779d347469: mov    %rbp,0x50(%rsp)
  0x00007f779d34746e: mov    %rsi,0x48(%rsp)
  0x00007f779d347473: mov    %rdi,0x40(%rsp)
  0x00007f779d347478: mov    %r8,0x38(%rsp)
  0x00007f779d34747d: mov    %r9,0x30(%rsp)
  0x00007f779d347482: mov    %r10,0x28(%rsp)
  0x00007f779d347487: mov    %r11,0x20(%rsp)
  0x00007f779d34748c: mov    %r12,0x18(%rsp)
  0x00007f779d347491: mov    %r13,0x10(%rsp)
  0x00007f779d347496: mov    %r14,0x8(%rsp)
  0x00007f779d34749b: mov    %r15,(%rsp)
  0x00007f779d34749f: movabs $0x7f77b276249e,%rdi  ;   {external_word}
  0x00007f779d3474a9: movabs $0x7f779d347449,%rsi  ;   {internal_word}
  0x00007f779d3474b3: mov    %rsp,%rdx
  0x00007f779d3474b6: and    $0xfffffffffffffff0,%rsp
  0x00007f779d3474ba: callq  0x00007f77b2488460  ;   {runtime_call}
  0x00007f779d3474bf: hlt    
[Deopt Handler Code]
  0x00007f779d3474c0: movabs $0x7f779d3474c0,%r10  ;   {section_word}
  0x00007f779d3474ca: push   %r10
  0x00007f779d3474cc: jmpq   0x00007f779d046e40  ;   {runtime_call}
  0x00007f779d3474d1: hlt    
  0x00007f779d3474d2: hlt    
  0x00007f779d3474d3: hlt    
  0x00007f779d3474d4: hlt    
  0x00007f779d3474d5: hlt    
  0x00007f779d3474d6: hlt    
  0x00007f779d3474d7: hlt    
Decoding compiled method 0x00007f779d3467d0:
Code:
[Entry Point]
[Constants]
  # {method} {0x00007f7783805098} 'indexOf' '(I)I' in 'java/lang/String'
  # this:     rsi:rsi   = 'java/lang/String'
  # parm0:    rdx       = int
  #           [sp+0x40]  (sp of caller)
  0x00007f779d346940: mov    0x8(%rsi),%r10d
  0x00007f779d346944: shl    $0x3,%r10
  0x00007f779d346948: cmp    %rax,%r10
  0x00007f779d34694b: jne    0x00007f779d045ba0  ;   {runtime_call}
  0x00007f779d346951: nopl   0x0(%rax,%rax,1)
  0x00007f779d346959: nopl   0x0(%rax)
[Verified Entry Point]
  0x00007f779d346960: mov    %eax,-0x14000(%rsp)
  0x00007f779d346967: push   %rbp
  0x00007f779d346968: sub    $0x30,%rsp
  0x00007f779d34696c: movabs $0x7f7783aa6af0,%rcx  ;   {metadata(method data for {method} {0x00007f7783805098} 'indexOf' '(I)I' in 'java/lang/String')}
  0x00007f779d346976: mov    0xdc(%rcx),%edi
  0x00007f779d34697c: add    $0x8,%edi
  0x00007f779d34697f: mov    %edi,0xdc(%rcx)
  0x00007f779d346985: movabs $0x7f7783805098,%rcx  ;   {metadata({method} {0x00007f7783805098} 'indexOf' '(I)I' in 'java/lang/String')}
  0x00007f779d34698f: and    $0x1ff8,%edi
  0x00007f779d346995: cmp    $0x0,%edi
  0x00007f779d346998: je     0x00007f779d346a48  ;*aload_0
                                                ; - java.lang.String::indexOf@0 (line 1503)

  0x00007f779d34699e: mov    %rsi,%rcx
  0x00007f779d3469a1: movabs $0x7f7783aa6af0,%rdi  ;   {metadata(method data for {method} {0x00007f7783805098} 'indexOf' '(I)I' in 'java/lang/String')}
  0x00007f779d3469ab: mov    0x8(%rcx),%ecx
  0x00007f779d3469ae: shl    $0x3,%rcx
  0x00007f779d3469b2: cmp    0x110(%rdi),%rcx
  0x00007f779d3469b9: jne    0x00007f779d3469c8
  0x00007f779d3469bb: addq   $0x1,0x118(%rdi)
  0x00007f779d3469c3: jmpq   0x00007f779d346a2e
  0x00007f779d3469c8: cmp    0x120(%rdi),%rcx
  0x00007f779d3469cf: jne    0x00007f779d3469de
  0x00007f779d3469d1: addq   $0x1,0x128(%rdi)
  0x00007f779d3469d9: jmpq   0x00007f779d346a2e
  0x00007f779d3469de: cmpq   $0x0,0x110(%rdi)
  0x00007f779d3469e9: jne    0x00007f779d346a02
  0x00007f779d3469eb: mov    %rcx,0x110(%rdi)
  0x00007f779d3469f2: movq   $0x1,0x118(%rdi)
  0x00007f779d3469fd: jmpq   0x00007f779d346a2e
  0x00007f779d346a02: cmpq   $0x0,0x120(%rdi)
  0x00007f779d346a0d: jne    0x00007f779d346a26
  0x00007f779d346a0f: mov    %rcx,0x120(%rdi)
  0x00007f779d346a16: movq   $0x1,0x128(%rdi)
  0x00007f779d346a21: jmpq   0x00007f779d346a2e
  0x00007f779d346a26: addq   $0x1,0x108(%rdi)
  0x00007f779d346a2e: mov    $0x0,%ecx          ;*invokevirtual indexOf
                                                ; - java.lang.String::indexOf@3 (line 1503)

  0x00007f779d346a33: nop
  0x00007f779d346a34: nop
  0x00007f779d346a35: nop
  0x00007f779d346a36: nop
  0x00007f779d346a37: callq  0x00007f779d045de0  ; OopMap{off=252}
                                                ;*invokevirtual indexOf
                                                ; - java.lang.String::indexOf@3 (line 1503)
                                                ;   {optimized virtual_call}
  0x00007f779d346a3c: add    $0x30,%rsp
  0x00007f779d346a40: pop    %rbp
  0x00007f779d346a41: test   %eax,0x1592d6b9(%rip)        # 0x00007f77b2c74100
                                                ;   {poll_return}
  0x00007f779d346a47: retq   
  0x00007f779d346a48: mov    %rcx,0x8(%rsp)
  0x00007f779d346a4d: movq   $0xffffffffffffffff,(%rsp)
  0x00007f779d346a55: callq  0x00007f779d339320  ; OopMap{rsi=Oop off=282}
                                                ;*synchronization entry
                                                ; - java.lang.String::indexOf@-1 (line 1503)
                                                ;   {runtime_call}
  0x00007f779d346a5a: jmpq   0x00007f779d34699e
  0x00007f779d346a5f: nop
  0x00007f779d346a60: nop
  0x00007f779d346a61: mov    0x300(%r15),%rax
  0x00007f779d346a68: movabs $0x0,%r10
  0x00007f779d346a72: mov    %r10,0x300(%r15)
  0x00007f779d346a79: movabs $0x0,%r10
  0x00007f779d346a83: mov    %r10,0x308(%r15)
  0x00007f779d346a8a: add    $0x30,%rsp
  0x00007f779d346a8e: pop    %rbp
  0x00007f779d346a8f: jmpq   0x00007f779d0700a0  ;   {runtime_call}
  0x00007f779d346a94: hlt    
  0x00007f779d346a95: hlt    
  0x00007f779d346a96: hlt    
  0x00007f779d346a97: hlt    
  0x00007f779d346a98: hlt    
  0x00007f779d346a99: hlt    
  0x00007f779d346a9a: hlt    
  0x00007f779d346a9b: hlt    
  0x00007f779d346a9c: hlt    
  0x00007f779d346a9d: hlt    
  0x00007f779d346a9e: hlt    
  0x00007f779d346a9f: hlt    
[Stub Code]
  0x00007f779d346aa0: nop                       ;   {no_reloc}
  0x00007f779d346aa1: nop
  0x00007f779d346aa2: nop
  0x00007f779d346aa3: nop
  0x00007f779d346aa4: nop
  0x00007f779d346aa5: movabs $0x0,%rbx          ;   {static_stub}
  0x00007f779d346aaf: jmpq   0x00007f779d346aaf  ;   {runtime_call}
[Exception Handler]
  0x00007f779d346ab4: callq  0x00007f779d3317a0  ;   {runtime_call}
  0x00007f779d346ab9: mov    %rsp,-0x28(%rsp)
  0x00007f779d346abe: sub    $0x80,%rsp
  0x00007f779d346ac5: mov    %rax,0x78(%rsp)
  0x00007f779d346aca: mov    %rcx,0x70(%rsp)
  0x00007f779d346acf: mov    %rdx,0x68(%rsp)
  0x00007f779d346ad4: mov    %rbx,0x60(%rsp)
  0x00007f779d346ad9: mov    %rbp,0x50(%rsp)
  0x00007f779d346ade: mov    %rsi,0x48(%rsp)
  0x00007f779d346ae3: mov    %rdi,0x40(%rsp)
  0x00007f779d346ae8: mov    %r8,0x38(%rsp)
  0x00007f779d346aed: mov    %r9,0x30(%rsp)
  0x00007f779d346af2: mov    %r10,0x28(%rsp)
  0x00007f779d346af7: mov    %r11,0x20(%rsp)
  0x00007f779d346afc: mov    %r12,0x18(%rsp)
  0x00007f779d346b01: mov    %r13,0x10(%rsp)
  0x00007f779d346b06: mov    %r14,0x8(%rsp)
  0x00007f779d346b0b: mov    %r15,(%rsp)
  0x00007f779d346b0f: movabs $0x7f77b276249e,%rdi  ;   {external_word}
  0x00007f779d346b19: movabs $0x7f779d346ab9,%rsi  ;   {internal_word}
  0x00007f779d346b23: mov    %rsp,%rdx
  0x00007f779d346b26: and    $0xfffffffffffffff0,%rsp
  0x00007f779d346b2a: callq  0x00007f77b2488460  ;   {runtime_call}
  0x00007f779d346b2f: hlt    
[Deopt Handler Code]
  0x00007f779d346b30: movabs $0x7f779d346b30,%r10  ;   {section_word}
  0x00007f779d346b3a: push   %r10
  0x00007f779d346b3c: jmpq   0x00007f779d046e40  ;   {runtime_call}
  0x00007f779d346b41: hlt    
  0x00007f779d346b42: hlt    
  0x00007f779d346b43: hlt    
  0x00007f779d346b44: hlt    
  0x00007f779d346b45: hlt    
  0x00007f779d346b46: hlt    
  0x00007f779d346b47: hlt    
Decoding compiled method 0x00007f779d346450:
Code:
[Entry Point]
  # {method} {0x00007f778382d900} 'currentThread' '()Ljava/lang/Thread;' in 'java/lang/Thread'
  #           [sp+0x50]  (sp of caller)
  0x00007f779d3465c0: mov    0x8(%rsi),%r10d
  0x00007f779d3465c4: shl    $0x3,%r10
  0x00007f779d3465c8: cmp    %r10,%rax
  0x00007f779d3465cb: je     0x00007f779d3465d8
  0x00007f779d3465d1: jmpq   0x00007f779d045ba0  ;   {runtime_call}
  0x00007f779d3465d6: xchg   %ax,%ax
[Verified Entry Point]
  0x00007f779d3465d8: mov    %eax,-0x14000(%rsp)
  0x00007f779d3465df: push   %rbp
  0x00007f779d3465e0: mov    %rsp,%rbp
  0x00007f779d3465e3: sub    $0x40,%rsp
  0x00007f779d3465e7: movabs $0x6b4901c90,%r14  ;   {oop(a 'java/lang/Class' = 'java/lang/Thread')}
  0x00007f779d3465f1: mov    %r14,0x30(%rsp)
  0x00007f779d3465f6: lea    0x30(%rsp),%r14
  0x00007f779d3465fb: mov    %r14,%rsi          ; OopMap{[48]=Oop off=62}
  0x00007f779d3465fe: movabs $0x7f779d3465fe,%r10  ;   {section_word}
  0x00007f779d346608: mov    %r10,0x238(%r15)
  0x00007f779d34660f: mov    %rsp,0x230(%r15)
  0x00007f779d346616: cmpb   $0x0,0x1568166f(%rip)        # 0x00007f77b29c7c8c
                                                ;   {external_word}
  0x00007f779d34661d: je     0x00007f779d346655
  0x00007f779d346623: push   %rsi
  0x00007f779d346624: movabs $0x7f778382d900,%rsi  ;   {metadata({method} {0x00007f778382d900} 'currentThread' '()Ljava/lang/Thread;' in 'java/lang/Thread')}
  0x00007f779d34662e: mov    %r15,%rdi
  0x00007f779d346631: test   $0xf,%esp
  0x00007f779d346637: je     0x00007f779d34664f
  0x00007f779d34663d: sub    $0x8,%rsp
  0x00007f779d346641: callq  0x00007f77b26190d0  ;   {runtime_call}
  0x00007f779d346646: add    $0x8,%rsp
  0x00007f779d34664a: jmpq   0x00007f779d346654
  0x00007f779d34664f: callq  0x00007f77b26190d0  ;   {runtime_call}
  0x00007f779d346654: pop    %rsi
  0x00007f779d346655: lea    0x250(%r15),%rdi
  0x00007f779d34665c: movl   $0x4,0x2c8(%r15)
  0x00007f779d346667: callq  0x00007f77b2340f60  ;   {runtime_call}
  0x00007f779d34666c: vzeroupper 
  0x00007f779d34666f: movl   $0x5,0x2c8(%r15)
  0x00007f779d34667a: mov    %r15d,%ecx
  0x00007f779d34667d: shr    $0x4,%ecx
  0x00007f779d346680: and    $0xffc,%ecx
  0x00007f779d346686: movabs $0x7f77b2c33000,%r10  ;   {external_word}
  0x00007f779d346690: mov    %ecx,(%r10,%rcx,1)
  0x00007f779d346694: cmpl   $0x0,0x1568e9ee(%rip)        # 0x00007f77b29d508c
                                                ;   {external_word}
  0x00007f779d34669e: jne    0x00007f779d3466b2
  0x00007f779d3466a4: cmpl   $0x0,0x30(%r15)
  0x00007f779d3466ac: je     0x00007f779d3466d3
  0x00007f779d3466b2: mov    %rax,-0x8(%rbp)
  0x00007f779d3466b6: mov    %r15,%rdi
  0x00007f779d3466b9: mov    %rsp,%r12
  0x00007f779d3466bc: sub    $0x0,%rsp
  0x00007f779d3466c0: and    $0xfffffffffffffff0,%rsp
  0x00007f779d3466c4: callq  0x00007f77b26c2e60  ;   {runtime_call}
  0x00007f779d3466c9: mov    %r12,%rsp
  0x00007f779d3466cc: xor    %r12,%r12
  0x00007f779d3466cf: mov    -0x8(%rbp),%rax
  0x00007f779d3466d3: movl   $0x8,0x2c8(%r15)
  0x00007f779d3466de: cmpl   $0x1,0x2f4(%r15)
  0x00007f779d3466e9: je     0x00007f779d34679a
  0x00007f779d3466ef: cmpb   $0x0,0x15681596(%rip)        # 0x00007f77b29c7c8c
                                                ;   {external_word}
  0x00007f779d3466f6: je     0x00007f779d346734
  0x00007f779d3466fc: mov    %rax,-0x8(%rbp)
  0x00007f779d346700: movabs $0x7f778382d900,%rsi  ;   {metadata({method} {0x00007f778382d900} 'currentThread' '()Ljava/lang/Thread;' in 'java/lang/Thread')}
  0x00007f779d34670a: mov    %r15,%rdi
  0x00007f779d34670d: test   $0xf,%esp
  0x00007f779d346713: je     0x00007f779d34672b
  0x00007f779d346719: sub    $0x8,%rsp
  0x00007f779d34671d: callq  0x00007f77b2619180  ;   {runtime_call}
  0x00007f779d346722: add    $0x8,%rsp
  0x00007f779d346726: jmpq   0x00007f779d346730
  0x00007f779d34672b: callq  0x00007f77b2619180  ;   {runtime_call}
  0x00007f779d346730: mov    -0x8(%rbp),%rax
  0x00007f779d346734: movabs $0x0,%r10
  0x00007f779d34673e: mov    %r10,0x230(%r15)
  0x00007f779d346745: movabs $0x0,%r10
  0x00007f779d34674f: mov    %r10,0x238(%r15)
  0x00007f779d346756: test   %rax,%rax
  0x00007f779d346759: je     0x00007f779d346777
  0x00007f779d34675f: test   $0x1,%rax
  0x00007f779d346765: je     0x00007f779d346774
  0x00007f779d34676b: mov    -0x1(%rax),%rax
  0x00007f779d34676f: jmpq   0x00007f779d346777
  0x00007f779d346774: mov    (%rax),%rax
  0x00007f779d346777: mov    0x38(%r15),%rcx
  0x00007f779d34677b: movl   $0x0,0x100(%rcx)
  0x00007f779d346785: leaveq 
  0x00007f779d346786: cmpq   $0x0,0x8(%r15)
  0x00007f779d34678e: jne    0x00007f779d346795
  0x00007f779d346794: retq   
  0x00007f779d346795: jmpq   Stub::forward exception  ;   {runtime_call}
  0x00007f779d34679a: mov    %rax,-0x8(%rbp)
  0x00007f779d34679e: mov    %rsp,%r12
  0x00007f779d3467a1: sub    $0x0,%rsp
  0x00007f779d3467a5: and    $0xfffffffffffffff0,%rsp
  0x00007f779d3467a9: callq  0x00007f77b2619720  ;   {runtime_call}
  0x00007f779d3467ae: mov    %r12,%rsp
  0x00007f779d3467b1: xor    %r12,%r12
  0x00007f779d3467b4: mov    -0x8(%rbp),%rax
  0x00007f779d3467b8: jmpq   0x00007f779d3466ef
  0x00007f779d3467bd: hlt    
  0x00007f779d3467be: hlt    
  0x00007f779d3467bf: hlt    
Decoding compiled method 0x00007f779d348e50:
Code:
[Entry Point]
[Constants]
  # {method} {0x00007f7783aa91f0} 'getState' '()I' in 'java/util/concurrent/locks/AbstractQueuedSynchronizer'
  #           [sp+0x40]  (sp of caller)
  0x00007f779d348fa0: mov    0x8(%rsi),%r10d
  0x00007f779d348fa4: shl    $0x3,%r10
  0x00007f779d348fa8: cmp    %rax,%r10
  0x00007f779d348fab: jne    0x00007f779d045ba0  ;   {runtime_call}
  0x00007f779d348fb1: nopl   0x0(%rax,%rax,1)
  0x00007f779d348fb9: nopl   0x0(%rax)
[Verified Entry Point]
  0x00007f779d348fc0: mov    %eax,-0x14000(%rsp)
  0x00007f779d348fc7: push   %rbp
  0x00007f779d348fc8: sub    $0x30,%rsp         ;*aload_0
                                                ; - java.util.concurrent.locks.AbstractQueuedSynchronizer::getState@0 (line 541)

  0x00007f779d348fcc: mov    0x10(%rsi),%eax    ;*getfield state
                                                ; - java.util.concurrent.locks.AbstractQueuedSynchronizer::getState@1 (line 541)

  0x00007f779d348fcf: add    $0x30,%rsp
  0x00007f779d348fd3: pop    %rbp
  0x00007f779d348fd4: test   %eax,0x1592b126(%rip)        # 0x00007f77b2c74100
                                                ;   {poll_return}
  0x00007f779d348fda: retq   
  0x00007f779d348fdb: nop
  0x00007f779d348fdc: nop
  0x00007f779d348fdd: mov    0x300(%r15),%rax
  0x00007f779d348fe4: movabs $0x0,%r10
  0x00007f779d348fee: mov    %r10,0x300(%r15)
  0x00007f779d348ff5: movabs $0x0,%r10
  0x00007f779d348fff: mov    %r10,0x308(%r15)
  0x00007f779d349006: add    $0x30,%rsp
  0x00007f779d34900a: pop    %rbp
  0x00007f779d34900b: jmpq   0x00007f779d0700a0  ;   {runtime_call}
  0x00007f779d349010: hlt    
  0x00007f779d349011: hlt    
  0x00007f779d349012: hlt    
  0x00007f779d349013: hlt    
  0x00007f779d349014: hlt    
  0x00007f779d349015: hlt    
  0x00007f779d349016: hlt    
  0x00007f779d349017: hlt    
  0x00007f779d349018: hlt    
  0x00007f779d349019: hlt    
  0x00007f779d34901a: hlt    
  0x00007f779d34901b: hlt    
  0x00007f779d34901c: hlt    
  0x00007f779d34901d: hlt    
  0x00007f779d34901e: hlt    
  0x00007f779d34901f: hlt    
[Exception Handler]
[Stub Code]
  0x00007f779d349020: callq  0x00007f779d3317a0  ;   {no_reloc}
  0x00007f779d349025: mov    %rsp,-0x28(%rsp)
  0x00007f779d34902a: sub    $0x80,%rsp
  0x00007f779d349031: mov    %rax,0x78(%rsp)
  0x00007f779d349036: mov    %rcx,0x70(%rsp)
  0x00007f779d34903b: mov    %rdx,0x68(%rsp)
  0x00007f779d349040: mov    %rbx,0x60(%rsp)
  0x00007f779d349045: mov    %rbp,0x50(%rsp)
  0x00007f779d34904a: mov    %rsi,0x48(%rsp)
  0x00007f779d34904f: mov    %rdi,0x40(%rsp)
  0x00007f779d349054: mov    %r8,0x38(%rsp)
  0x00007f779d349059: mov    %r9,0x30(%rsp)
  0x00007f779d34905e: mov    %r10,0x28(%rsp)
  0x00007f779d349063: mov    %r11,0x20(%rsp)
  0x00007f779d349068: mov    %r12,0x18(%rsp)
  0x00007f779d34906d: mov    %r13,0x10(%rsp)
  0x00007f779d349072: mov    %r14,0x8(%rsp)
  0x00007f779d349077: mov    %r15,(%rsp)
  0x00007f779d34907b: movabs $0x7f77b276249e,%rdi  ;   {external_word}
  0x00007f779d349085: movabs $0x7f779d349025,%rsi  ;   {internal_word}
  0x00007f779d34908f: mov    %rsp,%rdx
  0x00007f779d349092: and    $0xfffffffffffffff0,%rsp
  0x00007f779d349096: callq  0x00007f77b2488460  ;   {runtime_call}
  0x00007f779d34909b: hlt    
[Deopt Handler Code]
  0x00007f779d34909c: movabs $0x7f779d34909c,%r10  ;   {section_word}
  0x00007f779d3490a6: push   %r10
  0x00007f779d3490a8: jmpq   0x00007f779d046e40  ;   {runtime_call}
  0x00007f779d3490ad: hlt    
  0x00007f779d3490ae: hlt    
  0x00007f779d3490af: hlt    
Decoding compiled method 0x00007f779d349150:
Code:
[Entry Point]
[Constants]
  # {method} {0x00007f7783aac288} 'getExclusiveOwnerThread' '()Ljava/lang/Thread;' in 'java/util/concurrent/locks/AbstractOwnableSynchronizer'
  #           [sp+0x40]  (sp of caller)
  0x00007f779d3492a0: mov    0x8(%rsi),%r10d
  0x00007f779d3492a4: shl    $0x3,%r10
  0x00007f779d3492a8: cmp    %rax,%r10
  0x00007f779d3492ab: jne    0x00007f779d045ba0  ;   {runtime_call}
  0x00007f779d3492b1: nopl   0x0(%rax,%rax,1)
  0x00007f779d3492b9: nopl   0x0(%rax)
[Verified Entry Point]
  0x00007f779d3492c0: mov    %eax,-0x14000(%rsp)
  0x00007f779d3492c7: push   %rbp
  0x00007f779d3492c8: sub    $0x30,%rsp         ;*aload_0
                                                ; - java.util.concurrent.locks.AbstractOwnableSynchronizer::getExclusiveOwnerThread@0 (line 84)

  0x00007f779d3492cc: mov    0xc(%rsi),%eax
  0x00007f779d3492cf: shl    $0x3,%rax          ;*getfield exclusiveOwnerThread
                                                ; - java.util.concurrent.locks.AbstractOwnableSynchronizer::getExclusiveOwnerThread@1 (line 84)

  0x00007f779d3492d3: add    $0x30,%rsp
  0x00007f779d3492d7: pop    %rbp
  0x00007f779d3492d8: test   %eax,0x1592ae22(%rip)        # 0x00007f77b2c74100
                                                ;   {poll_return}
  0x00007f779d3492de: retq   
  0x00007f779d3492df: nop
  0x00007f779d3492e0: nop
  0x00007f779d3492e1: mov    0x300(%r15),%rax
  0x00007f779d3492e8: movabs $0x0,%r10
  0x00007f779d3492f2: mov    %r10,0x300(%r15)
  0x00007f779d3492f9: movabs $0x0,%r10
  0x00007f779d349303: mov    %r10,0x308(%r15)
  0x00007f779d34930a: add    $0x30,%rsp
  0x00007f779d34930e: pop    %rbp
  0x00007f779d34930f: jmpq   0x00007f779d0700a0  ;   {runtime_call}
  0x00007f779d349314: hlt    
  0x00007f779d349315: hlt    
  0x00007f779d349316: hlt    
  0x00007f779d349317: hlt    
  0x00007f779d349318: hlt    
  0x00007f779d349319: hlt    
  0x00007f779d34931a: hlt    
  0x00007f779d34931b: hlt    
  0x00007f779d34931c: hlt    
  0x00007f779d34931d: hlt    
  0x00007f779d34931e: hlt    
  0x00007f779d34931f: hlt    
[Exception Handler]
[Stub Code]
  0x00007f779d349320: callq  0x00007f779d3317a0  ;   {no_reloc}
  0x00007f779d349325: mov    %rsp,-0x28(%rsp)
  0x00007f779d34932a: sub    $0x80,%rsp
  0x00007f779d349331: mov    %rax,0x78(%rsp)
  0x00007f779d349336: mov    %rcx,0x70(%rsp)
  0x00007f779d34933b: mov    %rdx,0x68(%rsp)
  0x00007f779d349340: mov    %rbx,0x60(%rsp)
  0x00007f779d349345: mov    %rbp,0x50(%rsp)
  0x00007f779d34934a: mov    %rsi,0x48(%rsp)
  0x00007f779d34934f: mov    %rdi,0x40(%rsp)
  0x00007f779d349354: mov    %r8,0x38(%rsp)
  0x00007f779d349359: mov    %r9,0x30(%rsp)
  0x00007f779d34935e: mov    %r10,0x28(%rsp)
  0x00007f779d349363: mov    %r11,0x20(%rsp)
  0x00007f779d349368: mov    %r12,0x18(%rsp)
  0x00007f779d34936d: mov    %r13,0x10(%rsp)
  0x00007f779d349372: mov    %r14,0x8(%rsp)
  0x00007f779d349377: mov    %r15,(%rsp)
  0x00007f779d34937b: movabs $0x7f77b276249e,%rdi  ;   {external_word}
  0x00007f779d349385: movabs $0x7f779d349325,%rsi  ;   {internal_word}
  0x00007f779d34938f: mov    %rsp,%rdx
  0x00007f779d349392: and    $0xfffffffffffffff0,%rsp
  0x00007f779d349396: callq  0x00007f77b2488460  ;   {runtime_call}
  0x00007f779d34939b: hlt    
[Deopt Handler Code]
  0x00007f779d34939c: movabs $0x7f779d34939c,%r10  ;   {section_word}
  0x00007f779d3493a6: push   %r10
  0x00007f779d3493a8: jmpq   0x00007f779d046e40  ;   {runtime_call}
  0x00007f779d3493ad: hlt    
  0x00007f779d3493ae: hlt    
  0x00007f779d3493af: hlt    
Decoding compiled method 0x00007f779d349450:
Code:
[Entry Point]
[Verified Entry Point]
[Constants]
  # {method} {0x00007f7783c02cf8} 'lockByLock' '()V' in 'com/chenluo/jvm/learn/TestLock'
  #           [sp+0x40]  (sp of caller)
  0x00007f779d3495c0: mov    %eax,-0x14000(%rsp)
  0x00007f779d3495c7: push   %rbp
  0x00007f779d3495c8: sub    $0x30,%rsp
  0x00007f779d3495cc: movabs $0x7f7783c03158,%rsi  ;   {metadata(method data for {method} {0x00007f7783c02cf8} 'lockByLock' '()V' in 'com/chenluo/jvm/learn/TestLock')}
  0x00007f779d3495d6: mov    0xdc(%rsi),%edi
  0x00007f779d3495dc: add    $0x8,%edi
  0x00007f779d3495df: mov    %edi,0xdc(%rsi)
  0x00007f779d3495e5: movabs $0x7f7783c02cf8,%rsi  ;   {metadata({method} {0x00007f7783c02cf8} 'lockByLock' '()V' in 'com/chenluo/jvm/learn/TestLock')}
  0x00007f779d3495ef: and    $0x1ff8,%edi
  0x00007f779d3495f5: cmp    $0x0,%edi
  0x00007f779d3495f8: je     0x00007f779d349703
  0x00007f779d3495fe: movabs $0x6b4a39ae8,%rsi  ;   {oop(a 'java/lang/Class' = 'com/chenluo/jvm/learn/TestLock')}
  0x00007f779d349608: mov    0x6c(%rsi),%esi
  0x00007f779d34960b: shl    $0x3,%rsi          ;*getstatic reentrantLock
                                                ; - com.chenluo.jvm.learn.TestLock::lockByLock@0 (line 32)

  0x00007f779d34960f: cmp    (%rsi),%rax        ; implicit exception: dispatches to 0x00007f779d34971a
  0x00007f779d349612: mov    %rsi,%rdi
  0x00007f779d349615: movabs $0x7f7783c03158,%rbx  ;   {metadata(method data for {method} {0x00007f7783c02cf8} 'lockByLock' '()V' in 'com/chenluo/jvm/learn/TestLock')}
  0x00007f779d34961f: mov    0x8(%rdi),%edi
  0x00007f779d349622: shl    $0x3,%rdi
  0x00007f779d349626: cmp    0x110(%rbx),%rdi
  0x00007f779d34962d: jne    0x00007f779d34963c
  0x00007f779d34962f: addq   $0x1,0x118(%rbx)
  0x00007f779d349637: jmpq   0x00007f779d3496a2
  0x00007f779d34963c: cmp    0x120(%rbx),%rdi
  0x00007f779d349643: jne    0x00007f779d349652
  0x00007f779d349645: addq   $0x1,0x128(%rbx)
  0x00007f779d34964d: jmpq   0x00007f779d3496a2
  0x00007f779d349652: cmpq   $0x0,0x110(%rbx)
  0x00007f779d34965d: jne    0x00007f779d349676
  0x00007f779d34965f: mov    %rdi,0x110(%rbx)
  0x00007f779d349666: movq   $0x1,0x118(%rbx)
  0x00007f779d349671: jmpq   0x00007f779d3496a2
  0x00007f779d349676: cmpq   $0x0,0x120(%rbx)
  0x00007f779d349681: jne    0x00007f779d34969a
  0x00007f779d349683: mov    %rdi,0x120(%rbx)
  0x00007f779d34968a: movq   $0x1,0x128(%rbx)
  0x00007f779d349695: jmpq   0x00007f779d3496a2
  0x00007f779d34969a: addq   $0x1,0x108(%rbx)
  0x00007f779d3496a2: nop
  0x00007f779d3496a3: nop
  0x00007f779d3496a4: nop
  0x00007f779d3496a5: nop
  0x00007f779d3496a6: nop
  0x00007f779d3496a7: callq  0x00007f779d045de0  ; OopMap{off=236}
                                                ;*invokevirtual tryLock
                                                ; - com.chenluo.jvm.learn.TestLock::lockByLock@3 (line 32)
                                                ;   {optimized virtual_call}
  0x00007f779d3496ac: cmp    $0x0,%eax
  0x00007f779d3496af: movabs $0x7f7783c03158,%rsi  ;   {metadata(method data for {method} {0x00007f7783c02cf8} 'lockByLock' '()V' in 'com/chenluo/jvm/learn/TestLock')}
  0x00007f779d3496b9: movabs $0x138,%rdi
  0x00007f779d3496c3: je     0x00007f779d3496d3
  0x00007f779d3496c9: movabs $0x148,%rdi
  0x00007f779d3496d3: mov    (%rsi,%rdi,1),%rbx
  0x00007f779d3496d7: lea    0x1(%rbx),%rbx
  0x00007f779d3496db: mov    %rbx,(%rsi,%rdi,1)
  0x00007f779d3496df: je     0x00007f779d3496f7  ;*ifeq
                                                ; - com.chenluo.jvm.learn.TestLock::lockByLock@6 (line 32)

  0x00007f779d3496e5: movabs $0x6b4a39ae8,%rsi  ;   {oop(a 'java/lang/Class' = 'com/chenluo/jvm/learn/TestLock')}
  0x00007f779d3496ef: mov    0x70(%rsi),%edi    ;*getstatic a
                                                ; - com.chenluo.jvm.learn.TestLock::lockByLock@9 (line 33)

  0x00007f779d3496f2: inc    %edi
  0x00007f779d3496f4: mov    %edi,0x70(%rsi)    ;*putstatic a
                                                ; - com.chenluo.jvm.learn.TestLock::lockByLock@14 (line 33)

  0x00007f779d3496f7: add    $0x30,%rsp
  0x00007f779d3496fb: pop    %rbp
  0x00007f779d3496fc: test   %eax,0x1592a9fe(%rip)        # 0x00007f77b2c74100
                                                ;   {poll_return}
  0x00007f779d349702: retq   
  0x00007f779d349703: mov    %rsi,0x8(%rsp)
  0x00007f779d349708: movq   $0xffffffffffffffff,(%rsp)
  0x00007f779d349710: callq  0x00007f779d339320  ; OopMap{off=341}
                                                ;*synchronization entry
                                                ; - com.chenluo.jvm.learn.TestLock::lockByLock@-1 (line 32)
                                                ;   {runtime_call}
  0x00007f779d349715: jmpq   0x00007f779d3495fe
  0x00007f779d34971a: callq  0x00007f779d333ec0  ; OopMap{rsi=Oop off=351}
                                                ;*invokevirtual tryLock
                                                ; - com.chenluo.jvm.learn.TestLock::lockByLock@3 (line 32)
                                                ;   {runtime_call}
  0x00007f779d34971f: nop
  0x00007f779d349720: nop
  0x00007f779d349721: mov    0x300(%r15),%rax
  0x00007f779d349728: movabs $0x0,%r10
  0x00007f779d349732: mov    %r10,0x300(%r15)
  0x00007f779d349739: movabs $0x0,%r10
  0x00007f779d349743: mov    %r10,0x308(%r15)
  0x00007f779d34974a: add    $0x30,%rsp
  0x00007f779d34974e: pop    %rbp
  0x00007f779d34974f: jmpq   0x00007f779d0700a0  ;   {runtime_call}
  0x00007f779d349754: hlt    
  0x00007f779d349755: hlt    
  0x00007f779d349756: hlt    
  0x00007f779d349757: hlt    
  0x00007f779d349758: hlt    
  0x00007f779d349759: hlt    
  0x00007f779d34975a: hlt    
  0x00007f779d34975b: hlt    
  0x00007f779d34975c: hlt    
  0x00007f779d34975d: hlt    
  0x00007f779d34975e: hlt    
  0x00007f779d34975f: hlt    
[Stub Code]
  0x00007f779d349760: nop                       ;   {no_reloc}
  0x00007f779d349761: nop
  0x00007f779d349762: nop
  0x00007f779d349763: nop
  0x00007f779d349764: nop
  0x00007f779d349765: movabs $0x0,%rbx          ;   {static_stub}
  0x00007f779d34976f: jmpq   0x00007f779d34976f  ;   {runtime_call}
[Exception Handler]
  0x00007f779d349774: callq  0x00007f779d3317a0  ;   {runtime_call}
  0x00007f779d349779: mov    %rsp,-0x28(%rsp)
  0x00007f779d34977e: sub    $0x80,%rsp
  0x00007f779d349785: mov    %rax,0x78(%rsp)
  0x00007f779d34978a: mov    %rcx,0x70(%rsp)
  0x00007f779d34978f: mov    %rdx,0x68(%rsp)
  0x00007f779d349794: mov    %rbx,0x60(%rsp)
  0x00007f779d349799: mov    %rbp,0x50(%rsp)
  0x00007f779d34979e: mov    %rsi,0x48(%rsp)
  0x00007f779d3497a3: mov    %rdi,0x40(%rsp)
  0x00007f779d3497a8: mov    %r8,0x38(%rsp)
  0x00007f779d3497ad: mov    %r9,0x30(%rsp)
  0x00007f779d3497b2: mov    %r10,0x28(%rsp)
  0x00007f779d3497b7: mov    %r11,0x20(%rsp)
  0x00007f779d3497bc: mov    %r12,0x18(%rsp)
  0x00007f779d3497c1: mov    %r13,0x10(%rsp)
  0x00007f779d3497c6: mov    %r14,0x8(%rsp)
  0x00007f779d3497cb: mov    %r15,(%rsp)
  0x00007f779d3497cf: movabs $0x7f77b276249e,%rdi  ;   {external_word}
  0x00007f779d3497d9: movabs $0x7f779d349779,%rsi  ;   {internal_word}
  0x00007f779d3497e3: mov    %rsp,%rdx
  0x00007f779d3497e6: and    $0xfffffffffffffff0,%rsp
  0x00007f779d3497ea: callq  0x00007f77b2488460  ;   {runtime_call}
  0x00007f779d3497ef: hlt    
[Deopt Handler Code]
  0x00007f779d3497f0: movabs $0x7f779d3497f0,%r10  ;   {section_word}
  0x00007f779d3497fa: push   %r10
  0x00007f779d3497fc: jmpq   0x00007f779d046e40  ;   {runtime_call}
  0x00007f779d349801: hlt    
  0x00007f779d349802: hlt    
  0x00007f779d349803: hlt    
  0x00007f779d349804: hlt    
  0x00007f779d349805: hlt    
  0x00007f779d349806: hlt    
  0x00007f779d349807: hlt    
Decoding compiled method 0x00007f779d349910:
Code:
[Entry Point]
[Constants]
  # {method} {0x00007f77839a8ef8} 'tryLock' '()Z' in 'java/util/concurrent/locks/ReentrantLock'
  #           [sp+0x40]  (sp of caller)
  0x00007f779d349a80: mov    0x8(%rsi),%r10d
  0x00007f779d349a84: shl    $0x3,%r10
  0x00007f779d349a88: cmp    %rax,%r10
  0x00007f779d349a8b: jne    0x00007f779d045ba0  ;   {runtime_call}
  0x00007f779d349a91: nopl   0x0(%rax,%rax,1)
  0x00007f779d349a99: nopl   0x0(%rax)
[Verified Entry Point]
  0x00007f779d349aa0: mov    %eax,-0x14000(%rsp)
  0x00007f779d349aa7: push   %rbp
  0x00007f779d349aa8: sub    $0x30,%rsp
  0x00007f779d349aac: movabs $0x7f7783ab2c90,%rdx  ;   {metadata(method data for {method} {0x00007f77839a8ef8} 'tryLock' '()Z' in 'java/util/concurrent/locks/ReentrantLock')}
  0x00007f779d349ab6: mov    0xdc(%rdx),%edi
  0x00007f779d349abc: add    $0x8,%edi
  0x00007f779d349abf: mov    %edi,0xdc(%rdx)
  0x00007f779d349ac5: movabs $0x7f77839a8ef8,%rdx  ;   {metadata({method} {0x00007f77839a8ef8} 'tryLock' '()Z' in 'java/util/concurrent/locks/ReentrantLock')}
  0x00007f779d349acf: and    $0x1ff8,%edi
  0x00007f779d349ad5: cmp    $0x0,%edi
  0x00007f779d349ad8: je     0x00007f779d349b93  ;*aload_0
                                                ; - java.util.concurrent.locks.ReentrantLock::tryLock@0 (line 365)

  0x00007f779d349ade: mov    0xc(%rsi),%esi
  0x00007f779d349ae1: shl    $0x3,%rsi          ;*getfield sync
                                                ; - java.util.concurrent.locks.ReentrantLock::tryLock@1 (line 365)

  0x00007f779d349ae5: cmp    (%rsi),%rax        ; implicit exception: dispatches to 0x00007f779d349baa
  0x00007f779d349ae8: mov    %rsi,%rdx
  0x00007f779d349aeb: movabs $0x7f7783ab2c90,%rdi  ;   {metadata(method data for {method} {0x00007f77839a8ef8} 'tryLock' '()Z' in 'java/util/concurrent/locks/ReentrantLock')}
  0x00007f779d349af5: mov    0x8(%rdx),%edx
  0x00007f779d349af8: shl    $0x3,%rdx
  0x00007f779d349afc: cmp    0x110(%rdi),%rdx
  0x00007f779d349b03: jne    0x00007f779d349b12
  0x00007f779d349b05: addq   $0x1,0x118(%rdi)
  0x00007f779d349b0d: jmpq   0x00007f779d349b78
  0x00007f779d349b12: cmp    0x120(%rdi),%rdx
  0x00007f779d349b19: jne    0x00007f779d349b28
  0x00007f779d349b1b: addq   $0x1,0x128(%rdi)
  0x00007f779d349b23: jmpq   0x00007f779d349b78
  0x00007f779d349b28: cmpq   $0x0,0x110(%rdi)
  0x00007f779d349b33: jne    0x00007f779d349b4c
  0x00007f779d349b35: mov    %rdx,0x110(%rdi)
  0x00007f779d349b3c: movq   $0x1,0x118(%rdi)
  0x00007f779d349b47: jmpq   0x00007f779d349b78
  0x00007f779d349b4c: cmpq   $0x0,0x120(%rdi)
  0x00007f779d349b57: jne    0x00007f779d349b70
  0x00007f779d349b59: mov    %rdx,0x120(%rdi)
  0x00007f779d349b60: movq   $0x1,0x128(%rdi)
  0x00007f779d349b6b: jmpq   0x00007f779d349b78
  0x00007f779d349b70: addq   $0x1,0x108(%rdi)
  0x00007f779d349b78: mov    $0x1,%edx          ;*invokevirtual nonfairTryAcquire
                                                ; - java.util.concurrent.locks.ReentrantLock::tryLock@5 (line 365)

  0x00007f779d349b7d: nop
  0x00007f779d349b7e: nop
  0x00007f779d349b7f: callq  0x00007f779d045de0  ; OopMap{off=260}
                                                ;*invokevirtual nonfairTryAcquire
                                                ; - java.util.concurrent.locks.ReentrantLock::tryLock@5 (line 365)
                                                ;   {optimized virtual_call}
  0x00007f779d349b84: and    $0x1,%eax
  0x00007f779d349b87: add    $0x30,%rsp
  0x00007f779d349b8b: pop    %rbp
  0x00007f779d349b8c: test   %eax,0x1592a56e(%rip)        # 0x00007f77b2c74100
                                                ;   {poll_return}
  0x00007f779d349b92: retq   
  0x00007f779d349b93: mov    %rdx,0x8(%rsp)
  0x00007f779d349b98: movq   $0xffffffffffffffff,(%rsp)
  0x00007f779d349ba0: callq  0x00007f779d339320  ; OopMap{rsi=Oop off=293}
                                                ;*synchronization entry
                                                ; - java.util.concurrent.locks.ReentrantLock::tryLock@-1 (line 365)
                                                ;   {runtime_call}
  0x00007f779d349ba5: jmpq   0x00007f779d349ade
  0x00007f779d349baa: callq  0x00007f779d333ec0  ; OopMap{rsi=Oop off=303}
                                                ;*invokevirtual nonfairTryAcquire
                                                ; - java.util.concurrent.locks.ReentrantLock::tryLock@5 (line 365)
                                                ;   {runtime_call}
  0x00007f779d349baf: nop
  0x00007f779d349bb0: nop
  0x00007f779d349bb1: mov    0x300(%r15),%rax
  0x00007f779d349bb8: movabs $0x0,%r10
  0x00007f779d349bc2: mov    %r10,0x300(%r15)
  0x00007f779d349bc9: movabs $0x0,%r10
  0x00007f779d349bd3: mov    %r10,0x308(%r15)
  0x00007f779d349bda: add    $0x30,%rsp
  0x00007f779d349bde: pop    %rbp
  0x00007f779d349bdf: jmpq   0x00007f779d0700a0  ;   {runtime_call}
  0x00007f779d349be4: hlt    
  0x00007f779d349be5: hlt    
  0x00007f779d349be6: hlt    
  0x00007f779d349be7: hlt    
  0x00007f779d349be8: hlt    
  0x00007f779d349be9: hlt    
  0x00007f779d349bea: hlt    
  0x00007f779d349beb: hlt    
  0x00007f779d349bec: hlt    
  0x00007f779d349bed: hlt    
  0x00007f779d349bee: hlt    
  0x00007f779d349bef: hlt    
  0x00007f779d349bf0: hlt    
  0x00007f779d349bf1: hlt    
  0x00007f779d349bf2: hlt    
  0x00007f779d349bf3: hlt    
  0x00007f779d349bf4: hlt    
  0x00007f779d349bf5: hlt    
  0x00007f779d349bf6: hlt    
  0x00007f779d349bf7: hlt    
  0x00007f779d349bf8: hlt    
  0x00007f779d349bf9: hlt    
  0x00007f779d349bfa: hlt    
  0x00007f779d349bfb: hlt    
  0x00007f779d349bfc: hlt    
  0x00007f779d349bfd: hlt    
  0x00007f779d349bfe: hlt    
  0x00007f779d349bff: hlt    
[Stub Code]
  0x00007f779d349c00: nop                       ;   {no_reloc}
  0x00007f779d349c01: nop
  0x00007f779d349c02: nop
  0x00007f779d349c03: nop
  0x00007f779d349c04: nop
  0x00007f779d349c05: movabs $0x0,%rbx          ;   {static_stub}
  0x00007f779d349c0f: jmpq   0x00007f779d349c0f  ;   {runtime_call}
[Exception Handler]
  0x00007f779d349c14: callq  0x00007f779d3317a0  ;   {runtime_call}
  0x00007f779d349c19: mov    %rsp,-0x28(%rsp)
  0x00007f779d349c1e: sub    $0x80,%rsp
  0x00007f779d349c25: mov    %rax,0x78(%rsp)
  0x00007f779d349c2a: mov    %rcx,0x70(%rsp)
  0x00007f779d349c2f: mov    %rdx,0x68(%rsp)
  0x00007f779d349c34: mov    %rbx,0x60(%rsp)
  0x00007f779d349c39: mov    %rbp,0x50(%rsp)
  0x00007f779d349c3e: mov    %rsi,0x48(%rsp)
  0x00007f779d349c43: mov    %rdi,0x40(%rsp)
  0x00007f779d349c48: mov    %r8,0x38(%rsp)
  0x00007f779d349c4d: mov    %r9,0x30(%rsp)
  0x00007f779d349c52: mov    %r10,0x28(%rsp)
  0x00007f779d349c57: mov    %r11,0x20(%rsp)
  0x00007f779d349c5c: mov    %r12,0x18(%rsp)
  0x00007f779d349c61: mov    %r13,0x10(%rsp)
  0x00007f779d349c66: mov    %r14,0x8(%rsp)
  0x00007f779d349c6b: mov    %r15,(%rsp)
  0x00007f779d349c6f: movabs $0x7f77b276249e,%rdi  ;   {external_word}
  0x00007f779d349c79: movabs $0x7f779d349c19,%rsi  ;   {internal_word}
  0x00007f779d349c83: mov    %rsp,%rdx
  0x00007f779d349c86: and    $0xfffffffffffffff0,%rsp
  0x00007f779d349c8a: callq  0x00007f77b2488460  ;   {runtime_call}
  0x00007f779d349c8f: hlt    
[Deopt Handler Code]
  0x00007f779d349c90: movabs $0x7f779d349c90,%r10  ;   {section_word}
  0x00007f779d349c9a: push   %r10
  0x00007f779d349c9c: jmpq   0x00007f779d046e40  ;   {runtime_call}
  0x00007f779d349ca1: hlt    
  0x00007f779d349ca2: hlt    
  0x00007f779d349ca3: hlt    
  0x00007f779d349ca4: hlt    
  0x00007f779d349ca5: hlt    
  0x00007f779d349ca6: hlt    
  0x00007f779d349ca7: hlt    
